
AI_Accelerometer_LSM6DSL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a45c  08007ea0  08007ea0  00017ea0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122fc  080122fc  00030910  2**0
                  CONTENTS
  4 .ARM          00000008  080122fc  080122fc  000222fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012304  08012304  00030910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012304  08012304  00022304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012308  08012308  00022308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000910  20000000  0801230c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bfc  20000920  08012c1c  00030920  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000151c  08012c1c  0003151c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030910  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a5a  00000000  00000000  00030940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003854  00000000  00000000  0004539a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009c17  00000000  00000000  00048bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00052808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  000534a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029911  00000000  00000000  00054338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016643  00000000  00000000  0007dc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f741a  00000000  00000000  0009428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  0018b6a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036ec  00000000  00000000  0018b774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0018ee60  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0018ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000920 	.word	0x20000920
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e74 	.word	0x08007e74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000924 	.word	0x20000924
 80001cc:	08007e74 	.word	0x08007e74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ai_sharp_train_data_collect>:
#include "lsm6dsl.h"

volatile bool button_is_pushed = false;

void ai_sharp_train_data_collect(void)
{
 8000eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint32_t counter = 0;
	int32_t size = 0;

	static uint32_t time_cnt = 0;

	if(time_cnt == 0)
 8000eb0:	4c33      	ldr	r4, [pc, #204]	; (8000f80 <ai_sharp_train_data_collect+0xd4>)
{
 8000eb2:	b08c      	sub	sp, #48	; 0x30
	uint8_t tx_buffer[TX_BUFFER_SIZE] = {0};
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	221a      	movs	r2, #26
 8000eb8:	a805      	add	r0, sp, #20
 8000eba:	9104      	str	r1, [sp, #16]
 8000ebc:	f003 fefa 	bl	8004cb4 <memset>
	if(time_cnt == 0)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	b913      	cbnz	r3, 8000eca <ai_sharp_train_data_collect+0x1e>
		time_cnt = HAL_GetTick();
 8000ec4:	f000 fb26 	bl	8001514 <HAL_GetTick>
 8000ec8:	6020      	str	r0, [r4, #0]

	if((HAL_GetTick() - time_cnt) > TASK_TIME_MS)
 8000eca:	f000 fb23 	bl	8001514 <HAL_GetTick>
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	1ac0      	subs	r0, r0, r3
 8000ed2:	280a      	cmp	r0, #10
 8000ed4:	d94b      	bls.n	8000f6e <ai_sharp_train_data_collect+0xc2>
	{
		time_cnt = HAL_GetTick();
 8000ed6:	f000 fb1d 	bl	8001514 <HAL_GetTick>
 8000eda:	4d2a      	ldr	r5, [pc, #168]	; (8000f84 <ai_sharp_train_data_collect+0xd8>)
 8000edc:	6020      	str	r0, [r4, #0]

		lsm6dsl_get_accel_axis(&accel_axes);
 8000ede:	a801      	add	r0, sp, #4
 8000ee0:	f000 f95e 	bl	80011a0 <lsm6dsl_get_accel_axis>
 8000ee4:	462b      	mov	r3, r5

		for(uint32_t i=0; i<(DATA_BUFFER_SIZE-3); i+=3 )
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	462a      	mov	r2, r5
 8000eea:	f240 1029 	movw	r0, #297	; 0x129
		{
			data_in[i] = data_in[i+3];
 8000eee:	68dc      	ldr	r4, [r3, #12]
 8000ef0:	601c      	str	r4, [r3, #0]
 8000ef2:	3103      	adds	r1, #3
			data_in[i+1] = data_in[i+4];
 8000ef4:	691c      	ldr	r4, [r3, #16]
 8000ef6:	605c      	str	r4, [r3, #4]
		for(uint32_t i=0; i<(DATA_BUFFER_SIZE-3); i+=3 )
 8000ef8:	4281      	cmp	r1, r0
			data_in[i+2] = data_in[i+5];
 8000efa:	695c      	ldr	r4, [r3, #20]
 8000efc:	609c      	str	r4, [r3, #8]
		for(uint32_t i=0; i<(DATA_BUFFER_SIZE-3); i+=3 )
 8000efe:	f103 030c 	add.w	r3, r3, #12
 8000f02:	d1f4      	bne.n	8000eee <ai_sharp_train_data_collect+0x42>
		}

		data_in[DATA_BUFFER_SIZE-3] = accel_axes.x;
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
		data_in[DATA_BUFFER_SIZE-2] = accel_axes.y;
 8000f0a:	9b02      	ldr	r3, [sp, #8]
 8000f0c:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
		data_in[DATA_BUFFER_SIZE-1] = accel_axes.z;
 8000f10:	9b03      	ldr	r3, [sp, #12]
 8000f12:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac

		counter++;
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <ai_sharp_train_data_collect+0xdc>)

		if(button_is_pushed == true)
 8000f18:	4e1c      	ldr	r6, [pc, #112]	; (8000f8c <ai_sharp_train_data_collect+0xe0>)
		counter++;
 8000f1a:	6813      	ldr	r3, [r2, #0]
		if(button_is_pushed == true)
 8000f1c:	7831      	ldrb	r1, [r6, #0]
		counter++;
 8000f1e:	3301      	adds	r3, #1
 8000f20:	6013      	str	r3, [r2, #0]
		if(button_is_pushed == true)
 8000f22:	b909      	cbnz	r1, 8000f28 <ai_sharp_train_data_collect+0x7c>
		{
			counter = NUMBER_OF_RECORDS;
		}

		if(counter >= NUMBER_OF_RECORDS)
 8000f24:	2b63      	cmp	r3, #99	; 0x63
 8000f26:	d922      	bls.n	8000f6e <ai_sharp_train_data_collect+0xc2>
		{
			counter = 0;
 8000f28:	2400      	movs	r4, #0

			for (int var = 0; var < DATA_BUFFER_SIZE; ++var)
			{
				size = sprintf((char *)tx_buffer, "%d,", (int)data_in[var]);
 8000f2a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8000f9c <ai_sharp_train_data_collect+0xf0>
				HAL_UART_Transmit(&huart2, tx_buffer, size, 10);
 8000f2e:	4f18      	ldr	r7, [pc, #96]	; (8000f90 <ai_sharp_train_data_collect+0xe4>)
			counter = 0;
 8000f30:	6014      	str	r4, [r2, #0]
				size = sprintf((char *)tx_buffer, "%d,", (int)data_in[var]);
 8000f32:	f855 2b04 	ldr.w	r2, [r5], #4
 8000f36:	4641      	mov	r1, r8
 8000f38:	a804      	add	r0, sp, #16
 8000f3a:	f004 fcab 	bl	8005894 <siprintf>
			for (int var = 0; var < DATA_BUFFER_SIZE; ++var)
 8000f3e:	3401      	adds	r4, #1
				HAL_UART_Transmit(&huart2, tx_buffer, size, 10);
 8000f40:	b282      	uxth	r2, r0
 8000f42:	230a      	movs	r3, #10
 8000f44:	a904      	add	r1, sp, #16
 8000f46:	4638      	mov	r0, r7
 8000f48:	f001 ffe4 	bl	8002f14 <HAL_UART_Transmit>
			for (int var = 0; var < DATA_BUFFER_SIZE; ++var)
 8000f4c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8000f50:	d1ef      	bne.n	8000f32 <ai_sharp_train_data_collect+0x86>
			}

			if(button_is_pushed == true)
 8000f52:	7833      	ldrb	r3, [r6, #0]
 8000f54:	b173      	cbz	r3, 8000f74 <ai_sharp_train_data_collect+0xc8>
			{
				size = sprintf((char *)tx_buffer, "1\n");
 8000f56:	490f      	ldr	r1, [pc, #60]	; (8000f94 <ai_sharp_train_data_collect+0xe8>)
 8000f58:	a804      	add	r0, sp, #16
 8000f5a:	f004 fcbb 	bl	80058d4 <strcpy>
				button_is_pushed = false;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	7033      	strb	r3, [r6, #0]
			else
			{
				size = sprintf((char *)tx_buffer, "0\n");
			}

			HAL_UART_Transmit(&huart2, tx_buffer, size, 1);
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <ai_sharp_train_data_collect+0xe4>)
 8000f64:	2301      	movs	r3, #1
 8000f66:	2202      	movs	r2, #2
 8000f68:	a904      	add	r1, sp, #16
 8000f6a:	f001 ffd3 	bl	8002f14 <HAL_UART_Transmit>
		}
	}
}
 8000f6e:	b00c      	add	sp, #48	; 0x30
 8000f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				size = sprintf((char *)tx_buffer, "0\n");
 8000f74:	4908      	ldr	r1, [pc, #32]	; (8000f98 <ai_sharp_train_data_collect+0xec>)
 8000f76:	a804      	add	r0, sp, #16
 8000f78:	f004 fcac 	bl	80058d4 <strcpy>
 8000f7c:	e7f1      	b.n	8000f62 <ai_sharp_train_data_collect+0xb6>
 8000f7e:	bf00      	nop
 8000f80:	20000df4 	.word	0x20000df4
 8000f84:	20000944 	.word	0x20000944
 8000f88:	20000940 	.word	0x20000940
 8000f8c:	2000093c 	.word	0x2000093c
 8000f90:	20000e6c 	.word	0x20000e6c
 8000f94:	08007eb8 	.word	0x08007eb8
 8000f98:	08007ebb 	.word	0x08007ebb
 8000f9c:	08007eb4 	.word	0x08007eb4

08000fa0 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == B1_Pin)
 8000fa0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
	{
		button_is_pushed = true;
 8000fa4:	bf02      	ittt	eq
 8000fa6:	4b02      	ldreq	r3, [pc, #8]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x10>)
 8000fa8:	2201      	moveq	r2, #1
 8000faa:	701a      	strbeq	r2, [r3, #0]
	}
}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000093c 	.word	0x2000093c

08000fb4 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <MX_CRC_Init+0x24>)
{
 8000fb6:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_CRC_Init+0x28>)
 8000fba:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fbc:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fbe:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fc2:	8083      	strh	r3, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc8:	f000 fb10 	bl	80015ec <HAL_CRC_Init>
 8000fcc:	b118      	cbz	r0, 8000fd6 <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000fd2:	f000 b973 	b.w	80012bc <Error_Handler>
}
 8000fd6:	bd08      	pop	{r3, pc}
 8000fd8:	20000df8 	.word	0x20000df8
 8000fdc:	40023000 	.word	0x40023000

08000fe0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000fe0:	6802      	ldr	r2, [r0, #0]
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_CRC_MspInit+0x24>)
 8000fe4:	429a      	cmp	r2, r3
{
 8000fe6:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000fe8:	d10a      	bne.n	8001000 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fea:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ff4:	649a      	str	r2, [r3, #72]	; 0x48
 8000ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001000:	b002      	add	sp, #8
 8001002:	4770      	bx	lr
 8001004:	40023000 	.word	0x40023000

08001008 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001008:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	2214      	movs	r2, #20
{
 800100c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	eb0d 0002 	add.w	r0, sp, r2
 8001012:	2100      	movs	r1, #0
 8001014:	f003 fe4e 	bl	8004cb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <MX_GPIO_Init+0xa8>)
 800101a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101c:	f042 0204 	orr.w	r2, r2, #4
 8001020:	64da      	str	r2, [r3, #76]	; 0x4c
 8001022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001024:	f002 0204 	and.w	r2, r2, #4
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800102e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001032:	64da      	str	r2, [r3, #76]	; 0x4c
 8001034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001036:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800103a:	9202      	str	r2, [sp, #8]
 800103c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	64da      	str	r2, [r3, #76]	; 0x4c
 8001046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001048:	f002 0201 	and.w	r2, r2, #1
 800104c:	9203      	str	r2, [sp, #12]
 800104e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001052:	f042 0202 	orr.w	r2, r2, #2
 8001056:	64da      	str	r2, [r3, #76]	; 0x4c
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2120      	movs	r1, #32
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800106a:	f000 fbfb 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_GPIO_Init+0xac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_GPIO_Init+0xb0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001078:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800107a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001080:	f000 fb12 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	2120      	movs	r1, #32
 8001088:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001096:	f000 fb07 	bl	80016a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800109a:	4622      	mov	r2, r4
 800109c:	4621      	mov	r1, r4
 800109e:	2028      	movs	r0, #40	; 0x28
 80010a0:	f000 fa50 	bl	8001544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a4:	2028      	movs	r0, #40	; 0x28
 80010a6:	f000 fa7f 	bl	80015a8 <HAL_NVIC_EnableIRQ>

}
 80010aa:	b00a      	add	sp, #40	; 0x28
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	10210000 	.word	0x10210000
 80010b8:	48000800 	.word	0x48000800

080010bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010bc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_I2C1_Init+0x50>)
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <MX_I2C1_Init+0x54>)
 80010c4:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	2201      	movs	r2, #1
 80010cc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80010d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010da:	f000 fce6 	bl	8001aaa <HAL_I2C_Init>
 80010de:	b108      	cbz	r0, 80010e4 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80010e0:	f000 f8ec 	bl	80012bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <MX_I2C1_Init+0x4c>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	f000 fdec 	bl	8001cc4 <HAL_I2CEx_ConfigAnalogFilter>
 80010ec:	b108      	cbz	r0, 80010f2 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80010ee:	f000 f8e5 	bl	80012bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_I2C1_Init+0x4c>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	f000 fe0b 	bl	8001d10 <HAL_I2CEx_ConfigDigitalFilter>
 80010fa:	b118      	cbz	r0, 8001104 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001100:	f000 b8dc 	b.w	80012bc <Error_Handler>
}
 8001104:	bd08      	pop	{r3, pc}
 8001106:	bf00      	nop
 8001108:	20000e1c 	.word	0x20000e1c
 800110c:	40005400 	.word	0x40005400
 8001110:	10909cec 	.word	0x10909cec

08001114 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001114:	b510      	push	{r4, lr}
 8001116:	4604      	mov	r4, r0
 8001118:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	2214      	movs	r2, #20
 800111c:	2100      	movs	r1, #0
 800111e:	a803      	add	r0, sp, #12
 8001120:	f003 fdc8 	bl	8004cb4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001124:	6822      	ldr	r2, [r4, #0]
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_I2C_MspInit+0x60>)
 8001128:	429a      	cmp	r2, r3
 800112a:	d121      	bne.n	8001170 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4c12      	ldr	r4, [pc, #72]	; (8001178 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	4813      	ldr	r0, [pc, #76]	; (800117c <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001138:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001142:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001146:	2312      	movs	r3, #18
 8001148:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2101      	movs	r1, #1
 800114e:	2303      	movs	r3, #3
 8001150:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001154:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001158:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f000 faa5 	bl	80016a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800115e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001164:	65a3      	str	r3, [r4, #88]	; 0x58
 8001166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001170:	b008      	add	sp, #32
 8001172:	bd10      	pop	{r4, pc}
 8001174:	40005400 	.word	0x40005400
 8001178:	40021000 	.word	0x40021000
 800117c:	48000400 	.word	0x48000400

08001180 <lsm6dsl_read>:
{
	HAL_I2C_Mem_Write(I2C_INTERFACE, LSM6DSL_I2C_ADDR, reg, 1, data, size, I2C_TIMEOUT);
}

void lsm6dsl_read(uint8_t reg, uint8_t *data, uint32_t size)
{
 8001180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(I2C_INTERFACE, LSM6DSL_I2C_ADDR, reg, 1, data, size, I2C_TIMEOUT);
 8001182:	2301      	movs	r3, #1
 8001184:	b292      	uxth	r2, r2
 8001186:	e9cd 1200 	strd	r1, r2, [sp]
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	4602      	mov	r2, r0
 800118e:	21d6      	movs	r1, #214	; 0xd6
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <lsm6dsl_read+0x1c>)
 8001192:	f000 fcdb 	bl	8001b4c <HAL_I2C_Mem_Read>
}
 8001196:	b005      	add	sp, #20
 8001198:	f85d fb04 	ldr.w	pc, [sp], #4
 800119c:	20000e1c 	.word	0x20000e1c

080011a0 <lsm6dsl_get_accel_axis>:
{
 80011a0:	b513      	push	{r0, r1, r4, lr}
	lsm6dsl_read(LSM6DSL_OUTX_L_XL, axes_raw.bytes, LSM6DSL_ACCE_DATA_SIZE);
 80011a2:	2206      	movs	r2, #6
{
 80011a4:	4604      	mov	r4, r0
	lsm6dsl_read(LSM6DSL_OUTX_L_XL, axes_raw.bytes, LSM6DSL_ACCE_DATA_SIZE);
 80011a6:	4669      	mov	r1, sp
 80011a8:	2028      	movs	r0, #40	; 0x28
 80011aa:	f7ff ffe9 	bl	8001180 <lsm6dsl_read>
	axes->x = (int32_t)((float)axes_raw.x * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011ae:	f9bd 3000 	ldrsh.w	r3, [sp]
 80011b2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001200 <lsm6dsl_get_accel_axis+0x60>
 80011b6:	ee07 3a10 	vmov	s14, r3
 80011ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011be:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
	axes->x = (int32_t)((float)axes_raw.x * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80011c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80011ca:	ed84 7a00 	vstr	s14, [r4]
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011ce:	ee07 3a10 	vmov	s14, r3
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011d2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80011d6:	ee07 3a90 	vmov	s15, r3
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011e2:	ee27 7a26 	vmul.f32	s14, s14, s13
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011ea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011f2:	ed84 7a01 	vstr	s14, [r4, #4]
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 80011f6:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80011fa:	b002      	add	sp, #8
 80011fc:	bd10      	pop	{r4, pc}
 80011fe:	bf00      	nop
 8001200:	3d79db23 	.word	0x3d79db23

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b500      	push	{lr}
 8001206:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001208:	2224      	movs	r2, #36	; 0x24
 800120a:	2100      	movs	r1, #0
 800120c:	a806      	add	r0, sp, #24
 800120e:	f003 fd51 	bl	8004cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001212:	2214      	movs	r2, #20
 8001214:	2100      	movs	r1, #0
 8001216:	4668      	mov	r0, sp
 8001218:	f003 fd4c 	bl	8004cb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	2288      	movs	r2, #136	; 0x88
 800121e:	2100      	movs	r1, #0
 8001220:	a816      	add	r0, sp, #88	; 0x58
 8001222:	f003 fd47 	bl	8004cb4 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001226:	2210      	movs	r2, #16
 8001228:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
 800122c:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001232:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001234:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001236:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800123a:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001242:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001246:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001248:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f000 fe55 	bl	8001ef8 <HAL_RCC_OscConfig>
 800124e:	b108      	cbz	r0, 8001254 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001252:	e7fe      	b.n	8001252 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001254:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001258:	220f      	movs	r2, #15
 800125a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125e:	2104      	movs	r1, #4
 8001260:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001266:	f001 f8cd 	bl	8002404 <HAL_RCC_ClockConfig>
 800126a:	b108      	cbz	r0, 8001270 <SystemClock_Config+0x6c>
 800126c:	b672      	cpsid	i
  while (1)
 800126e:	e7fe      	b.n	800126e <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001270:	2342      	movs	r3, #66	; 0x42
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001272:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001274:	902a      	str	r0, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001276:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001278:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127a:	f001 fa81 	bl	8002780 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	b108      	cbz	r0, 8001284 <SystemClock_Config+0x80>
 8001280:	b672      	cpsid	i
  while (1)
 8001282:	e7fe      	b.n	8001282 <SystemClock_Config+0x7e>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001284:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001288:	f000 fd70 	bl	8001d6c <HAL_PWREx_ControlVoltageScaling>
 800128c:	b108      	cbz	r0, 8001292 <SystemClock_Config+0x8e>
 800128e:	b672      	cpsid	i
  while (1)
 8001290:	e7fe      	b.n	8001290 <SystemClock_Config+0x8c>
}
 8001292:	b039      	add	sp, #228	; 0xe4
 8001294:	f85d fb04 	ldr.w	pc, [sp], #4

08001298 <main>:
{
 8001298:	b508      	push	{r3, lr}
  HAL_Init();
 800129a:	f000 f919 	bl	80014d0 <HAL_Init>
  SystemClock_Config();
 800129e:	f7ff ffb1 	bl	8001204 <SystemClock_Config>
  MX_GPIO_Init();
 80012a2:	f7ff feb1 	bl	8001008 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012a6:	f000 f873 	bl	8001390 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012aa:	f7ff ff07 	bl	80010bc <MX_I2C1_Init>
  MX_CRC_Init();
 80012ae:	f7ff fe81 	bl	8000fb4 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 80012b2:	f001 feeb 	bl	800308c <MX_X_CUBE_AI_Init>
	  ai_sharp_train_data_collect();
 80012b6:	f7ff fdf9 	bl	8000eac <ai_sharp_train_data_collect>
  while (1)
 80012ba:	e7fc      	b.n	80012b6 <main+0x1e>

080012bc <Error_Handler>:
 80012bc:	b672      	cpsid	i
  while (1)
 80012be:	e7fe      	b.n	80012be <Error_Handler+0x2>

080012c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_MspInit+0x2c>)
 80012c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	661a      	str	r2, [r3, #96]	; 0x60
 80012ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80012cc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	f002 0201 	and.w	r2, r2, #1
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012dc:	659a      	str	r2, [r3, #88]	; 0x58
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e8:	b002      	add	sp, #8
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000

080012f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler>

080012f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler>

080012f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler>

080012f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler>

080012f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler>

080012fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 b8fc 	b.w	80014fc <HAL_IncTick>

08001304 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001308:	f000 bab2 	b.w	8001870 <HAL_GPIO_EXTI_IRQHandler>

0800130c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <_sbrk+0x30>)
 800130e:	6811      	ldr	r1, [r2, #0]
{
 8001310:	b510      	push	{r4, lr}
 8001312:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001314:	b909      	cbnz	r1, 800131a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001316:	490a      	ldr	r1, [pc, #40]	; (8001340 <_sbrk+0x34>)
 8001318:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	6810      	ldr	r0, [r2, #0]
 800131c:	4909      	ldr	r1, [pc, #36]	; (8001344 <_sbrk+0x38>)
 800131e:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <_sbrk+0x3c>)
 8001320:	4403      	add	r3, r0
 8001322:	1b09      	subs	r1, r1, r4
 8001324:	428b      	cmp	r3, r1
 8001326:	d906      	bls.n	8001336 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001328:	f003 fc84 	bl	8004c34 <__errno>
 800132c:	230c      	movs	r3, #12
 800132e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001330:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001334:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001336:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001338:	e7fc      	b.n	8001334 <_sbrk+0x28>
 800133a:	bf00      	nop
 800133c:	20000e68 	.word	0x20000e68
 8001340:	20001520 	.word	0x20001520
 8001344:	20018000 	.word	0x20018000
 8001348:	00000800 	.word	0x00000800

0800134c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <SystemInit+0x3c>)
 800134e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001352:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001356:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <SystemInit+0x40>)
 800135c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800135e:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8001360:	f042 0201 	orr.w	r2, r2, #1
 8001364:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001366:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800136e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001372:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001374:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001378:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001380:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001382:	6199      	str	r1, [r3, #24]
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	40021000 	.word	0x40021000

08001390 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <MX_USART2_UART_Init+0x38>)
{
 8001394:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8001396:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800139a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b2:	f001 fe3c 	bl	800302e <HAL_UART_Init>
 80013b6:	b118      	cbz	r0, 80013c0 <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80013bc:	f7ff bf7e 	b.w	80012bc <Error_Handler>
}
 80013c0:	bd08      	pop	{r3, pc}
 80013c2:	bf00      	nop
 80013c4:	20000e6c 	.word	0x20000e6c
 80013c8:	40004400 	.word	0x40004400

080013cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013cc:	b510      	push	{r4, lr}
 80013ce:	4604      	mov	r4, r0
 80013d0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	2214      	movs	r2, #20
 80013d4:	2100      	movs	r1, #0
 80013d6:	a803      	add	r0, sp, #12
 80013d8:	f003 fc6c 	bl	8004cb4 <memset>
  if(uartHandle->Instance==USART2)
 80013dc:	6822      	ldr	r2, [r4, #0]
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_UART_MspInit+0x60>)
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d120      	bne.n	8001426 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e8:	2103      	movs	r1, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013f0:	659a      	str	r2, [r3, #88]	; 0x58
 80013f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013f4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80013f8:	9201      	str	r2, [sp, #4]
 80013fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	64da      	str	r2, [r3, #76]	; 0x4c
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	220c      	movs	r2, #12
 8001410:	2302      	movs	r3, #2
 8001412:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001416:	2307      	movs	r3, #7
 8001418:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	a903      	add	r1, sp, #12
 8001422:	f000 f941 	bl	80016a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001426:	b008      	add	sp, #32
 8001428:	bd10      	pop	{r4, pc}
 800142a:	bf00      	nop
 800142c:	40004400 	.word	0x40004400

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff ff8a 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001438:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800143a:	e003      	b.n	8001444 <LoopCopyDataInit>

0800143c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800143e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001440:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001442:	3104      	adds	r1, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001448:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800144a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800144c:	d3f6      	bcc.n	800143c <CopyDataInit>
	ldr	r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001450:	e002      	b.n	8001458 <LoopFillZerobss>

08001452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001452:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001454:	f842 3b04 	str.w	r3, [r2], #4

08001458 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <LoopForever+0x16>)
	cmp	r2, r3
 800145a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800145c:	d3f9      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f003 fbef 	bl	8004c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001462:	f7ff ff19 	bl	8001298 <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800146c:	0801230c 	.word	0x0801230c
	ldr	r0, =_sdata
 8001470:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001474:	20000910 	.word	0x20000910
	ldr	r2, =_sbss
 8001478:	20000920 	.word	0x20000920
	ldr	r3, = _ebss
 800147c:	2000151c 	.word	0x2000151c

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>
	...

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_InitTick+0x40>)
{
 8001488:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800148a:	7818      	ldrb	r0, [r3, #0]
 800148c:	b908      	cbnz	r0, 8001492 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800148e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001490:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001492:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_InitTick+0x44>)
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	fbb3 f3f0 	udiv	r3, r3, r0
 800149c:	6810      	ldr	r0, [r2, #0]
 800149e:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a2:	f000 f88f 	bl	80015c4 <HAL_SYSTICK_Config>
 80014a6:	4604      	mov	r4, r0
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ac:	2d0f      	cmp	r5, #15
 80014ae:	d8ee      	bhi.n	800148e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	4602      	mov	r2, r0
 80014b2:	4629      	mov	r1, r5
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 f844 	bl	8001544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_InitTick+0x48>)
 80014be:	4620      	mov	r0, r4
 80014c0:	601d      	str	r5, [r3, #0]
  return status;
 80014c2:	e7e5      	b.n	8001490 <HAL_InitTick+0xc>
 80014c4:	20000004 	.word	0x20000004
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000008 	.word	0x20000008

080014d0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_Init+0x28>)
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80014d8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014da:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	f000 f81f 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff ffce 	bl	8001484 <HAL_InitTick>
 80014e8:	4604      	mov	r4, r0
 80014ea:	b918      	cbnz	r0, 80014f4 <HAL_Init+0x24>
    HAL_MspInit();
 80014ec:	f7ff fee8 	bl	80012c0 <HAL_MspInit>
}
 80014f0:	4620      	mov	r0, r4
 80014f2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80014f4:	2401      	movs	r4, #1
 80014f6:	e7fb      	b.n	80014f0 <HAL_Init+0x20>
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <HAL_IncTick+0x10>)
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_IncTick+0x14>)
 8001500:	6811      	ldr	r1, [r2, #0]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	440b      	add	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000ef0 	.word	0x20000ef0
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <HAL_GetTick+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000ef0 	.word	0x20000ef0

08001520 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001522:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001524:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800152c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001530:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800153c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001546:	b530      	push	{r4, r5, lr}
 8001548:	68dc      	ldr	r4, [r3, #12]
 800154a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	2d04      	cmp	r5, #4
 8001556:	bf28      	it	cs
 8001558:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001560:	bf8c      	ite	hi
 8001562:	3c03      	subhi	r4, #3
 8001564:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001566:	fa03 f505 	lsl.w	r5, r3, r5
 800156a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156e:	40a3      	lsls	r3, r4
 8001570:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001576:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	bfac      	ite	ge
 800157e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	4a08      	ldrlt	r2, [pc, #32]	; (80015a4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	bfb8      	it	lt
 800158a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	b2db      	uxtb	r3, r3
 8001590:	bfaa      	itet	ge
 8001592:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800159c:	bd30      	pop	{r4, r5, pc}
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	e000ed14 	.word	0xe000ed14

080015a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015a8:	2800      	cmp	r0, #0
 80015aa:	db08      	blt.n	80015be <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ac:	2301      	movs	r3, #1
 80015ae:	0942      	lsrs	r2, r0, #5
 80015b0:	f000 001f 	and.w	r0, r0, #31
 80015b4:	fa03 f000 	lsl.w	r0, r3, r0
 80015b8:	4b01      	ldr	r3, [pc, #4]	; (80015c0 <HAL_NVIC_EnableIRQ+0x18>)
 80015ba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	3801      	subs	r0, #1
 80015c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015ca:	d20b      	bcs.n	80015e4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	21f0      	movs	r1, #240	; 0xf0
 80015d6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015da:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015dc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015de:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015e4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015ec:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015ee:	4604      	mov	r4, r0
 80015f0:	b908      	cbnz	r0, 80015f6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80015f2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80015f4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015f6:	7f43      	ldrb	r3, [r0, #29]
 80015f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015fc:	b913      	cbnz	r3, 8001604 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80015fe:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001600:	f7ff fcee 	bl	8000fe0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001604:	2302      	movs	r3, #2
 8001606:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001608:	7923      	ldrb	r3, [r4, #4]
 800160a:	b9e3      	cbnz	r3, 8001646 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_CRC_Init+0x70>)
 8001610:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	f022 0218 	bic.w	r2, r2, #24
 8001618:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800161a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800161c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800161e:	b9d2      	cbnz	r2, 8001656 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001624:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	6961      	ldr	r1, [r4, #20]
 800162a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800162e:	430a      	orrs	r2, r1
 8001630:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69a1      	ldr	r1, [r4, #24]
 8001636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800163e:	2301      	movs	r3, #1
 8001640:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001642:	2000      	movs	r0, #0
 8001644:	e7d6      	b.n	80015f4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001646:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800164a:	4620      	mov	r0, r4
 800164c:	f000 f808 	bl	8001660 <HAL_CRCEx_Polynomial_Set>
 8001650:	2800      	cmp	r0, #0
 8001652:	d0e2      	beq.n	800161a <HAL_CRC_Init+0x2e>
 8001654:	e7cd      	b.n	80015f2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001656:	6922      	ldr	r2, [r4, #16]
 8001658:	e7e4      	b.n	8001624 <HAL_CRC_Init+0x38>
 800165a:	bf00      	nop
 800165c:	04c11db7 	.word	0x04c11db7

08001660 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001660:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001662:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001664:	3b01      	subs	r3, #1
 8001666:	d31c      	bcc.n	80016a2 <HAL_CRCEx_Polynomial_Set+0x42>
 8001668:	fa21 f403 	lsr.w	r4, r1, r3
 800166c:	07e4      	lsls	r4, r4, #31
 800166e:	d5f9      	bpl.n	8001664 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001670:	2a10      	cmp	r2, #16
 8001672:	d012      	beq.n	800169a <HAL_CRCEx_Polynomial_Set+0x3a>
 8001674:	d804      	bhi.n	8001680 <HAL_CRCEx_Polynomial_Set+0x20>
 8001676:	b13a      	cbz	r2, 8001688 <HAL_CRCEx_Polynomial_Set+0x28>
 8001678:	2a08      	cmp	r2, #8
 800167a:	d010      	beq.n	800169e <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 800167c:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800167e:	e00b      	b.n	8001698 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8001680:	2a18      	cmp	r2, #24
 8001682:	d1fb      	bne.n	800167c <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001684:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001686:	d8f9      	bhi.n	800167c <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001688:	6800      	ldr	r0, [r0, #0]
 800168a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800168c:	6883      	ldr	r3, [r0, #8]
 800168e:	f023 0318 	bic.w	r3, r3, #24
 8001692:	431a      	orrs	r2, r3
 8001694:	6082      	str	r2, [r0, #8]
 8001696:	2000      	movs	r0, #0
}
 8001698:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800169a:	2b07      	cmp	r3, #7
 800169c:	e7f3      	b.n	8001686 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	e7f1      	b.n	8001686 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80016a2:	2a00      	cmp	r2, #0
 80016a4:	d1ea      	bne.n	800167c <HAL_CRCEx_Polynomial_Set+0x1c>
 80016a6:	e7ef      	b.n	8001688 <HAL_CRCEx_Polynomial_Set+0x28>

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001860 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016b0:	4d69      	ldr	r5, [pc, #420]	; (8001858 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b4:	680a      	ldr	r2, [r1, #0]
 80016b6:	fa32 f403 	lsrs.w	r4, r2, r3
 80016ba:	d102      	bne.n	80016c2 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80016bc:	b003      	add	sp, #12
 80016be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c2:	f04f 0a01 	mov.w	sl, #1
 80016c6:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 80016ca:	ea1a 0202 	ands.w	r2, sl, r2
 80016ce:	f000 80b4 	beq.w	800183a <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d2:	684c      	ldr	r4, [r1, #4]
 80016d4:	f024 0e10 	bic.w	lr, r4, #16
 80016d8:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016dc:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016de:	f10e 37ff 	add.w	r7, lr, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e2:	fa06 f608 	lsl.w	r6, r6, r8
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e8:	ea6f 0606 	mvn.w	r6, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ec:	d811      	bhi.n	8001712 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 80016ee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f0:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f4:	68cf      	ldr	r7, [r1, #12]
 80016f6:	fa07 f708 	lsl.w	r7, r7, r8
 80016fa:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 80016fe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001700:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001702:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001706:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800170a:	409f      	lsls	r7, r3
 800170c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001710:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001712:	f004 0c03 	and.w	ip, r4, #3
 8001716:	f1bc 0f03 	cmp.w	ip, #3
 800171a:	d108      	bne.n	800172e <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 800171c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800171e:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001722:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8001726:	409f      	lsls	r7, r3
 8001728:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 800172c:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800172e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001730:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001734:	688f      	ldr	r7, [r1, #8]
 8001736:	fa07 f708 	lsl.w	r7, r7, r8
 800173a:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800173e:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8001742:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001744:	d116      	bne.n	8001774 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 8001746:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800174a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800174e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001752:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001756:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800175a:	f04f 0e0f 	mov.w	lr, #15
 800175e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001762:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001766:	690f      	ldr	r7, [r1, #16]
 8001768:	fa07 f70b 	lsl.w	r7, r7, fp
 800176c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001770:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001774:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001776:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800177a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800177c:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8001780:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001782:	00e6      	lsls	r6, r4, #3
 8001784:	d559      	bpl.n	800183a <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800178a:	f046 0601 	orr.w	r6, r6, #1
 800178e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001792:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001796:	f023 0703 	bic.w	r7, r3, #3
 800179a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800179e:	f006 0601 	and.w	r6, r6, #1
 80017a2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80017a6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ac:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80017ae:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80017b4:	f04f 0c0f 	mov.w	ip, #15
 80017b8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017bc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c0:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017c4:	d03b      	beq.n	800183e <HAL_GPIO_Init+0x196>
 80017c6:	4e25      	ldr	r6, [pc, #148]	; (800185c <HAL_GPIO_Init+0x1b4>)
 80017c8:	42b0      	cmp	r0, r6
 80017ca:	d03a      	beq.n	8001842 <HAL_GPIO_Init+0x19a>
 80017cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017d0:	42b0      	cmp	r0, r6
 80017d2:	d038      	beq.n	8001846 <HAL_GPIO_Init+0x19e>
 80017d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017d8:	42b0      	cmp	r0, r6
 80017da:	d036      	beq.n	800184a <HAL_GPIO_Init+0x1a2>
 80017dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017e0:	42b0      	cmp	r0, r6
 80017e2:	d034      	beq.n	800184e <HAL_GPIO_Init+0x1a6>
 80017e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017e8:	42b0      	cmp	r0, r6
 80017ea:	d032      	beq.n	8001852 <HAL_GPIO_Init+0x1aa>
 80017ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017f0:	42b0      	cmp	r0, r6
 80017f2:	bf0c      	ite	eq
 80017f4:	2606      	moveq	r6, #6
 80017f6:	2607      	movne	r6, #7
 80017f8:	fa06 f60e 	lsl.w	r6, r6, lr
 80017fc:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001800:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001802:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8001804:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001806:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800180a:	bf0c      	ite	eq
 800180c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800180e:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8001810:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8001812:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001814:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001818:	bf0c      	ite	eq
 800181a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800181c:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800181e:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8001820:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001822:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001826:	bf0c      	ite	eq
 8001828:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800182a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800182c:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 800182e:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001830:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001832:	bf54      	ite	pl
 8001834:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001836:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8001838:	60ee      	str	r6, [r5, #12]
    position++;
 800183a:	3301      	adds	r3, #1
 800183c:	e73a      	b.n	80016b4 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800183e:	2600      	movs	r6, #0
 8001840:	e7da      	b.n	80017f8 <HAL_GPIO_Init+0x150>
 8001842:	2601      	movs	r6, #1
 8001844:	e7d8      	b.n	80017f8 <HAL_GPIO_Init+0x150>
 8001846:	2602      	movs	r6, #2
 8001848:	e7d6      	b.n	80017f8 <HAL_GPIO_Init+0x150>
 800184a:	2603      	movs	r6, #3
 800184c:	e7d4      	b.n	80017f8 <HAL_GPIO_Init+0x150>
 800184e:	2604      	movs	r6, #4
 8001850:	e7d2      	b.n	80017f8 <HAL_GPIO_Init+0x150>
 8001852:	2605      	movs	r6, #5
 8001854:	e7d0      	b.n	80017f8 <HAL_GPIO_Init+0x150>
 8001856:	bf00      	nop
 8001858:	40010400 	.word	0x40010400
 800185c:	48000400 	.word	0x48000400
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	b10a      	cbz	r2, 800186a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001866:	6181      	str	r1, [r0, #24]
 8001868:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800186c:	4770      	bx	lr
	...

08001870 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001872:	6951      	ldr	r1, [r2, #20]
 8001874:	4201      	tst	r1, r0
{
 8001876:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001878:	d002      	beq.n	8001880 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800187a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800187c:	f7ff fb90 	bl	8000fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001880:	bd08      	pop	{r3, pc}
 8001882:	bf00      	nop
 8001884:	40010400 	.word	0x40010400

08001888 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001888:	6803      	ldr	r3, [r0, #0]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800188e:	bf44      	itt	mi
 8001890:	2200      	movmi	r2, #0
 8001892:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001894:	699a      	ldr	r2, [r3, #24]
 8001896:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001898:	bf5e      	ittt	pl
 800189a:	699a      	ldrpl	r2, [r3, #24]
 800189c:	f042 0201 	orrpl.w	r2, r2, #1
 80018a0:	619a      	strpl	r2, [r3, #24]
  }
}
 80018a2:	4770      	bx	lr

080018a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018a4:	b530      	push	{r4, r5, lr}
 80018a6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80018a8:	6804      	ldr	r4, [r0, #0]
 80018aa:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <I2C_TransferConfig+0x24>)
 80018b2:	6860      	ldr	r0, [r4, #4]
 80018b4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80018b8:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80018bc:	430a      	orrs	r2, r1
 80018be:	ea20 0003 	bic.w	r0, r0, r3
 80018c2:	4302      	orrs	r2, r0
 80018c4:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80018c6:	bd30      	pop	{r4, r5, pc}
 80018c8:	03ff63ff 	.word	0x03ff63ff

080018cc <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018cc:	6803      	ldr	r3, [r0, #0]
{
 80018ce:	b570      	push	{r4, r5, r6, lr}
 80018d0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018d2:	6998      	ldr	r0, [r3, #24]
 80018d4:	f010 0010 	ands.w	r0, r0, #16
{
 80018d8:	460d      	mov	r5, r1
 80018da:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018dc:	d116      	bne.n	800190c <I2C_IsAcknowledgeFailed+0x40>
}
 80018de:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80018e0:	1c69      	adds	r1, r5, #1
 80018e2:	d014      	beq.n	800190e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018e4:	f7ff fe16 	bl	8001514 <HAL_GetTick>
 80018e8:	1b80      	subs	r0, r0, r6
 80018ea:	4285      	cmp	r5, r0
 80018ec:	d300      	bcc.n	80018f0 <I2C_IsAcknowledgeFailed+0x24>
 80018ee:	b96d      	cbnz	r5, 800190c <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018f2:	f043 0320 	orr.w	r3, r3, #32
 80018f6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	2320      	movs	r3, #32
 80018fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fe:	2300      	movs	r3, #0
 8001900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001904:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001908:	2001      	movs	r0, #1
 800190a:	e7e8      	b.n	80018de <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	0692      	lsls	r2, r2, #26
 8001912:	d5e5      	bpl.n	80018e0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001914:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001916:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001918:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800191a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800191c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800191e:	f7ff ffb3 	bl	8001888 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001922:	6822      	ldr	r2, [r4, #0]
 8001924:	6853      	ldr	r3, [r2, #4]
 8001926:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800192a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800192e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001938:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001942:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001946:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800194e:	e7db      	b.n	8001908 <I2C_IsAcknowledgeFailed+0x3c>

08001950 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4604      	mov	r4, r0
 8001954:	460d      	mov	r5, r1
 8001956:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	079b      	lsls	r3, r3, #30
 800195e:	d501      	bpl.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001960:	2000      	movs	r0, #0
}
 8001962:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001964:	4632      	mov	r2, r6
 8001966:	4629      	mov	r1, r5
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff ffaf 	bl	80018cc <I2C_IsAcknowledgeFailed>
 800196e:	b9a0      	cbnz	r0, 800199a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001970:	1c6a      	adds	r2, r5, #1
 8001972:	d0f1      	beq.n	8001958 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001974:	f7ff fdce 	bl	8001514 <HAL_GetTick>
 8001978:	1b80      	subs	r0, r0, r6
 800197a:	42a8      	cmp	r0, r5
 800197c:	d801      	bhi.n	8001982 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800197e:	2d00      	cmp	r5, #0
 8001980:	d1ea      	bne.n	8001958 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001982:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001984:	f043 0320 	orr.w	r3, r3, #32
 8001988:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800198a:	2320      	movs	r3, #32
 800198c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001990:	2300      	movs	r3, #0
 8001992:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001996:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800199a:	2001      	movs	r0, #1
 800199c:	e7e1      	b.n	8001962 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800199e <I2C_WaitOnFlagUntilTimeout>:
{
 800199e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a2:	9f06      	ldr	r7, [sp, #24]
 80019a4:	4604      	mov	r4, r0
 80019a6:	4688      	mov	r8, r1
 80019a8:	4616      	mov	r6, r2
 80019aa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ac:	6822      	ldr	r2, [r4, #0]
 80019ae:	6993      	ldr	r3, [r2, #24]
 80019b0:	ea38 0303 	bics.w	r3, r8, r3
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	42b3      	cmp	r3, r6
 80019bc:	d001      	beq.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80019be:	2000      	movs	r0, #0
 80019c0:	e015      	b.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80019c2:	1c6b      	adds	r3, r5, #1
 80019c4:	d0f3      	beq.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c6:	f7ff fda5 	bl	8001514 <HAL_GetTick>
 80019ca:	1bc0      	subs	r0, r0, r7
 80019cc:	42a8      	cmp	r0, r5
 80019ce:	d801      	bhi.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0x36>
 80019d0:	2d00      	cmp	r5, #0
 80019d2:	d1eb      	bne.n	80019ac <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	2320      	movs	r3, #32
 80019de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80019e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80019ec:	2001      	movs	r0, #1
}
 80019ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080019f4 <I2C_RequestMemoryRead>:
{
 80019f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80019f8:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 80019fc:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <I2C_RequestMemoryRead+0x68>)
 8001a00:	9300      	str	r3, [sp, #0]
{
 8001a02:	4605      	mov	r5, r0
 8001a04:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a06:	2300      	movs	r3, #0
 8001a08:	b2f2      	uxtb	r2, r6
 8001a0a:	f7ff ff4b 	bl	80018a4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4639      	mov	r1, r7
 8001a12:	4628      	mov	r0, r5
 8001a14:	f7ff ff9c 	bl	8001950 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a18:	b118      	cbz	r0, 8001a22 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
}
 8001a1c:	b002      	add	sp, #8
 8001a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a22:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a24:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a26:	d10d      	bne.n	8001a44 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a28:	b2e4      	uxtb	r4, r4
 8001a2a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f8cd 8000 	str.w	r8, [sp]
 8001a32:	463b      	mov	r3, r7
 8001a34:	2140      	movs	r1, #64	; 0x40
 8001a36:	4628      	mov	r0, r5
 8001a38:	f7ff ffb1 	bl	800199e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001a3c:	3800      	subs	r0, #0
 8001a3e:	bf18      	it	ne
 8001a40:	2001      	movne	r0, #1
 8001a42:	e7eb      	b.n	8001a1c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a44:	0a22      	lsrs	r2, r4, #8
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a48:	4639      	mov	r1, r7
 8001a4a:	4642      	mov	r2, r8
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f7ff ff7f 	bl	8001950 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d1e1      	bne.n	8001a1a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	e7e6      	b.n	8001a28 <I2C_RequestMemoryRead+0x34>
 8001a5a:	bf00      	nop
 8001a5c:	80002000 	.word	0x80002000

08001a60 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001a60:	b570      	push	{r4, r5, r6, lr}
 8001a62:	4604      	mov	r4, r0
 8001a64:	460d      	mov	r5, r1
 8001a66:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	069b      	lsls	r3, r3, #26
 8001a6e:	d501      	bpl.n	8001a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001a70:	2000      	movs	r0, #0
}
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a74:	4632      	mov	r2, r6
 8001a76:	4629      	mov	r1, r5
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff ff27 	bl	80018cc <I2C_IsAcknowledgeFailed>
 8001a7e:	b990      	cbnz	r0, 8001aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a80:	f7ff fd48 	bl	8001514 <HAL_GetTick>
 8001a84:	1b80      	subs	r0, r0, r6
 8001a86:	42a8      	cmp	r0, r5
 8001a88:	d801      	bhi.n	8001a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001a8a:	2d00      	cmp	r5, #0
 8001a8c:	d1ec      	bne.n	8001a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a90:	f043 0320 	orr.w	r3, r3, #32
 8001a94:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	2320      	movs	r3, #32
 8001a98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001aa2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	e7e3      	b.n	8001a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08001aaa <HAL_I2C_Init>:
{
 8001aaa:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001aac:	4604      	mov	r4, r0
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d04a      	beq.n	8001b48 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ab6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001aba:	b91b      	cbnz	r3, 8001ac4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001abc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001ac0:	f7ff fb28 	bl	8001114 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac4:	2324      	movs	r3, #36	; 0x24
 8001ac6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ad4:	6862      	ldr	r2, [r4, #4]
 8001ad6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ada:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ae4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae8:	2901      	cmp	r1, #1
 8001aea:	d124      	bne.n	8001b36 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001afc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b04:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b06:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	69a1      	ldr	r1, [r4, #24]
 8001b0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b12:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b14:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b28:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b2e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001b34:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b3a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b3c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b3e:	bf04      	itt	eq
 8001b40:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001b44:	605a      	streq	r2, [r3, #4]
 8001b46:	e7d4      	b.n	8001af2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
 8001b4a:	e7f3      	b.n	8001b34 <HAL_I2C_Init+0x8a>

08001b4c <HAL_I2C_Mem_Read>:
{
 8001b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b50:	b085      	sub	sp, #20
 8001b52:	469b      	mov	fp, r3
 8001b54:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001b58:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001b5e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	2b20      	cmp	r3, #32
{
 8001b64:	4604      	mov	r4, r0
 8001b66:	460f      	mov	r7, r1
 8001b68:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6a:	f040 80a7 	bne.w	8001cbc <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8001b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b70:	b10b      	cbz	r3, 8001b76 <HAL_I2C_Mem_Read+0x2a>
 8001b72:	9b03      	ldr	r3, [sp, #12]
 8001b74:	b933      	cbnz	r3, 8001b84 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b7a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
}
 8001b7e:	b005      	add	sp, #20
 8001b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001b84:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	f000 8097 	beq.w	8001cbc <HAL_I2C_Mem_Read+0x170>
 8001b8e:	2501      	movs	r5, #1
 8001b90:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001b94:	f7ff fcbe 	bl	8001514 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b98:	2319      	movs	r3, #25
 8001b9a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001b9c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b9e:	462a      	mov	r2, r5
 8001ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff fefa 	bl	800199e <I2C_WaitOnFlagUntilTimeout>
 8001baa:	4680      	mov	r8, r0
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d1e5      	bne.n	8001b7c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bb0:	2322      	movs	r3, #34	; 0x22
 8001bb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb6:	2340      	movs	r3, #64	; 0x40
 8001bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bbe:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bc0:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8001bc4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001bc6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bc8:	e9cd 9600 	strd	r9, r6, [sp]
 8001bcc:	465b      	mov	r3, fp
 8001bce:	4652      	mov	r2, sl
 8001bd0:	4639      	mov	r1, r7
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff ff0e 	bl	80019f4 <I2C_RequestMemoryRead>
 8001bd8:	b110      	cbz	r0, 8001be0 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8001bda:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001bde:	e7cd      	b.n	8001b7c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001be0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2bff      	cmp	r3, #255	; 0xff
 8001be6:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_I2C_Mem_Read+0x174>)
 8001be8:	d958      	bls.n	8001c9c <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bea:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001bec:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001bf4:	4639      	mov	r1, r7
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff fe54 	bl	80018a4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001bfc:	9600      	str	r6, [sp, #0]
 8001bfe:	464b      	mov	r3, r9
 8001c00:	2200      	movs	r2, #0
 8001c02:	2104      	movs	r1, #4
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff feca 	bl	800199e <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d1b6      	bne.n	8001b7c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c14:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001c18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c28:	3a01      	subs	r2, #1
 8001c2a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c2c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001c2e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c30:	b1ab      	cbz	r3, 8001c5e <HAL_I2C_Mem_Read+0x112>
 8001c32:	b9a2      	cbnz	r2, 8001c5e <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c34:	9600      	str	r6, [sp, #0]
 8001c36:	464b      	mov	r3, r9
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff feaf 	bl	800199e <I2C_WaitOnFlagUntilTimeout>
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d19b      	bne.n	8001b7c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2bff      	cmp	r3, #255	; 0xff
 8001c4a:	d92f      	bls.n	8001cac <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c4c:	22ff      	movs	r2, #255	; 0xff
 8001c4e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c50:	9000      	str	r0, [sp, #0]
 8001c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c56:	4639      	mov	r1, r7
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f7ff fe23 	bl	80018a4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001c5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ca      	bne.n	8001bfc <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c66:	4632      	mov	r2, r6
 8001c68:	4649      	mov	r1, r9
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff fef8 	bl	8001a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d183      	bne.n	8001b7c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	2120      	movs	r1, #32
 8001c78:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001c80:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001c84:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001c92:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c96:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001c9a:	e770      	b.n	8001b7e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001c9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c9e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	e7a3      	b.n	8001bf4 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8001cac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cae:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	e7cc      	b.n	8001c56 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	e75e      	b.n	8001b7e <HAL_I2C_Mem_Read+0x32>
 8001cc0:	80002400 	.word	0x80002400

08001cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cc4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	b2dc      	uxtb	r4, r3
 8001cce:	d11d      	bne.n	8001d0c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d019      	beq.n	8001d0c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd8:	2324      	movs	r3, #36	; 0x24
 8001cda:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cde:	6803      	ldr	r3, [r0, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfe:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001d08:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001d0a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	e7fc      	b.n	8001d0a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001d10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d10:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	b2dc      	uxtb	r4, r3
 8001d1a:	d11c      	bne.n	8001d56 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d018      	beq.n	8001d56 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d24:	2324      	movs	r3, #36	; 0x24
 8001d26:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d2a:	6803      	ldr	r3, [r0, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d34:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d36:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d3a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d3e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d48:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001d52:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001d54:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001d56:	2002      	movs	r0, #2
 8001d58:	e7fc      	b.n	8001d54 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08001d5c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <HAL_PWREx_GetVoltageRange+0xc>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001d60:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d6e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d78:	d11d      	bne.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7e:	d101      	bne.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d80:	2000      	movs	r0, #0
 8001d82:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2132      	movs	r1, #50	; 0x32
 8001d96:	434b      	muls	r3, r1
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da0:	6951      	ldr	r1, [r2, #20]
 8001da2:	0549      	lsls	r1, r1, #21
 8001da4:	d500      	bpl.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8001da6:	b923      	cbnz	r3, 8001db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da8:	6953      	ldr	r3, [r2, #20]
 8001daa:	055b      	lsls	r3, r3, #21
 8001dac:	d5e8      	bpl.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8001dae:	2003      	movs	r0, #3
}
 8001db0:	4770      	bx	lr
        wait_loop_index--;
 8001db2:	3b01      	subs	r3, #1
 8001db4:	e7f4      	b.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dba:	bf1f      	itttt	ne
 8001dbc:	6813      	ldrne	r3, [r2, #0]
 8001dbe:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8001dc2:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8001dc6:	6013      	strne	r3, [r2, #0]
 8001dc8:	e7da      	b.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x14>
 8001dca:	bf00      	nop
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	000f4240 	.word	0x000f4240

08001dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dda:	4d1e      	ldr	r5, [pc, #120]	; (8001e54 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001ddc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dde:	00da      	lsls	r2, r3, #3
{
 8001de0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001de2:	d518      	bpl.n	8001e16 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001de4:	f7ff ffba 	bl	8001d5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001dec:	d123      	bne.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dee:	2c80      	cmp	r4, #128	; 0x80
 8001df0:	d929      	bls.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df2:	2ca0      	cmp	r4, #160	; 0xa0
 8001df4:	bf8c      	ite	hi
 8001df6:	2002      	movhi	r0, #2
 8001df8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f023 0307 	bic.w	r3, r3, #7
 8001e02:	4303      	orrs	r3, r0
 8001e04:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e06:	6813      	ldr	r3, [r2, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001e0c:	1a18      	subs	r0, r3, r0
 8001e0e:	bf18      	it	ne
 8001e10:	2001      	movne	r0, #1
 8001e12:	b003      	add	sp, #12
 8001e14:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e1e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001e28:	f7ff ff98 	bl	8001d5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e32:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e34:	e7d8      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001e36:	2c80      	cmp	r4, #128	; 0x80
 8001e38:	d807      	bhi.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001e3a:	d008      	beq.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001e3c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001e40:	4258      	negs	r0, r3
 8001e42:	4158      	adcs	r0, r3
 8001e44:	e7d9      	b.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e46:	2000      	movs	r0, #0
 8001e48:	e7d7      	b.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	e7d5      	b.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e4e:	2002      	movs	r0, #2
 8001e50:	e7d3      	b.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40022000 	.word	0x40022000

08001e5c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5c:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001e5e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e60:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e62:	f012 020c 	ands.w	r2, r2, #12
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x18>
 8001e68:	2a0c      	cmp	r2, #12
 8001e6a:	d115      	bne.n	8001e98 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e6c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e70:	2901      	cmp	r1, #1
 8001e72:	d118      	bne.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e74:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001e76:	481d      	ldr	r0, [pc, #116]	; (8001eec <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e78:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e7a:	bf55      	itete	pl
 8001e7c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e80:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e82:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e86:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001e8a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e8e:	b34a      	cbz	r2, 8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e90:	2a0c      	cmp	r2, #12
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x4c>
 8001e94:	2000      	movs	r0, #0
  return sysclockfreq;
 8001e96:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e98:	2a04      	cmp	r2, #4
 8001e9a:	d022      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e9c:	2a08      	cmp	r2, #8
 8001e9e:	4814      	ldr	r0, [pc, #80]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ea0:	bf18      	it	ne
 8001ea2:	2000      	movne	r0, #0
 8001ea4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ea6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001eae:	2a02      	cmp	r2, #2
 8001eb0:	d015      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x82>
 8001eb2:	490f      	ldr	r1, [pc, #60]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb4:	2a03      	cmp	r2, #3
 8001eb6:	bf08      	it	eq
 8001eb8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eba:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001ec2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ec4:	68d8      	ldr	r0, [r3, #12]
 8001ec6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eca:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ece:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ed2:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ed4:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001ed8:	fbb2 f0f0 	udiv	r0, r2, r0
 8001edc:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee0:	e7eb      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08007ed8 	.word	0x08007ed8
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	00f42400 	.word	0x00f42400

08001ef8 <HAL_RCC_OscConfig>:
{
 8001ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001efc:	4605      	mov	r5, r0
 8001efe:	b918      	cbnz	r0, 8001f08 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001f00:	2001      	movs	r0, #1
}
 8001f02:	b003      	add	sp, #12
 8001f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f08:	4c92      	ldr	r4, [pc, #584]	; (8002154 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f0a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f10:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f12:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f16:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f1a:	d53d      	bpl.n	8001f98 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f1c:	b11e      	cbz	r6, 8001f26 <HAL_RCC_OscConfig+0x2e>
 8001f1e:	2e0c      	cmp	r6, #12
 8001f20:	d166      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f22:	2f01      	cmp	r7, #1
 8001f24:	d164      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	0799      	lsls	r1, r3, #30
 8001f2a:	d502      	bpl.n	8001f32 <HAL_RCC_OscConfig+0x3a>
 8001f2c:	69ab      	ldr	r3, [r5, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0e6      	beq.n	8001f00 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	6a28      	ldr	r0, [r5, #32]
 8001f36:	071a      	lsls	r2, r3, #28
 8001f38:	bf56      	itet	pl
 8001f3a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001f3e:	6823      	ldrmi	r3, [r4, #0]
 8001f40:	091b      	lsrpl	r3, r3, #4
 8001f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f46:	4298      	cmp	r0, r3
 8001f48:	d93b      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f4a:	f7ff ff45 	bl	8001dd8 <RCC_SetFlashLatencyFromMSIRange>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d1d6      	bne.n	8001f00 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6023      	str	r3, [r4, #0]
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	6a2a      	ldr	r2, [r5, #32]
 8001f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f62:	4313      	orrs	r3, r2
 8001f64:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f66:	6863      	ldr	r3, [r4, #4]
 8001f68:	69ea      	ldr	r2, [r5, #28]
 8001f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f72:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f74:	f7ff ff72 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001f78:	68a3      	ldr	r3, [r4, #8]
 8001f7a:	4a77      	ldr	r2, [pc, #476]	; (8002158 <HAL_RCC_OscConfig+0x260>)
 8001f7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	40d8      	lsrs	r0, r3
 8001f88:	4b74      	ldr	r3, [pc, #464]	; (800215c <HAL_RCC_OscConfig+0x264>)
 8001f8a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001f8c:	4b74      	ldr	r3, [pc, #464]	; (8002160 <HAL_RCC_OscConfig+0x268>)
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	f7ff fa78 	bl	8001484 <HAL_InitTick>
        if(status != HAL_OK)
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d1b4      	bne.n	8001f02 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	07d9      	lsls	r1, r3, #31
 8001f9c:	d45f      	bmi.n	800205e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	079a      	lsls	r2, r3, #30
 8001fa2:	f100 809e 	bmi.w	80020e2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	682b      	ldr	r3, [r5, #0]
 8001fa8:	0719      	lsls	r1, r3, #28
 8001faa:	f100 80db 	bmi.w	8002164 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fae:	682b      	ldr	r3, [r5, #0]
 8001fb0:	075a      	lsls	r2, r3, #29
 8001fb2:	f100 8101 	bmi.w	80021b8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 816a 	bne.w	8002292 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e79f      	b.n	8001f02 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd0:	4303      	orrs	r3, r0
 8001fd2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd4:	6863      	ldr	r3, [r4, #4]
 8001fd6:	69ea      	ldr	r2, [r5, #28]
 8001fd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fe0:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe2:	2e00      	cmp	r6, #0
 8001fe4:	d1c6      	bne.n	8001f74 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe6:	f7ff fef7 	bl	8001dd8 <RCC_SetFlashLatencyFromMSIRange>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d0c2      	beq.n	8001f74 <HAL_RCC_OscConfig+0x7c>
 8001fee:	e787      	b.n	8001f00 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ff0:	69ab      	ldr	r3, [r5, #24]
 8001ff2:	b31b      	cbz	r3, 800203c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fa8a 	bl	8001514 <HAL_GetTick>
 8002000:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	079b      	lsls	r3, r3, #30
 8002006:	d511      	bpl.n	800202c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	6023      	str	r3, [r4, #0]
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	6a2a      	ldr	r2, [r5, #32]
 8002014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002018:	4313      	orrs	r3, r2
 800201a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201c:	6863      	ldr	r3, [r4, #4]
 800201e:	69ea      	ldr	r2, [r5, #28]
 8002020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002024:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002028:	6063      	str	r3, [r4, #4]
 800202a:	e7b5      	b.n	8001f98 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800202c:	f7ff fa72 	bl	8001514 <HAL_GetTick>
 8002030:	eba0 0008 	sub.w	r0, r0, r8
 8002034:	2802      	cmp	r0, #2
 8002036:	d9e4      	bls.n	8002002 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002038:	2003      	movs	r0, #3
 800203a:	e762      	b.n	8001f02 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002044:	f7ff fa66 	bl	8001514 <HAL_GetTick>
 8002048:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	0798      	lsls	r0, r3, #30
 800204e:	d5a3      	bpl.n	8001f98 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002050:	f7ff fa60 	bl	8001514 <HAL_GetTick>
 8002054:	eba0 0008 	sub.w	r0, r0, r8
 8002058:	2802      	cmp	r0, #2
 800205a:	d9f6      	bls.n	800204a <HAL_RCC_OscConfig+0x152>
 800205c:	e7ec      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800205e:	2e08      	cmp	r6, #8
 8002060:	d003      	beq.n	800206a <HAL_RCC_OscConfig+0x172>
 8002062:	2e0c      	cmp	r6, #12
 8002064:	d108      	bne.n	8002078 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002066:	2f03      	cmp	r7, #3
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	039b      	lsls	r3, r3, #14
 800206e:	d596      	bpl.n	8001f9e <HAL_RCC_OscConfig+0xa6>
 8002070:	686b      	ldr	r3, [r5, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d193      	bne.n	8001f9e <HAL_RCC_OscConfig+0xa6>
 8002076:	e743      	b.n	8001f00 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	686b      	ldr	r3, [r5, #4]
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207e:	d110      	bne.n	80020a2 <HAL_RCC_OscConfig+0x1aa>
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002086:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002088:	f7ff fa44 	bl	8001514 <HAL_GetTick>
 800208c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	0398      	lsls	r0, r3, #14
 8002092:	d484      	bmi.n	8001f9e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fa3e 	bl	8001514 <HAL_GetTick>
 8002098:	eba0 0008 	sub.w	r0, r0, r8
 800209c:	2864      	cmp	r0, #100	; 0x64
 800209e:	d9f6      	bls.n	800208e <HAL_RCC_OscConfig+0x196>
 80020a0:	e7ca      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a6:	d104      	bne.n	80020b2 <HAL_RCC_OscConfig+0x1ba>
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ae:	6023      	str	r3, [r4, #0]
 80020b0:	e7e6      	b.n	8002080 <HAL_RCC_OscConfig+0x188>
 80020b2:	6822      	ldr	r2, [r4, #0]
 80020b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020b8:	6022      	str	r2, [r4, #0]
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1e0      	bne.n	8002088 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80020c6:	f7ff fa25 	bl	8001514 <HAL_GetTick>
 80020ca:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	0399      	lsls	r1, r3, #14
 80020d0:	f57f af65 	bpl.w	8001f9e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fa1e 	bl	8001514 <HAL_GetTick>
 80020d8:	eba0 0008 	sub.w	r0, r0, r8
 80020dc:	2864      	cmp	r0, #100	; 0x64
 80020de:	d9f5      	bls.n	80020cc <HAL_RCC_OscConfig+0x1d4>
 80020e0:	e7aa      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020e2:	2e04      	cmp	r6, #4
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_OscConfig+0x1f6>
 80020e6:	2e0c      	cmp	r6, #12
 80020e8:	d110      	bne.n	800210c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ea:	2f02      	cmp	r7, #2
 80020ec:	d10e      	bne.n	800210c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	055a      	lsls	r2, r3, #21
 80020f2:	d503      	bpl.n	80020fc <HAL_RCC_OscConfig+0x204>
 80020f4:	68eb      	ldr	r3, [r5, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f43f af02 	beq.w	8001f00 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	6863      	ldr	r3, [r4, #4]
 80020fe:	692a      	ldr	r2, [r5, #16]
 8002100:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002104:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002108:	6063      	str	r3, [r4, #4]
 800210a:	e74c      	b.n	8001fa6 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800210c:	68eb      	ldr	r3, [r5, #12]
 800210e:	b17b      	cbz	r3, 8002130 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002118:	f7ff f9fc 	bl	8001514 <HAL_GetTick>
 800211c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	055b      	lsls	r3, r3, #21
 8002122:	d4eb      	bmi.n	80020fc <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7ff f9f6 	bl	8001514 <HAL_GetTick>
 8002128:	1bc0      	subs	r0, r0, r7
 800212a:	2802      	cmp	r0, #2
 800212c:	d9f7      	bls.n	800211e <HAL_RCC_OscConfig+0x226>
 800212e:	e783      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002136:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002138:	f7ff f9ec 	bl	8001514 <HAL_GetTick>
 800213c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	0558      	lsls	r0, r3, #21
 8002142:	f57f af30 	bpl.w	8001fa6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7ff f9e5 	bl	8001514 <HAL_GetTick>
 800214a:	1bc0      	subs	r0, r0, r7
 800214c:	2802      	cmp	r0, #2
 800214e:	d9f6      	bls.n	800213e <HAL_RCC_OscConfig+0x246>
 8002150:	e772      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	08007ebe 	.word	0x08007ebe
 800215c:	20000000 	.word	0x20000000
 8002160:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002164:	696b      	ldr	r3, [r5, #20]
 8002166:	b19b      	cbz	r3, 8002190 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002168:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002174:	f7ff f9ce 	bl	8001514 <HAL_GetTick>
 8002178:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800217a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800217e:	079b      	lsls	r3, r3, #30
 8002180:	f53f af15 	bmi.w	8001fae <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff f9c6 	bl	8001514 <HAL_GetTick>
 8002188:	1bc0      	subs	r0, r0, r7
 800218a:	2802      	cmp	r0, #2
 800218c:	d9f5      	bls.n	800217a <HAL_RCC_OscConfig+0x282>
 800218e:	e753      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002190:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800219c:	f7ff f9ba 	bl	8001514 <HAL_GetTick>
 80021a0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021a6:	0798      	lsls	r0, r3, #30
 80021a8:	f57f af01 	bpl.w	8001fae <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7ff f9b2 	bl	8001514 <HAL_GetTick>
 80021b0:	1bc0      	subs	r0, r0, r7
 80021b2:	2802      	cmp	r0, #2
 80021b4:	d9f5      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2aa>
 80021b6:	e73f      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021ba:	00d9      	lsls	r1, r3, #3
 80021bc:	d429      	bmi.n	8002212 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80021c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021d0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	4f89      	ldr	r7, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0x504>)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	05da      	lsls	r2, r3, #23
 80021da:	d51d      	bpl.n	8002218 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	68ab      	ldr	r3, [r5, #8]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d12b      	bne.n	800223a <HAL_RCC_OscConfig+0x342>
 80021e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80021ee:	f7ff f991 	bl	8001514 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80021f6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80021fc:	0798      	lsls	r0, r3, #30
 80021fe:	d542      	bpl.n	8002286 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002200:	f1b8 0f00 	cmp.w	r8, #0
 8002204:	f43f aed7 	beq.w	8001fb6 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002210:	e6d1      	b.n	8001fb6 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002212:	f04f 0800 	mov.w	r8, #0
 8002216:	e7dd      	b.n	80021d4 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002220:	f7ff f978 	bl	8001514 <HAL_GetTick>
 8002224:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	05db      	lsls	r3, r3, #23
 800222a:	d4d7      	bmi.n	80021dc <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222c:	f7ff f972 	bl	8001514 <HAL_GetTick>
 8002230:	eba0 0009 	sub.w	r0, r0, r9
 8002234:	2802      	cmp	r0, #2
 8002236:	d9f6      	bls.n	8002226 <HAL_RCC_OscConfig+0x32e>
 8002238:	e6fe      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223a:	2b05      	cmp	r3, #5
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x354>
 800223e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800224a:	e7ca      	b.n	80021e2 <HAL_RCC_OscConfig+0x2ea>
 800224c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002258:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800225c:	f022 0204 	bic.w	r2, r2, #4
 8002260:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1c2      	bne.n	80021ee <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002268:	f7ff f954 	bl	8001514 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002270:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002272:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002276:	0799      	lsls	r1, r3, #30
 8002278:	d5c2      	bpl.n	8002200 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff f94b 	bl	8001514 <HAL_GetTick>
 800227e:	1bc0      	subs	r0, r0, r7
 8002280:	4548      	cmp	r0, r9
 8002282:	d9f6      	bls.n	8002272 <HAL_RCC_OscConfig+0x37a>
 8002284:	e6d8      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f945 	bl	8001514 <HAL_GetTick>
 800228a:	1bc0      	subs	r0, r0, r7
 800228c:	4548      	cmp	r0, r9
 800228e:	d9b3      	bls.n	80021f8 <HAL_RCC_OscConfig+0x300>
 8002290:	e6d2      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002292:	2b02      	cmp	r3, #2
 8002294:	f040 808f 	bne.w	80023b6 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002298:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800229c:	f003 0103 	and.w	r1, r3, #3
 80022a0:	4291      	cmp	r1, r2
 80022a2:	d124      	bne.n	80022ee <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80022a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022aa:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ac:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80022b0:	d11d      	bne.n	80022ee <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80022b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80022bc:	d117      	bne.n	80022ee <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022be:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80022c0:	3a07      	subs	r2, #7
 80022c2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80022c6:	bf18      	it	ne
 80022c8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ca:	4291      	cmp	r1, r2
 80022cc:	d10f      	bne.n	80022ee <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ce:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80022d0:	0852      	lsrs	r2, r2, #1
 80022d2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80022d6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022d8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022de:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80022e0:	0852      	lsrs	r2, r2, #1
 80022e2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80022e6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80022ec:	d04a      	beq.n	8002384 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ee:	2e0c      	cmp	r6, #12
 80022f0:	f43f ae06 	beq.w	8001f00 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	f53f ae02 	bmi.w	8001f00 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	f53f adfe 	bmi.w	8001f00 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800230c:	f7ff f902 	bl	8001514 <HAL_GetTick>
 8002310:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	019f      	lsls	r7, r3, #6
 8002316:	d42f      	bmi.n	8002378 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002318:	68e2      	ldr	r2, [r4, #12]
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_OscConfig+0x508>)
 800231c:	4013      	ands	r3, r2
 800231e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002320:	4313      	orrs	r3, r2
 8002322:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002324:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002328:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800232a:	3a01      	subs	r2, #1
 800232c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002330:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002332:	0912      	lsrs	r2, r2, #4
 8002334:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002338:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800233a:	0852      	lsrs	r2, r2, #1
 800233c:	3a01      	subs	r2, #1
 800233e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002342:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002344:	0852      	lsrs	r2, r2, #1
 8002346:	3a01      	subs	r2, #1
 8002348:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800234c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002354:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002356:	68e3      	ldr	r3, [r4, #12]
 8002358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800235e:	f7ff f8d9 	bl	8001514 <HAL_GetTick>
 8002362:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	0198      	lsls	r0, r3, #6
 8002368:	f53f ae29 	bmi.w	8001fbe <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff f8d2 	bl	8001514 <HAL_GetTick>
 8002370:	1b40      	subs	r0, r0, r5
 8002372:	2802      	cmp	r0, #2
 8002374:	d9f6      	bls.n	8002364 <HAL_RCC_OscConfig+0x46c>
 8002376:	e65f      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7ff f8cc 	bl	8001514 <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	2802      	cmp	r0, #2
 8002380:	d9c7      	bls.n	8002312 <HAL_RCC_OscConfig+0x41a>
 8002382:	e659      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	0199      	lsls	r1, r3, #6
 8002388:	f53f ae19 	bmi.w	8001fbe <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002392:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002394:	68e3      	ldr	r3, [r4, #12]
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239a:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800239c:	f7ff f8ba 	bl	8001514 <HAL_GetTick>
 80023a0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	019a      	lsls	r2, r3, #6
 80023a6:	f53f ae0a 	bmi.w	8001fbe <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7ff f8b3 	bl	8001514 <HAL_GetTick>
 80023ae:	1b40      	subs	r0, r0, r5
 80023b0:	2802      	cmp	r0, #2
 80023b2:	d9f6      	bls.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
 80023b4:	e640      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b6:	2e0c      	cmp	r6, #12
 80023b8:	f43f ada2 	beq.w	8001f00 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c2:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023ca:	bf02      	ittt	eq
 80023cc:	68e3      	ldreq	r3, [r4, #12]
 80023ce:	f023 0303 	biceq.w	r3, r3, #3
 80023d2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023d4:	68e3      	ldr	r3, [r4, #12]
 80023d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80023e0:	f7ff f898 	bl	8001514 <HAL_GetTick>
 80023e4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	f57f ade8 	bpl.w	8001fbe <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ee:	f7ff f891 	bl	8001514 <HAL_GetTick>
 80023f2:	1b40      	subs	r0, r0, r5
 80023f4:	2802      	cmp	r0, #2
 80023f6:	d9f6      	bls.n	80023e6 <HAL_RCC_OscConfig+0x4ee>
 80023f8:	e61e      	b.n	8002038 <HAL_RCC_OscConfig+0x140>
 80023fa:	bf00      	nop
 80023fc:	40007000 	.word	0x40007000
 8002400:	f99d808c 	.word	0xf99d808c

08002404 <HAL_RCC_ClockConfig>:
{
 8002404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002408:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800240a:	4604      	mov	r4, r0
 800240c:	b910      	cbnz	r0, 8002414 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800240e:	2001      	movs	r0, #1
}
 8002410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4a40      	ldr	r2, [pc, #256]	; (8002518 <HAL_RCC_ClockConfig+0x114>)
 8002416:	6813      	ldr	r3, [r2, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	428b      	cmp	r3, r1
 800241e:	d32a      	bcc.n	8002476 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	07d9      	lsls	r1, r3, #31
 8002424:	d432      	bmi.n	800248c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002426:	6821      	ldr	r1, [r4, #0]
 8002428:	078a      	lsls	r2, r1, #30
 800242a:	d45b      	bmi.n	80024e4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4a3a      	ldr	r2, [pc, #232]	; (8002518 <HAL_RCC_ClockConfig+0x114>)
 800242e:	6813      	ldr	r3, [r2, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	42ab      	cmp	r3, r5
 8002436:	d85d      	bhi.n	80024f4 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	f011 0f04 	tst.w	r1, #4
 800243c:	4d37      	ldr	r5, [pc, #220]	; (800251c <HAL_RCC_ClockConfig+0x118>)
 800243e:	d164      	bne.n	800250a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	070b      	lsls	r3, r1, #28
 8002442:	d506      	bpl.n	8002452 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002444:	68ab      	ldr	r3, [r5, #8]
 8002446:	6922      	ldr	r2, [r4, #16]
 8002448:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800244c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002450:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002452:	f7ff fd03 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002456:	68ab      	ldr	r3, [r5, #8]
 8002458:	4a31      	ldr	r2, [pc, #196]	; (8002520 <HAL_RCC_ClockConfig+0x11c>)
 800245a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800245e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	40d8      	lsrs	r0, r3
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCC_ClockConfig+0x120>)
 800246c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <HAL_RCC_ClockConfig+0x124>)
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f7ff b807 	b.w	8001484 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	6813      	ldr	r3, [r2, #0]
 8002478:	f023 0307 	bic.w	r3, r3, #7
 800247c:	430b      	orrs	r3, r1
 800247e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	428b      	cmp	r3, r1
 8002488:	d1c1      	bne.n	800240e <HAL_RCC_ClockConfig+0xa>
 800248a:	e7c9      	b.n	8002420 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248c:	6862      	ldr	r2, [r4, #4]
 800248e:	4e23      	ldr	r6, [pc, #140]	; (800251c <HAL_RCC_ClockConfig+0x118>)
 8002490:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002492:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002494:	d11a      	bne.n	80024cc <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002496:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800249a:	d0b8      	beq.n	800240e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800249c:	68b3      	ldr	r3, [r6, #8]
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80024a6:	f7ff f835 	bl	8001514 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024aa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80024ae:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b0:	68b3      	ldr	r3, [r6, #8]
 80024b2:	6862      	ldr	r2, [r4, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024bc:	d0b3      	beq.n	8002426 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024be:	f7ff f829 	bl	8001514 <HAL_GetTick>
 80024c2:	1bc0      	subs	r0, r0, r7
 80024c4:	4540      	cmp	r0, r8
 80024c6:	d9f3      	bls.n	80024b0 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80024c8:	2003      	movs	r0, #3
 80024ca:	e7a1      	b.n	8002410 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024cc:	2a02      	cmp	r2, #2
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024d4:	e7e1      	b.n	800249a <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024d6:	b912      	cbnz	r2, 80024de <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d8:	f013 0f02 	tst.w	r3, #2
 80024dc:	e7dd      	b.n	800249a <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024e2:	e7da      	b.n	800249a <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_RCC_ClockConfig+0x118>)
 80024e6:	68a0      	ldr	r0, [r4, #8]
 80024e8:	6893      	ldr	r3, [r2, #8]
 80024ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ee:	4303      	orrs	r3, r0
 80024f0:	6093      	str	r3, [r2, #8]
 80024f2:	e79b      	b.n	800242c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	6813      	ldr	r3, [r2, #0]
 80024f6:	f023 0307 	bic.w	r3, r3, #7
 80024fa:	432b      	orrs	r3, r5
 80024fc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	42ab      	cmp	r3, r5
 8002506:	d182      	bne.n	800240e <HAL_RCC_ClockConfig+0xa>
 8002508:	e796      	b.n	8002438 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250a:	68ab      	ldr	r3, [r5, #8]
 800250c:	68e2      	ldr	r2, [r4, #12]
 800250e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002512:	4313      	orrs	r3, r2
 8002514:	60ab      	str	r3, [r5, #8]
 8002516:	e793      	b.n	8002440 <HAL_RCC_ClockConfig+0x3c>
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000
 8002520:	08007ebe 	.word	0x08007ebe
 8002524:	20000000 	.word	0x20000000
 8002528:	20000008 	.word	0x20000008

0800252c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x18>)
 800252e:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002536:	5cd3      	ldrb	r3, [r2, r3]
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_RCC_GetPCLK1Freq+0x20>)
 800253a:	6810      	ldr	r0, [r2, #0]
 800253c:	f003 031f 	and.w	r3, r3, #31
}
 8002540:	40d8      	lsrs	r0, r3
 8002542:	4770      	bx	lr
 8002544:	40021000 	.word	0x40021000
 8002548:	08007ece 	.word	0x08007ece
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002552:	4a06      	ldr	r2, [pc, #24]	; (800256c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255e:	6810      	ldr	r0, [r2, #0]
 8002560:	f003 031f 	and.w	r3, r3, #31
}
 8002564:	40d8      	lsrs	r0, r3
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000
 800256c:	08007ece 	.word	0x08007ece
 8002570:	20000000 	.word	0x20000000

08002574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002576:	4c43      	ldr	r4, [pc, #268]	; (8002684 <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002578:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800257a:	68e2      	ldr	r2, [r4, #12]
{
 800257c:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800257e:	0790      	lsls	r0, r2, #30
{
 8002580:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002582:	d029      	beq.n	80025d8 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002584:	68e2      	ldr	r2, [r4, #12]
 8002586:	f002 0203 	and.w	r2, r2, #3
 800258a:	429a      	cmp	r2, r3
 800258c:	d178      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x10c>
       ||
 800258e:	2a00      	cmp	r2, #0
 8002590:	d076      	beq.n	8002680 <RCCEx_PLLSAI1_Config+0x10c>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002592:	68e3      	ldr	r3, [r4, #12]
       ||
 8002594:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002596:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800259a:	3301      	adds	r3, #1
       ||
 800259c:	4293      	cmp	r3, r2
 800259e:	d16f      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x10c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe ffb4 	bl	8001514 <HAL_GetTick>
 80025ac:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	011a      	lsls	r2, r3, #4
 80025b2:	d430      	bmi.n	8002616 <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b4:	68ab      	ldr	r3, [r5, #8]
 80025b6:	021f      	lsls	r7, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80025b8:	b3a6      	cbz	r6, 8002624 <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025ba:	2e01      	cmp	r6, #1
 80025bc:	d14d      	bne.n	800265a <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025be:	692a      	ldr	r2, [r5, #16]
 80025c0:	6921      	ldr	r1, [r4, #16]
 80025c2:	0852      	lsrs	r2, r2, #1
 80025c4:	1e53      	subs	r3, r2, #1
 80025c6:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80025ca:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80025ce:	433a      	orrs	r2, r7
 80025d0:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80025d4:	6122      	str	r2, [r4, #16]
 80025d6:	e030      	b.n	800263a <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d011      	beq.n	8002600 <RCCEx_PLLSAI1_Config+0x8c>
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d013      	beq.n	8002608 <RCCEx_PLLSAI1_Config+0x94>
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d14d      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x10c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ea:	d049      	beq.n	8002680 <RCCEx_PLLSAI1_Config+0x10c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ec:	68e0      	ldr	r0, [r4, #12]
 80025ee:	686a      	ldr	r2, [r5, #4]
 80025f0:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80025f4:	3a01      	subs	r2, #1
 80025f6:	4318      	orrs	r0, r3
 80025f8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80025fc:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80025fe:	e7cf      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002600:	6822      	ldr	r2, [r4, #0]
 8002602:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002606:	e7f0      	b.n	80025ea <RCCEx_PLLSAI1_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	0391      	lsls	r1, r2, #14
 800260c:	d4ee      	bmi.n	80025ec <RCCEx_PLLSAI1_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002614:	e7e9      	b.n	80025ea <RCCEx_PLLSAI1_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002616:	f7fe ff7d 	bl	8001514 <HAL_GetTick>
 800261a:	1bc0      	subs	r0, r0, r7
 800261c:	2802      	cmp	r0, #2
 800261e:	d9c6      	bls.n	80025ae <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8002620:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002624:	6921      	ldr	r1, [r4, #16]
 8002626:	68eb      	ldr	r3, [r5, #12]
 8002628:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800262c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	4339      	orrs	r1, r7
 8002634:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002638:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002640:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002642:	f7fe ff67 	bl	8001514 <HAL_GetTick>
 8002646:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	d512      	bpl.n	8002674 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800264e:	6923      	ldr	r3, [r4, #16]
 8002650:	69aa      	ldr	r2, [r5, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	6123      	str	r3, [r4, #16]
 8002656:	2000      	movs	r0, #0
  return status;
 8002658:	e7e3      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265a:	696b      	ldr	r3, [r5, #20]
 800265c:	6922      	ldr	r2, [r4, #16]
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	1e59      	subs	r1, r3, #1
 8002662:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8002666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800266a:	433b      	orrs	r3, r7
 800266c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002670:	6123      	str	r3, [r4, #16]
 8002672:	e7e2      	b.n	800263a <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002674:	f7fe ff4e 	bl	8001514 <HAL_GetTick>
 8002678:	1b80      	subs	r0, r0, r6
 800267a:	2802      	cmp	r0, #2
 800267c:	d9e4      	bls.n	8002648 <RCCEx_PLLSAI1_Config+0xd4>
 800267e:	e7cf      	b.n	8002620 <RCCEx_PLLSAI1_Config+0xac>
      status = HAL_ERROR;
 8002680:	2001      	movs	r0, #1
 8002682:	e7ce      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xae>
 8002684:	40021000 	.word	0x40021000

08002688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800268a:	4c3c      	ldr	r4, [pc, #240]	; (800277c <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800268c:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800268e:	68e2      	ldr	r2, [r4, #12]
{
 8002690:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002692:	0790      	lsls	r0, r2, #30
{
 8002694:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002696:	d027      	beq.n	80026e8 <RCCEx_PLLSAI2_Config+0x60>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002698:	68e2      	ldr	r2, [r4, #12]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	429a      	cmp	r2, r3
 80026a0:	d169      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xee>
       ||
 80026a2:	2a00      	cmp	r2, #0
 80026a4:	d067      	beq.n	8002776 <RCCEx_PLLSAI2_Config+0xee>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026a6:	68e3      	ldr	r3, [r4, #12]
       ||
 80026a8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026ae:	3301      	adds	r3, #1
       ||
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d160      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xee>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026bc:	f7fe ff2a 	bl	8001514 <HAL_GetTick>
 80026c0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	009a      	lsls	r2, r3, #2
 80026c6:	d42e      	bmi.n	8002726 <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026c8:	68ab      	ldr	r3, [r5, #8]
 80026ca:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80026cc:	b396      	cbz	r6, 8002734 <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026ce:	6963      	ldr	r3, [r4, #20]
 80026d0:	6929      	ldr	r1, [r5, #16]
 80026d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026d6:	0849      	lsrs	r1, r1, #1
 80026d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026dc:	3901      	subs	r1, #1
 80026de:	4303      	orrs	r3, r0
 80026e0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80026e4:	6163      	str	r3, [r4, #20]
 80026e6:	e030      	b.n	800274a <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d011      	beq.n	8002710 <RCCEx_PLLSAI2_Config+0x88>
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d013      	beq.n	8002718 <RCCEx_PLLSAI2_Config+0x90>
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d140      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xee>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026f4:	6822      	ldr	r2, [r4, #0]
 80026f6:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026fa:	d03c      	beq.n	8002776 <RCCEx_PLLSAI2_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026fc:	68e0      	ldr	r0, [r4, #12]
 80026fe:	686a      	ldr	r2, [r5, #4]
 8002700:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8002704:	3a01      	subs	r2, #1
 8002706:	4318      	orrs	r0, r3
 8002708:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800270c:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800270e:	e7d1      	b.n	80026b4 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002710:	6822      	ldr	r2, [r4, #0]
 8002712:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002716:	e7f0      	b.n	80026fa <RCCEx_PLLSAI2_Config+0x72>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002718:	6822      	ldr	r2, [r4, #0]
 800271a:	0391      	lsls	r1, r2, #14
 800271c:	d4ee      	bmi.n	80026fc <RCCEx_PLLSAI2_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271e:	6822      	ldr	r2, [r4, #0]
 8002720:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002724:	e7e9      	b.n	80026fa <RCCEx_PLLSAI2_Config+0x72>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002726:	f7fe fef5 	bl	8001514 <HAL_GetTick>
 800272a:	1bc0      	subs	r0, r0, r7
 800272c:	2802      	cmp	r0, #2
 800272e:	d9c8      	bls.n	80026c2 <RCCEx_PLLSAI2_Config+0x3a>
        status = HAL_TIMEOUT;
 8002730:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002734:	6962      	ldr	r2, [r4, #20]
 8002736:	68eb      	ldr	r3, [r5, #12]
 8002738:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800273c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	4302      	orrs	r2, r0
 8002744:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002748:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002752:	f7fe fedf 	bl	8001514 <HAL_GetTick>
 8002756:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	d505      	bpl.n	800276a <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800275e:	6963      	ldr	r3, [r4, #20]
 8002760:	696a      	ldr	r2, [r5, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	6163      	str	r3, [r4, #20]
 8002766:	2000      	movs	r0, #0
  return status;
 8002768:	e7e3      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800276a:	f7fe fed3 	bl	8001514 <HAL_GetTick>
 800276e:	1b80      	subs	r0, r0, r6
 8002770:	2802      	cmp	r0, #2
 8002772:	d9f1      	bls.n	8002758 <RCCEx_PLLSAI2_Config+0xd0>
 8002774:	e7dc      	b.n	8002730 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 8002776:	2001      	movs	r0, #1
 8002778:	e7db      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000

08002780 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002780:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002784:	6806      	ldr	r6, [r0, #0]
 8002786:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800278a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800278c:	d009      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800278e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002790:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002794:	d022      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002796:	d813      	bhi.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002798:	b331      	cbz	r1, 80027e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800279a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800279e:	d02a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027a0:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	04d8      	lsls	r0, r3, #19
 80027a6:	d509      	bpl.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80027a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80027aa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80027ae:	d02c      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80027b0:	d826      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80027b2:	b381      	cbz	r1, 8002816 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80027b4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80027b8:	d070      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80027ba:	2601      	movs	r6, #1
 80027bc:	4635      	mov	r5, r6
 80027be:	e039      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027c0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80027c4:	d1ec      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c6:	4a3b      	ldr	r2, [pc, #236]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80027ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027d2:	430b      	orrs	r3, r1
 80027d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80027d8:	2600      	movs	r6, #0
 80027da:	e7e2      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027dc:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027de:	68d3      	ldr	r3, [r2, #12]
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80027e6:	e7ee      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027e8:	3004      	adds	r0, #4
 80027ea:	f7ff fec3 	bl	8002574 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027ee:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d1d6      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x22>
 80027f4:	e7e7      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027f6:	2100      	movs	r1, #0
 80027f8:	3020      	adds	r0, #32
 80027fa:	f7ff ff45 	bl	8002688 <RCCEx_PLLSAI2_Config>
 80027fe:	e7f6      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002800:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002804:	d1d9      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002806:	4635      	mov	r5, r6
 8002808:	e009      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800280a:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800280c:	68d3      	ldr	r3, [r2, #12]
 800280e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002812:	60d3      	str	r3, [r2, #12]
      break;
 8002814:	e7f7      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002816:	1d20      	adds	r0, r4, #4
 8002818:	f7ff feac 	bl	8002574 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800281c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800281e:	2d00      	cmp	r5, #0
 8002820:	d142      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002822:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002824:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002826:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800282a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800282e:	430b      	orrs	r3, r1
 8002830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	0399      	lsls	r1, r3, #14
 8002838:	f140 815e 	bpl.w	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800283c:	4f1d      	ldr	r7, [pc, #116]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800283e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002840:	00da      	lsls	r2, r3, #3
 8002842:	d433      	bmi.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	65bb      	str	r3, [r7, #88]	; 0x58
 800284c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002856:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800285a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80028b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800285e:	f8d9 3000 	ldr.w	r3, [r9]
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800286a:	f7fe fe53 	bl	8001514 <HAL_GetTick>
 800286e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002870:	f8d9 3000 	ldr.w	r3, [r9]
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	d521      	bpl.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 8002878:	bb3d      	cbnz	r5, 80028ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800287a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800287e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002882:	f040 810f 	bne.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800288a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002898:	4635      	mov	r5, r6
 800289a:	e016      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800289c:	2100      	movs	r1, #0
 800289e:	f104 0020 	add.w	r0, r4, #32
 80028a2:	f7ff fef1 	bl	8002688 <RCCEx_PLLSAI2_Config>
 80028a6:	e7b9      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80028a8:	462e      	mov	r6, r5
 80028aa:	e7c3      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80028ac:	f04f 0800 	mov.w	r8, #0
 80028b0:	e7d3      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028bc:	f7fe fe2a 	bl	8001514 <HAL_GetTick>
 80028c0:	eba0 000a 	sub.w	r0, r0, sl
 80028c4:	2802      	cmp	r0, #2
 80028c6:	d9d3      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80028c8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80028ca:	f1b8 0f00 	cmp.w	r8, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d6:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	07da      	lsls	r2, r3, #31
 80028dc:	d508      	bpl.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028de:	499d      	ldr	r1, [pc, #628]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80028e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80028e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028e6:	f022 0203 	bic.w	r2, r2, #3
 80028ea:	4302      	orrs	r2, r0
 80028ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f0:	079f      	lsls	r7, r3, #30
 80028f2:	d508      	bpl.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f4:	4997      	ldr	r1, [pc, #604]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80028f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80028f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028fc:	f022 020c 	bic.w	r2, r2, #12
 8002900:	4302      	orrs	r2, r0
 8002902:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002906:	075e      	lsls	r6, r3, #29
 8002908:	d508      	bpl.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800290a:	4992      	ldr	r1, [pc, #584]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800290c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800290e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002912:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002916:	4302      	orrs	r2, r0
 8002918:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800291c:	0718      	lsls	r0, r3, #28
 800291e:	d508      	bpl.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002920:	498c      	ldr	r1, [pc, #560]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002922:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002924:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002928:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800292c:	4302      	orrs	r2, r0
 800292e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002932:	06d9      	lsls	r1, r3, #27
 8002934:	d508      	bpl.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002936:	4987      	ldr	r1, [pc, #540]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002938:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800293a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800293e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002942:	4302      	orrs	r2, r0
 8002944:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002948:	069a      	lsls	r2, r3, #26
 800294a:	d508      	bpl.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800294c:	4981      	ldr	r1, [pc, #516]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800294e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002950:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002954:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002958:	4302      	orrs	r2, r0
 800295a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295e:	059f      	lsls	r7, r3, #22
 8002960:	d508      	bpl.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002962:	497c      	ldr	r1, [pc, #496]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002964:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002966:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800296a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800296e:	4302      	orrs	r2, r0
 8002970:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002974:	055e      	lsls	r6, r3, #21
 8002976:	d508      	bpl.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002978:	4976      	ldr	r1, [pc, #472]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800297a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800297c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002980:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002984:	4302      	orrs	r2, r0
 8002986:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298a:	0658      	lsls	r0, r3, #25
 800298c:	d508      	bpl.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800298e:	4971      	ldr	r1, [pc, #452]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002990:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002992:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002996:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800299a:	4302      	orrs	r2, r0
 800299c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029a0:	0619      	lsls	r1, r3, #24
 80029a2:	d508      	bpl.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029a4:	496b      	ldr	r1, [pc, #428]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80029a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029ac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80029b0:	4302      	orrs	r2, r0
 80029b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029b6:	05da      	lsls	r2, r3, #23
 80029b8:	d508      	bpl.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ba:	4966      	ldr	r1, [pc, #408]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80029bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029c2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80029c6:	4302      	orrs	r2, r0
 80029c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029cc:	049b      	lsls	r3, r3, #18
 80029ce:	d510      	bpl.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029d0:	4a60      	ldr	r2, [pc, #384]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80029d2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80029d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029d8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80029dc:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029de:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029e6:	f040 8089 	bne.w	8002afc <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ea:	68d3      	ldr	r3, [r2, #12]
 80029ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	031f      	lsls	r7, r3, #12
 80029f6:	d510      	bpl.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029f8:	4a56      	ldr	r2, [pc, #344]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80029fa:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80029fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a00:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a04:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a06:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a0e:	f040 8081 	bne.w	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a12:	68d3      	ldr	r3, [r2, #12]
 8002a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a18:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	035e      	lsls	r6, r3, #13
 8002a1e:	d50f      	bpl.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a20:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002a22:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002a24:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a28:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a2c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a36:	d179      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a38:	68d3      	ldr	r3, [r2, #12]
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	0458      	lsls	r0, r3, #17
 8002a44:	d512      	bpl.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a46:	4943      	ldr	r1, [pc, #268]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002a48:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002a4a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a4e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a52:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a54:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a5c:	d171      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a5e:	2102      	movs	r1, #2
 8002a60:	1d20      	adds	r0, r4, #4
 8002a62:	f7ff fd87 	bl	8002574 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a66:	2800      	cmp	r0, #0
 8002a68:	bf18      	it	ne
 8002a6a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a6c:	6822      	ldr	r2, [r4, #0]
 8002a6e:	0411      	lsls	r1, r2, #16
 8002a70:	d508      	bpl.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a72:	4938      	ldr	r1, [pc, #224]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002a74:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002a76:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a7e:	4303      	orrs	r3, r0
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a84:	03d3      	lsls	r3, r2, #15
 8002a86:	d509      	bpl.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a88:	4a32      	ldr	r2, [pc, #200]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002a8a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002a8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a96:	430b      	orrs	r3, r1
 8002a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	b002      	add	sp, #8
 8002aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aa4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	f43f aeec 	beq.w	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ac2:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aca:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002acc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002ad0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad4:	f57f aed7 	bpl.w	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fd1c 	bl	8001514 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002ae0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ae6:	0799      	lsls	r1, r3, #30
 8002ae8:	f53f aecd 	bmi.w	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe fd12 	bl	8001514 <HAL_GetTick>
 8002af0:	1b40      	subs	r0, r0, r5
 8002af2:	4548      	cmp	r0, r9
 8002af4:	d9f5      	bls.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002af6:	e6e7      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002af8:	4635      	mov	r5, r6
 8002afa:	e6ed      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002afc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002b00:	f47f af77 	bne.w	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x272>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b04:	2101      	movs	r1, #1
 8002b06:	1d20      	adds	r0, r4, #4
 8002b08:	f7ff fd34 	bl	8002574 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	bf18      	it	ne
 8002b10:	4605      	movne	r5, r0
 8002b12:	e76e      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b14:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002b18:	f47f af7f 	bne.w	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	1d20      	adds	r0, r4, #4
 8002b20:	f7ff fd28 	bl	8002574 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002b24:	2800      	cmp	r0, #0
 8002b26:	bf18      	it	ne
 8002b28:	4605      	movne	r5, r0
 8002b2a:	e776      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b2c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002b30:	d186      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b32:	2101      	movs	r1, #1
 8002b34:	1d20      	adds	r0, r4, #4
 8002b36:	f7ff fd1d 	bl	8002574 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	bf18      	it	ne
 8002b3e:	4605      	movne	r5, r0
 8002b40:	e77e      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b42:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002b46:	d191      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b48:	2102      	movs	r1, #2
 8002b4a:	f104 0020 	add.w	r0, r4, #32
 8002b4e:	f7ff fd9b 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8002b52:	e788      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002b54:	40021000 	.word	0x40021000

08002b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b5c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b5e:	6921      	ldr	r1, [r4, #16]
 8002b60:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b62:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b64:	69c0      	ldr	r0, [r0, #28]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	6961      	ldr	r1, [r4, #20]
 8002b6a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b6c:	4990      	ldr	r1, [pc, #576]	; (8002db0 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b6e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b70:	4029      	ands	r1, r5
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	68e1      	ldr	r1, [r4, #12]
 8002b7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b82:	4a8c      	ldr	r2, [pc, #560]	; (8002db4 <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b84:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b86:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b88:	bf1c      	itt	ne
 8002b8a:	6a22      	ldrne	r2, [r4, #32]
 8002b8c:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b98:	4a87      	ldr	r2, [pc, #540]	; (8002db8 <UART_SetConfig+0x260>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d117      	bne.n	8002bce <UART_SetConfig+0x76>
 8002b9e:	4b87      	ldr	r3, [pc, #540]	; (8002dbc <UART_SetConfig+0x264>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	f200 80d0 	bhi.w	8002d50 <UART_SetConfig+0x1f8>
 8002bb0:	4a83      	ldr	r2, [pc, #524]	; (8002dc0 <UART_SetConfig+0x268>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002bb8:	f040 8099 	bne.w	8002cee <UART_SetConfig+0x196>
  {
    switch (clocksource)
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d822      	bhi.n	8002c06 <UART_SetConfig+0xae>
 8002bc0:	e8df f003 	tbb	[pc, r3]
 8002bc4:	2193c9da 	.word	0x2193c9da
 8002bc8:	212121cf 	.word	0x212121cf
 8002bcc:	de          	.byte	0xde
 8002bcd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bce:	4a7d      	ldr	r2, [pc, #500]	; (8002dc4 <UART_SetConfig+0x26c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d106      	bne.n	8002be2 <UART_SetConfig+0x8a>
 8002bd4:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <UART_SetConfig+0x264>)
 8002bd6:	4a7c      	ldr	r2, [pc, #496]	; (8002dc8 <UART_SetConfig+0x270>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	e7e7      	b.n	8002bb2 <UART_SetConfig+0x5a>
 8002be2:	4a7a      	ldr	r2, [pc, #488]	; (8002dcc <UART_SetConfig+0x274>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d119      	bne.n	8002c1c <UART_SetConfig+0xc4>
 8002be8:	4b74      	ldr	r3, [pc, #464]	; (8002dbc <UART_SetConfig+0x264>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	f000 80b8 	beq.w	8002d68 <UART_SetConfig+0x210>
 8002bf8:	d807      	bhi.n	8002c0a <UART_SetConfig+0xb2>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80b9 	beq.w	8002d72 <UART_SetConfig+0x21a>
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	f000 80ab 	beq.w	8002d5c <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c06:	2001      	movs	r0, #1
 8002c08:	e04e      	b.n	8002ca8 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c0a:	2b30      	cmp	r3, #48	; 0x30
 8002c0c:	d1fb      	bne.n	8002c06 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c0e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002c12:	f000 80b5 	beq.w	8002d80 <UART_SetConfig+0x228>
 8002c16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c1a:	e083      	b.n	8002d24 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c1c:	4a6c      	ldr	r2, [pc, #432]	; (8002dd0 <UART_SetConfig+0x278>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10f      	bne.n	8002c42 <UART_SetConfig+0xea>
 8002c22:	4b66      	ldr	r3, [pc, #408]	; (8002dbc <UART_SetConfig+0x264>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	f000 809b 	beq.w	8002d68 <UART_SetConfig+0x210>
 8002c32:	d804      	bhi.n	8002c3e <UART_SetConfig+0xe6>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 809c 	beq.w	8002d72 <UART_SetConfig+0x21a>
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	e7e1      	b.n	8002c02 <UART_SetConfig+0xaa>
 8002c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c40:	e7e4      	b.n	8002c0c <UART_SetConfig+0xb4>
 8002c42:	4a64      	ldr	r2, [pc, #400]	; (8002dd4 <UART_SetConfig+0x27c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d112      	bne.n	8002c6e <UART_SetConfig+0x116>
 8002c48:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <UART_SetConfig+0x264>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c56:	f000 8087 	beq.w	8002d68 <UART_SetConfig+0x210>
 8002c5a:	d805      	bhi.n	8002c68 <UART_SetConfig+0x110>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8088 	beq.w	8002d72 <UART_SetConfig+0x21a>
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	e7cc      	b.n	8002c02 <UART_SetConfig+0xaa>
 8002c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c6c:	e7ce      	b.n	8002c0c <UART_SetConfig+0xb4>
 8002c6e:	4a51      	ldr	r2, [pc, #324]	; (8002db4 <UART_SetConfig+0x25c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d1c8      	bne.n	8002c06 <UART_SetConfig+0xae>
 8002c74:	4b51      	ldr	r3, [pc, #324]	; (8002dbc <UART_SetConfig+0x264>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c82:	d015      	beq.n	8002cb0 <UART_SetConfig+0x158>
 8002c84:	d806      	bhi.n	8002c94 <UART_SetConfig+0x13c>
 8002c86:	b15b      	cbz	r3, 8002ca0 <UART_SetConfig+0x148>
 8002c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8c:	d1bb      	bne.n	8002c06 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8e:	f7ff f8e5 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
        break;
 8002c92:	e007      	b.n	8002ca4 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c98:	d1b5      	bne.n	8002c06 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002c9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c9e:	e008      	b.n	8002cb2 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ca0:	f7ff fc44 	bl	800252c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ca4:	b928      	cbnz	r0, 8002cb2 <UART_SetConfig+0x15a>
 8002ca6:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ca8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002caa:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002cb0:	4849      	ldr	r0, [pc, #292]	; (8002dd8 <UART_SetConfig+0x280>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cb2:	6862      	ldr	r2, [r4, #4]
 8002cb4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002cb8:	4283      	cmp	r3, r0
 8002cba:	d8a4      	bhi.n	8002c06 <UART_SetConfig+0xae>
 8002cbc:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002cc0:	d8a1      	bhi.n	8002c06 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cc2:	0851      	lsrs	r1, r2, #1
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	468c      	mov	ip, r1
 8002cc8:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002ccc:	4629      	mov	r1, r5
 8002cce:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	4660      	mov	r0, ip
 8002cd6:	f7fd ff67 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cda:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <UART_SetConfig+0x284>)
 8002cdc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d890      	bhi.n	8002c06 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	60d8      	str	r0, [r3, #12]
 8002ce8:	e7dd      	b.n	8002ca6 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8002cea:	483b      	ldr	r0, [pc, #236]	; (8002dd8 <UART_SetConfig+0x280>)
 8002cec:	e048      	b.n	8002d80 <UART_SetConfig+0x228>
    switch (clocksource)
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d889      	bhi.n	8002c06 <UART_SetConfig+0xae>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <UART_SetConfig+0x1a0>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d1d 	.word	0x08002d1d
 8002cfc:	08002d45 	.word	0x08002d45
 8002d00:	08002d6f 	.word	0x08002d6f
 8002d04:	08002c07 	.word	0x08002c07
 8002d08:	08002d4b 	.word	0x08002d4b
 8002d0c:	08002c07 	.word	0x08002c07
 8002d10:	08002c07 	.word	0x08002c07
 8002d14:	08002c07 	.word	0x08002c07
 8002d18:	08002c17 	.word	0x08002c17
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f7ff fc06 	bl	800252c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d0c0      	beq.n	8002ca6 <UART_SetConfig+0x14e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d24:	6862      	ldr	r2, [r4, #4]
 8002d26:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d2e:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d30:	f1a3 0110 	sub.w	r1, r3, #16
 8002d34:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002d38:	4291      	cmp	r1, r2
 8002d3a:	f63f af64 	bhi.w	8002c06 <UART_SetConfig+0xae>
        huart->Instance->BRR = usartdiv;
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	60d3      	str	r3, [r2, #12]
 8002d42:	e7b0      	b.n	8002ca6 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d44:	f7ff fc04 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
        break;
 8002d48:	e7ea      	b.n	8002d20 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d4a:	f7ff f887 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
        break;
 8002d4e:	e7e7      	b.n	8002d20 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d54:	d1f6      	bne.n	8002d44 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d56:	f7ff fbfb 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
        break;
 8002d5a:	e00f      	b.n	8002d7c <UART_SetConfig+0x224>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d5c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d60:	d1f3      	bne.n	8002d4a <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d62:	f7ff f87b 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
        break;
 8002d66:	e009      	b.n	8002d7c <UART_SetConfig+0x224>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d6c:	d0bd      	beq.n	8002cea <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8002d6e:	481a      	ldr	r0, [pc, #104]	; (8002dd8 <UART_SetConfig+0x280>)
 8002d70:	e7d8      	b.n	8002d24 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d76:	d1d1      	bne.n	8002d1c <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d78:	f7ff fbd8 	bl	800252c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d092      	beq.n	8002ca6 <UART_SetConfig+0x14e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d80:	6862      	ldr	r2, [r4, #4]
 8002d82:	0853      	lsrs	r3, r2, #1
 8002d84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002d88:	fbb0 f0f2 	udiv	r0, r0, r2
 8002d8c:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d8e:	f1a3 0110 	sub.w	r1, r3, #16
 8002d92:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002d96:	4291      	cmp	r1, r2
 8002d98:	f63f af35 	bhi.w	8002c06 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d9c:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8002da0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002da2:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002da8:	4318      	orrs	r0, r3
 8002daa:	60d0      	str	r0, [r2, #12]
 8002dac:	e77b      	b.n	8002ca6 <UART_SetConfig+0x14e>
 8002dae:	bf00      	nop
 8002db0:	efff69f3 	.word	0xefff69f3
 8002db4:	40008000 	.word	0x40008000
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08007f08 	.word	0x08007f08
 8002dc4:	40004400 	.word	0x40004400
 8002dc8:	08007f0b 	.word	0x08007f0b
 8002dcc:	40004800 	.word	0x40004800
 8002dd0:	40004c00 	.word	0x40004c00
 8002dd4:	40005000 	.word	0x40005000
 8002dd8:	00f42400 	.word	0x00f42400
 8002ddc:	000ffcff 	.word	0x000ffcff

08002de0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002de2:	07da      	lsls	r2, r3, #31
{
 8002de4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de6:	d506      	bpl.n	8002df6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002de8:	6801      	ldr	r1, [r0, #0]
 8002dea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002dec:	684a      	ldr	r2, [r1, #4]
 8002dee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002df2:	4322      	orrs	r2, r4
 8002df4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002df6:	079c      	lsls	r4, r3, #30
 8002df8:	d506      	bpl.n	8002e08 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dfa:	6801      	ldr	r1, [r0, #0]
 8002dfc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002dfe:	684a      	ldr	r2, [r1, #4]
 8002e00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e04:	4322      	orrs	r2, r4
 8002e06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e08:	0759      	lsls	r1, r3, #29
 8002e0a:	d506      	bpl.n	8002e1a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e0c:	6801      	ldr	r1, [r0, #0]
 8002e0e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002e10:	684a      	ldr	r2, [r1, #4]
 8002e12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e16:	4322      	orrs	r2, r4
 8002e18:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e1a:	071a      	lsls	r2, r3, #28
 8002e1c:	d506      	bpl.n	8002e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e1e:	6801      	ldr	r1, [r0, #0]
 8002e20:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002e22:	684a      	ldr	r2, [r1, #4]
 8002e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e28:	4322      	orrs	r2, r4
 8002e2a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e2c:	06dc      	lsls	r4, r3, #27
 8002e2e:	d506      	bpl.n	8002e3e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e30:	6801      	ldr	r1, [r0, #0]
 8002e32:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002e34:	688a      	ldr	r2, [r1, #8]
 8002e36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e3a:	4322      	orrs	r2, r4
 8002e3c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e3e:	0699      	lsls	r1, r3, #26
 8002e40:	d506      	bpl.n	8002e50 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e42:	6801      	ldr	r1, [r0, #0]
 8002e44:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002e46:	688a      	ldr	r2, [r1, #8]
 8002e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e4c:	4322      	orrs	r2, r4
 8002e4e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e50:	065a      	lsls	r2, r3, #25
 8002e52:	d50f      	bpl.n	8002e74 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e54:	6801      	ldr	r1, [r0, #0]
 8002e56:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002e58:	684a      	ldr	r2, [r1, #4]
 8002e5a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002e5e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e60:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e64:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e66:	d105      	bne.n	8002e74 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e68:	684a      	ldr	r2, [r1, #4]
 8002e6a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002e6c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002e70:	4322      	orrs	r2, r4
 8002e72:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	d506      	bpl.n	8002e86 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e78:	6802      	ldr	r2, [r0, #0]
 8002e7a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002e7c:	6853      	ldr	r3, [r2, #4]
 8002e7e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002e82:	430b      	orrs	r3, r1
 8002e84:	6053      	str	r3, [r2, #4]
  }
}
 8002e86:	bd10      	pop	{r4, pc}

08002e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002e90:	4604      	mov	r4, r0
 8002e92:	460e      	mov	r6, r1
 8002e94:	4615      	mov	r5, r2
 8002e96:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	69d3      	ldr	r3, [r2, #28]
 8002e9c:	ea36 0303 	bics.w	r3, r6, r3
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	42ab      	cmp	r3, r5
 8002ea8:	d001      	beq.n	8002eae <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002eaa:	2000      	movs	r0, #0
 8002eac:	e01a      	b.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002eb2:	d0f2      	beq.n	8002e9a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7fe fb2e 	bl	8001514 <HAL_GetTick>
 8002eb8:	1bc0      	subs	r0, r0, r7
 8002eba:	4540      	cmp	r0, r8
 8002ebc:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ebe:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec0:	d802      	bhi.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x40>
 8002ec2:	f1b8 0f00 	cmp.w	r8, #0
 8002ec6:	d10f      	bne.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ecc:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ece:	6883      	ldr	r3, [r0, #8]
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002eda:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002edc:	2300      	movs	r3, #0
 8002ede:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8002ee2:	2003      	movs	r0, #3
}
 8002ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ee8:	075a      	lsls	r2, r3, #29
 8002eea:	d5d5      	bpl.n	8002e98 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eec:	69c3      	ldr	r3, [r0, #28]
 8002eee:	051b      	lsls	r3, r3, #20
 8002ef0:	d5d2      	bpl.n	8002e98 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ef6:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef8:	6803      	ldr	r3, [r0, #0]
 8002efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002efe:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	6883      	ldr	r3, [r0, #8]
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f0e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002f12:	e7e3      	b.n	8002edc <UART_WaitOnFlagUntilTimeout+0x54>

08002f14 <HAL_UART_Transmit>:
{
 8002f14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002f18:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002f1c:	2b20      	cmp	r3, #32
{
 8002f1e:	4604      	mov	r4, r0
 8002f20:	460e      	mov	r6, r1
 8002f22:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002f24:	d14e      	bne.n	8002fc4 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8002f26:	2900      	cmp	r1, #0
 8002f28:	d04a      	beq.n	8002fc0 <HAL_UART_Transmit+0xac>
 8002f2a:	2a00      	cmp	r2, #0
 8002f2c:	d048      	beq.n	8002fc0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002f2e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d046      	beq.n	8002fc4 <HAL_UART_Transmit+0xb0>
 8002f36:	2301      	movs	r3, #1
 8002f38:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f3e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f40:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f44:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002f46:	f7fe fae5 	bl	8001514 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4a:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002f4c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002f54:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8002f56:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5a:	d103      	bne.n	8002f64 <HAL_UART_Transmit+0x50>
 8002f5c:	6922      	ldr	r2, [r4, #16]
 8002f5e:	b90a      	cbnz	r2, 8002f64 <HAL_UART_Transmit+0x50>
 8002f60:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002f62:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002f64:	2200      	movs	r2, #0
 8002f66:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8002f6a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f6e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002f72:	b292      	uxth	r2, r2
 8002f74:	b93a      	cbnz	r2, 8002f86 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	2140      	movs	r1, #64	; 0x40
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f7ff ff85 	bl	8002e88 <UART_WaitOnFlagUntilTimeout>
 8002f7e:	b950      	cbnz	r0, 8002f96 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002f80:	2320      	movs	r3, #32
 8002f82:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002f84:	e008      	b.n	8002f98 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	2200      	movs	r2, #0
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	9303      	str	r3, [sp, #12]
 8002f8e:	f7ff ff7b 	bl	8002e88 <UART_WaitOnFlagUntilTimeout>
 8002f92:	9b03      	ldr	r3, [sp, #12]
 8002f94:	b118      	cbz	r0, 8002f9e <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8002f96:	2003      	movs	r0, #3
}
 8002f98:	b004      	add	sp, #16
 8002f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f9e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002fa0:	b95e      	cbnz	r6, 8002fba <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002faa:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002fac:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002fb8:	e7d7      	b.n	8002f6a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fba:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002fbe:	e7f4      	b.n	8002faa <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	e7e9      	b.n	8002f98 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	e7e7      	b.n	8002f98 <HAL_UART_Transmit+0x84>

08002fc8 <UART_CheckIdleState>:
{
 8002fc8:	b530      	push	{r4, r5, lr}
 8002fca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	2500      	movs	r5, #0
{
 8002fce:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002fd4:	f7fe fa9e 	bl	8001514 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002fde:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe0:	d415      	bmi.n	800300e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	0752      	lsls	r2, r2, #29
 8002fe8:	d509      	bpl.n	8002ffe <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fea:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002fee:	9200      	str	r2, [sp, #0]
 8002ff0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f7ff ff46 	bl	8002e88 <UART_WaitOnFlagUntilTimeout>
 8002ffc:	b9a0      	cbnz	r0, 8003028 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002ffe:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003000:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003002:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003004:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003008:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300a:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 800300c:	e00d      	b.n	800302a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800300e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003012:	9200      	str	r2, [sp, #0]
 8003014:	9003      	str	r0, [sp, #12]
 8003016:	462a      	mov	r2, r5
 8003018:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800301c:	4620      	mov	r0, r4
 800301e:	f7ff ff33 	bl	8002e88 <UART_WaitOnFlagUntilTimeout>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	2800      	cmp	r0, #0
 8003026:	d0dc      	beq.n	8002fe2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003028:	2003      	movs	r0, #3
}
 800302a:	b005      	add	sp, #20
 800302c:	bd30      	pop	{r4, r5, pc}

0800302e <HAL_UART_Init>:
{
 800302e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003030:	4604      	mov	r4, r0
 8003032:	b340      	cbz	r0, 8003086 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003034:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003036:	b91b      	cbnz	r3, 8003040 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003038:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800303c:	f7fe f9c6 	bl	80013cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003040:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003042:	2324      	movs	r3, #36	; 0x24
 8003044:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003046:	6813      	ldr	r3, [r2, #0]
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff fd82 	bl	8002b58 <UART_SetConfig>
 8003054:	2801      	cmp	r0, #1
 8003056:	d016      	beq.n	8003086 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800305a:	b113      	cbz	r3, 8003062 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800305c:	4620      	mov	r0, r4
 800305e:	f7ff febf 	bl	8002de0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800306a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003072:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800307a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003082:	f7ff bfa1 	b.w	8002fc8 <UART_CheckIdleState>
}
 8003086:	2001      	movs	r0, #1
 8003088:	bd10      	pop	{r4, pc}
	...

0800308c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800308c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800308e:	4c14      	ldr	r4, [pc, #80]	; (80030e0 <MX_X_CUBE_AI_Init+0x54>)
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8003090:	4814      	ldr	r0, [pc, #80]	; (80030e4 <MX_X_CUBE_AI_Init+0x58>)
 8003092:	f002 fbe7 	bl	8005864 <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8003096:	4914      	ldr	r1, [pc, #80]	; (80030e8 <MX_X_CUBE_AI_Init+0x5c>)
 8003098:	2200      	movs	r2, #0
 800309a:	4620      	mov	r0, r4
 800309c:	f000 f8e6 	bl	800326c <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 80030a0:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 80030a4:	d006      	beq.n	80030b4 <MX_X_CUBE_AI_Init+0x28>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80030a6:	0a03      	lsrs	r3, r0, #8
 80030a8:	460a      	mov	r2, r1
 80030aa:	4810      	ldr	r0, [pc, #64]	; (80030ec <MX_X_CUBE_AI_Init+0x60>)
 80030ac:	4910      	ldr	r1, [pc, #64]	; (80030f0 <MX_X_CUBE_AI_Init+0x64>)
 80030ae:	f002 fb53 	bl	8005758 <iprintf>
  do {} while (1);
 80030b2:	e7fe      	b.n	80030b2 <MX_X_CUBE_AI_Init+0x26>
  ai_input = ai_network_inputs_get(network, NULL);
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	9101      	str	r1, [sp, #4]
 80030b8:	f000 f832 	bl	8003120 <ai_network_inputs_get>
 80030bc:	4d0d      	ldr	r5, [pc, #52]	; (80030f4 <MX_X_CUBE_AI_Init+0x68>)
  ai_output = ai_network_outputs_get(network, NULL);
 80030be:	9901      	ldr	r1, [sp, #4]
  ai_input = ai_network_inputs_get(network, NULL);
 80030c0:	6028      	str	r0, [r5, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	f000 f836 	bl	8003134 <ai_network_outputs_get>
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <MX_X_CUBE_AI_Init+0x6c>)
	  ai_input[idx].data = data_ins[idx];
 80030ca:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <MX_X_CUBE_AI_Init+0x70>)
  ai_output = ai_network_outputs_get(network, NULL);
 80030cc:	6018      	str	r0, [r3, #0]
	  ai_input[idx].data = data_ins[idx];
 80030ce:	682b      	ldr	r3, [r5, #0]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	605a      	str	r2, [r3, #4]
	ai_output[idx].data = data_outs[idx];
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <MX_X_CUBE_AI_Init+0x74>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6043      	str	r3, [r0, #4]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 80030da:	b003      	add	sp, #12
 80030dc:	bd30      	pop	{r4, r5, pc}
 80030de:	bf00      	nop
 80030e0:	200013b4 	.word	0x200013b4
 80030e4:	08007f18 	.word	0x08007f18
 80030e8:	2000000c 	.word	0x2000000c
 80030ec:	08007f50 	.word	0x08007f50
 80030f0:	08007f35 	.word	0x08007f35
 80030f4:	20000ef4 	.word	0x20000ef4
 80030f8:	20000ef8 	.word	0x20000ef8
 80030fc:	20000010 	.word	0x20000010
 8003100:	20000014 	.word	0x20000014

08003104 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003104:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8003106:	2305      	movs	r3, #5
 8003108:	2200      	movs	r2, #0
 800310a:	e9cd 3200 	strd	r3, r2, [sp]
 800310e:	4a03      	ldr	r2, [pc, #12]	; (800311c <ai_network_create+0x18>)
 8003110:	2301      	movs	r3, #1
 8003112:	f000 fc87 	bl	8003a24 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003116:	b003      	add	sp, #12
 8003118:	f85d fb04 	ldr.w	pc, [sp], #4
 800311c:	20000674 	.word	0x20000674

08003120 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8003120:	b910      	cbnz	r0, 8003128 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003122:	4802      	ldr	r0, [pc, #8]	; (800312c <ai_network_inputs_get+0xc>)
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <ai_network_inputs_get+0x10>)
 8003126:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003128:	f000 ba8e 	b.w	8003648 <ai_platform_inputs_get>
 800312c:	20000674 	.word	0x20000674
 8003130:	a1c00100 	.word	0xa1c00100

08003134 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8003134:	b910      	cbnz	r0, 800313c <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003136:	4802      	ldr	r0, [pc, #8]	; (8003140 <ai_network_outputs_get+0xc>)
 8003138:	4b02      	ldr	r3, [pc, #8]	; (8003144 <ai_network_outputs_get+0x10>)
 800313a:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800313c:	f000 bb78 	b.w	8003830 <ai_platform_outputs_get>
 8003140:	20000674 	.word	0x20000674
 8003144:	a1c00100 	.word	0xa1c00100

08003148 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8003148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800314a:	4607      	mov	r7, r0
 800314c:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800314e:	f000 fd49 	bl	8003be4 <ai_platform_network_init>
  if (!net_ctx) return false;
 8003152:	4604      	mov	r4, r0
 8003154:	2800      	cmp	r0, #0
 8003156:	d064      	beq.n	8003222 <ai_network_init+0xda>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8003158:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800315a:	4632      	mov	r2, r6
 800315c:	2101      	movs	r1, #1
 800315e:	a801      	add	r0, sp, #4
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8003160:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8003162:	f000 f933 	bl	80033cc <ai_platform_get_weights_map>
 8003166:	4605      	mov	r5, r0
 8003168:	2800      	cmp	r0, #0
 800316a:	d05c      	beq.n	8003226 <ai_network_init+0xde>
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800316c:	4a34      	ldr	r2, [pc, #208]	; (8003240 <ai_network_init+0xf8>)
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003174:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 8003176:	9b01      	ldr	r3, [sp, #4]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8003178:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800317c:	4a31      	ldr	r2, [pc, #196]	; (8003244 <ai_network_init+0xfc>)
 800317e:	6811      	ldr	r1, [r2, #0]
 8003180:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003184:	6011      	str	r1, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 38400);
 8003186:	f503 4116 	add.w	r1, r3, #38400	; 0x9600
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 38400);
 800318a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800318e:	4a2e      	ldr	r2, [pc, #184]	; (8003248 <ai_network_init+0x100>)
 8003190:	6811      	ldr	r1, [r2, #0]
 8003192:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003196:	6011      	str	r1, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 38528);
 8003198:	f503 4116 	add.w	r1, r3, #38400	; 0x9600
 800319c:	3180      	adds	r1, #128	; 0x80
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 38528);
 800319e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80031a2:	4a2a      	ldr	r2, [pc, #168]	; (800324c <ai_network_init+0x104>)
 80031a4:	6811      	ldr	r1, [r2, #0]
 80031a6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80031aa:	6011      	str	r1, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 40576);
 80031ac:	f503 411e 	add.w	r1, r3, #40448	; 0x9e00
 80031b0:	3180      	adds	r1, #128	; 0x80
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 40576);
 80031b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80031b6:	4a26      	ldr	r2, [pc, #152]	; (8003250 <ai_network_init+0x108>)
 80031b8:	6811      	ldr	r1, [r2, #0]
 80031ba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80031be:	6011      	str	r1, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 40640);
 80031c0:	f503 411e 	add.w	r1, r3, #40448	; 0x9e00
 80031c4:	31c0      	adds	r1, #192	; 0xc0
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 40640);
 80031c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80031ca:	4a22      	ldr	r2, [pc, #136]	; (8003254 <ai_network_init+0x10c>)
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 40768);
 80031cc:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80031d0:	6811      	ldr	r1, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 40768);
 80031d2:	3340      	adds	r3, #64	; 0x40
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 40768);
 80031d4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80031d8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80031dc:	6011      	str	r1, [r2, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80031de:	2300      	movs	r3, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80031e0:	4632      	mov	r2, r6
 80031e2:	2101      	movs	r1, #1
 80031e4:	a801      	add	r0, sp, #4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80031e6:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80031e8:	f000 f940 	bl	800346c <ai_platform_get_activations_map>
 80031ec:	4606      	mov	r6, r0
 80031ee:	b300      	cbz	r0, 8003232 <ai_network_init+0xea>
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 80031f0:	9b01      	ldr	r3, [sp, #4]
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <ai_network_init+0x110>)
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80031f4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 80031f8:	4a18      	ldr	r2, [pc, #96]	; (800325c <ai_network_init+0x114>)
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80031fa:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 128);
 80031fe:	4a18      	ldr	r2, [pc, #96]	; (8003260 <ai_network_init+0x118>)
 8003200:	f103 0180 	add.w	r1, r3, #128	; 0x80
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 128);
 8003204:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 8003208:	4a16      	ldr	r2, [pc, #88]	; (8003264 <ai_network_init+0x11c>)
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800320a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 64);
 800320e:	4a16      	ldr	r2, [pc, #88]	; (8003268 <ai_network_init+0x120>)
 8003210:	3340      	adds	r3, #64	; 0x40
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8003212:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003216:	4638      	mov	r0, r7
 8003218:	f000 fdf0 	bl	8003dfc <ai_platform_network_post_init>
 800321c:	4030      	ands	r0, r6
 800321e:	4028      	ands	r0, r5
 8003220:	b2c0      	uxtb	r0, r0

  return ok;
}
 8003222:	b003      	add	sp, #12
 8003224:	bdf0      	pop	{r4, r5, r6, r7, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003226:	2212      	movs	r2, #18
 8003228:	2130      	movs	r1, #48	; 0x30
 800322a:	4620      	mov	r0, r4
 800322c:	f000 fa06 	bl	800363c <ai_platform_network_set_error>
  return false;
 8003230:	e7d5      	b.n	80031de <ai_network_init+0x96>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003232:	2213      	movs	r2, #19
 8003234:	2130      	movs	r1, #48	; 0x30
 8003236:	4620      	mov	r0, r4
 8003238:	f000 fa00 	bl	800363c <ai_platform_network_set_error>
  return false;
 800323c:	e7eb      	b.n	8003216 <ai_network_init+0xce>
 800323e:	bf00      	nop
 8003240:	20000440 	.word	0x20000440
 8003244:	200003cc 	.word	0x200003cc
 8003248:	2000052c 	.word	0x2000052c
 800324c:	200004b8 	.word	0x200004b8
 8003250:	20000618 	.word	0x20000618
 8003254:	200005a4 	.word	0x200005a4
 8003258:	20000414 	.word	0x20000414
 800325c:	2000048c 	.word	0x2000048c
 8003260:	20000500 	.word	0x20000500
 8003264:	20000578 	.word	0x20000578
 8003268:	200005ec 	.word	0x200005ec

0800326c <ai_network_create_and_init>:
{
 800326c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003270:	4688      	mov	r8, r1
 8003272:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8003274:	2100      	movs	r1, #0
{
 8003276:	4606      	mov	r6, r0
 8003278:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800327a:	f7ff ff43 	bl	8003104 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 800327e:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8003282:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8003284:	d001      	beq.n	800328a <ai_network_create_and_init+0x1e>
    return err;
 8003286:	4620      	mov	r0, r4
 8003288:	e006      	b.n	8003298 <ai_network_create_and_init+0x2c>
    if (ai_network_data_params_get(&params) != true) {
 800328a:	4668      	mov	r0, sp
 800328c:	f000 f836 	bl	80032fc <ai_network_data_params_get>
 8003290:	b928      	cbnz	r0, 800329e <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8003292:	6830      	ldr	r0, [r6, #0]
 8003294:	f000 f958 	bl	8003548 <ai_platform_network_get_error>
}
 8003298:	b00f      	add	sp, #60	; 0x3c
 800329a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 800329e:	f1b8 0f00 	cmp.w	r8, #0
 80032a2:	d11a      	bne.n	80032da <ai_network_create_and_init+0x6e>
    if (weights) {
 80032a4:	bb3f      	cbnz	r7, 80032f6 <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 80032a6:	6830      	ldr	r0, [r6, #0]
 80032a8:	4669      	mov	r1, sp
 80032aa:	f7ff ff4d 	bl	8003148 <ai_network_init>
 80032ae:	b928      	cbnz	r0, 80032bc <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 80032b0:	6830      	ldr	r0, [r6, #0]
 80032b2:	f000 f949 	bl	8003548 <ai_platform_network_get_error>
 80032b6:	fa5f f980 	uxtb.w	r9, r0
 80032ba:	4604      	mov	r4, r0
    return err;
 80032bc:	f369 0407 	bfi	r4, r9, #0, #8
 80032c0:	e7e1      	b.n	8003286 <ai_network_create_and_init+0x1a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80032c2:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 80032c6:	4629      	mov	r1, r5
 80032c8:	a803      	add	r0, sp, #12
 80032ca:	f000 f869 	bl	80033a0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80032ce:	3501      	adds	r5, #1
 80032d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80032d4:	42ab      	cmp	r3, r5
 80032d6:	dcf4      	bgt.n	80032c2 <ai_network_create_and_init+0x56>
 80032d8:	e7e4      	b.n	80032a4 <ai_network_create_and_init+0x38>
 80032da:	464d      	mov	r5, r9
 80032dc:	e7f8      	b.n	80032d0 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80032de:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 80032e2:	4629      	mov	r1, r5
 80032e4:	a801      	add	r0, sp, #4
 80032e6:	f000 f85b 	bl	80033a0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80032ea:	3501      	adds	r5, #1
 80032ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80032f0:	42ab      	cmp	r3, r5
 80032f2:	dcf4      	bgt.n	80032de <ai_network_create_and_init+0x72>
 80032f4:	e7d7      	b.n	80032a6 <ai_network_create_and_init+0x3a>
 80032f6:	2500      	movs	r5, #0
 80032f8:	e7f8      	b.n	80032ec <ai_network_create_and_init+0x80>
	...

080032fc <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80032fc:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80032fe:	4603      	mov	r3, r0
{
 8003300:	b085      	sub	sp, #20
  if (!params) return false;
 8003302:	b170      	cbz	r0, 8003322 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8003304:	4c08      	ldr	r4, [pc, #32]	; (8003328 <ai_network_data_params_get+0x2c>)
 8003306:	e894 0003 	ldmia.w	r4, {r0, r1}
 800330a:	466a      	mov	r2, sp
 800330c:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003310:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003314:	ad02      	add	r5, sp, #8
 8003316:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800331a:	4629      	mov	r1, r5
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f8f7 	bl	8003510 <ai_platform_bind_network_params>
}
 8003322:	b005      	add	sp, #20
 8003324:	bd30      	pop	{r4, r5, pc}
 8003326:	bf00      	nop
 8003328:	08007ea0 	.word	0x08007ea0

0800332c <ai_buffer_get_size>:
 800332c:	b358      	cbz	r0, 8003386 <ai_buffer_get_size+0x5a>
 800332e:	b430      	push	{r4, r5}
 8003330:	6803      	ldr	r3, [r0, #0]
 8003332:	4d15      	ldr	r5, [pc, #84]	; (8003388 <ai_buffer_get_size+0x5c>)
 8003334:	6984      	ldr	r4, [r0, #24]
 8003336:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800333a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800333e:	42ab      	cmp	r3, r5
 8003340:	6862      	ldr	r2, [r4, #4]
 8003342:	d01a      	beq.n	800337a <ai_buffer_get_size+0x4e>
 8003344:	7d03      	ldrb	r3, [r0, #20]
 8003346:	6941      	ldr	r1, [r0, #20]
 8003348:	f1a3 0301 	sub.w	r3, r3, #1
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8003356:	428b      	cmp	r3, r1
 8003358:	da0b      	bge.n	8003372 <ai_buffer_get_size+0x46>
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <ai_buffer_get_size+0x38>
 800335e:	2902      	cmp	r1, #2
 8003360:	d007      	beq.n	8003372 <ai_buffer_get_size+0x46>
 8003362:	2302      	movs	r3, #2
 8003364:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003368:	3301      	adds	r3, #1
 800336a:	428b      	cmp	r3, r1
 800336c:	fb00 f202 	mul.w	r2, r0, r2
 8003370:	d1f3      	bne.n	800335a <ai_buffer_get_size+0x2e>
 8003372:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003376:	bc30      	pop	{r4, r5}
 8003378:	4770      	bx	lr
 800337a:	2900      	cmp	r1, #0
 800337c:	d0e2      	beq.n	8003344 <ai_buffer_get_size+0x18>
 800337e:	321f      	adds	r2, #31
 8003380:	f022 021f 	bic.w	r2, r2, #31
 8003384:	e7de      	b.n	8003344 <ai_buffer_get_size+0x18>
 8003386:	4770      	bx	lr
 8003388:	000400c0 	.word	0x000400c0

0800338c <ai_buffer_array_sane>:
 800338c:	b138      	cbz	r0, 800339e <ai_buffer_array_sane+0x12>
 800338e:	6843      	ldr	r3, [r0, #4]
 8003390:	b123      	cbz	r3, 800339c <ai_buffer_array_sane+0x10>
 8003392:	8840      	ldrh	r0, [r0, #2]
 8003394:	3000      	adds	r0, #0
 8003396:	bf18      	it	ne
 8003398:	2001      	movne	r0, #1
 800339a:	4770      	bx	lr
 800339c:	4618      	mov	r0, r3
 800339e:	4770      	bx	lr

080033a0 <ai_buffer_array_item_set_address>:
 80033a0:	b120      	cbz	r0, 80033ac <ai_buffer_array_item_set_address+0xc>
 80033a2:	6843      	ldr	r3, [r0, #4]
 80033a4:	b11b      	cbz	r3, 80033ae <ai_buffer_array_item_set_address+0xe>
 80033a6:	8840      	ldrh	r0, [r0, #2]
 80033a8:	b918      	cbnz	r0, 80033b2 <ai_buffer_array_item_set_address+0x12>
 80033aa:	4770      	bx	lr
 80033ac:	4770      	bx	lr
 80033ae:	4618      	mov	r0, r3
 80033b0:	4770      	bx	lr
 80033b2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80033b6:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 80033ba:	d0f7      	beq.n	80033ac <ai_buffer_array_item_set_address+0xc>
 80033bc:	6042      	str	r2, [r0, #4]
 80033be:	2001      	movs	r0, #1
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop

080033c4 <_ai_platform_acquire_crc>:
 80033c4:	2001      	movs	r0, #1
 80033c6:	4770      	bx	lr

080033c8 <_ai_platform_release_crc>:
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <ai_platform_get_weights_map>:
 80033cc:	b192      	cbz	r2, 80033f4 <ai_platform_get_weights_map+0x28>
 80033ce:	b188      	cbz	r0, 80033f4 <ai_platform_get_weights_map+0x28>
 80033d0:	b181      	cbz	r1, 80033f4 <ai_platform_get_weights_map+0x28>
 80033d2:	b570      	push	{r4, r5, r6, lr}
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <ai_platform_get_weights_map+0x9c>)
 80033d6:	6814      	ldr	r4, [r2, #0]
 80033d8:	429c      	cmp	r4, r3
 80033da:	d00d      	beq.n	80033f8 <ai_platform_get_weights_map+0x2c>
 80033dc:	6854      	ldr	r4, [r2, #4]
 80033de:	b194      	cbz	r4, 8003406 <ai_platform_get_weights_map+0x3a>
 80033e0:	6825      	ldr	r5, [r4, #0]
 80033e2:	429d      	cmp	r5, r3
 80033e4:	d027      	beq.n	8003436 <ai_platform_get_weights_map+0x6a>
 80033e6:	6004      	str	r4, [r0, #0]
 80033e8:	f1a1 0001 	sub.w	r0, r1, #1
 80033ec:	fab0 f080 	clz	r0, r0
 80033f0:	0940      	lsrs	r0, r0, #5
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	2000      	movs	r0, #0
 80033f6:	4770      	bx	lr
 80033f8:	4605      	mov	r5, r0
 80033fa:	1d10      	adds	r0, r2, #4
 80033fc:	4616      	mov	r6, r2
 80033fe:	460c      	mov	r4, r1
 8003400:	f7ff ffc4 	bl	800338c <ai_buffer_array_sane>
 8003404:	b908      	cbnz	r0, 800340a <ai_platform_get_weights_map+0x3e>
 8003406:	2000      	movs	r0, #0
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	88f3      	ldrh	r3, [r6, #6]
 800340c:	429c      	cmp	r4, r3
 800340e:	d1fa      	bne.n	8003406 <ai_platform_get_weights_map+0x3a>
 8003410:	2100      	movs	r1, #0
 8003412:	1f2b      	subs	r3, r5, #4
 8003414:	4608      	mov	r0, r1
 8003416:	68b2      	ldr	r2, [r6, #8]
 8003418:	440a      	add	r2, r1
 800341a:	311c      	adds	r1, #28
 800341c:	6852      	ldr	r2, [r2, #4]
 800341e:	b12a      	cbz	r2, 800342c <ai_platform_get_weights_map+0x60>
 8003420:	3001      	adds	r0, #1
 8003422:	4284      	cmp	r4, r0
 8003424:	f843 2f04 	str.w	r2, [r3, #4]!
 8003428:	d1f5      	bne.n	8003416 <ai_platform_get_weights_map+0x4a>
 800342a:	4620      	mov	r0, r4
 800342c:	1a20      	subs	r0, r4, r0
 800342e:	fab0 f080 	clz	r0, r0
 8003432:	0940      	lsrs	r0, r0, #5
 8003434:	bd70      	pop	{r4, r5, r6, pc}
 8003436:	6863      	ldr	r3, [r4, #4]
 8003438:	42ab      	cmp	r3, r5
 800343a:	f104 0404 	add.w	r4, r4, #4
 800343e:	d0e2      	beq.n	8003406 <ai_platform_get_weights_map+0x3a>
 8003440:	3804      	subs	r0, #4
 8003442:	4626      	mov	r6, r4
 8003444:	2200      	movs	r2, #0
 8003446:	e003      	b.n	8003450 <ai_platform_get_weights_map+0x84>
 8003448:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800344c:	42ab      	cmp	r3, r5
 800344e:	d0da      	beq.n	8003406 <ai_platform_get_weights_map+0x3a>
 8003450:	3201      	adds	r2, #1
 8003452:	4291      	cmp	r1, r2
 8003454:	f840 3f04 	str.w	r3, [r0, #4]!
 8003458:	d1f6      	bne.n	8003448 <ai_platform_get_weights_map+0x7c>
 800345a:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800345e:	4b02      	ldr	r3, [pc, #8]	; (8003468 <ai_platform_get_weights_map+0x9c>)
 8003460:	429a      	cmp	r2, r3
 8003462:	d1d0      	bne.n	8003406 <ai_platform_get_weights_map+0x3a>
 8003464:	2001      	movs	r0, #1
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	a1facade 	.word	0xa1facade

0800346c <ai_platform_get_activations_map>:
 800346c:	b192      	cbz	r2, 8003494 <ai_platform_get_activations_map+0x28>
 800346e:	b188      	cbz	r0, 8003494 <ai_platform_get_activations_map+0x28>
 8003470:	b181      	cbz	r1, 8003494 <ai_platform_get_activations_map+0x28>
 8003472:	b570      	push	{r4, r5, r6, lr}
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <ai_platform_get_activations_map+0xa0>)
 8003476:	6814      	ldr	r4, [r2, #0]
 8003478:	429c      	cmp	r4, r3
 800347a:	d00d      	beq.n	8003498 <ai_platform_get_activations_map+0x2c>
 800347c:	6a14      	ldr	r4, [r2, #32]
 800347e:	b19c      	cbz	r4, 80034a8 <ai_platform_get_activations_map+0x3c>
 8003480:	6825      	ldr	r5, [r4, #0]
 8003482:	429d      	cmp	r5, r3
 8003484:	d028      	beq.n	80034d8 <ai_platform_get_activations_map+0x6c>
 8003486:	6004      	str	r4, [r0, #0]
 8003488:	f1a1 0001 	sub.w	r0, r1, #1
 800348c:	fab0 f080 	clz	r0, r0
 8003490:	0940      	lsrs	r0, r0, #5
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	2000      	movs	r0, #0
 8003496:	4770      	bx	lr
 8003498:	4605      	mov	r5, r0
 800349a:	f102 000c 	add.w	r0, r2, #12
 800349e:	4616      	mov	r6, r2
 80034a0:	460c      	mov	r4, r1
 80034a2:	f7ff ff73 	bl	800338c <ai_buffer_array_sane>
 80034a6:	b908      	cbnz	r0, 80034ac <ai_platform_get_activations_map+0x40>
 80034a8:	2000      	movs	r0, #0
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	89f3      	ldrh	r3, [r6, #14]
 80034ae:	429c      	cmp	r4, r3
 80034b0:	d1fa      	bne.n	80034a8 <ai_platform_get_activations_map+0x3c>
 80034b2:	2100      	movs	r1, #0
 80034b4:	1f2b      	subs	r3, r5, #4
 80034b6:	4608      	mov	r0, r1
 80034b8:	6932      	ldr	r2, [r6, #16]
 80034ba:	440a      	add	r2, r1
 80034bc:	311c      	adds	r1, #28
 80034be:	6852      	ldr	r2, [r2, #4]
 80034c0:	b12a      	cbz	r2, 80034ce <ai_platform_get_activations_map+0x62>
 80034c2:	3001      	adds	r0, #1
 80034c4:	4284      	cmp	r4, r0
 80034c6:	f843 2f04 	str.w	r2, [r3, #4]!
 80034ca:	d1f5      	bne.n	80034b8 <ai_platform_get_activations_map+0x4c>
 80034cc:	4620      	mov	r0, r4
 80034ce:	1a20      	subs	r0, r4, r0
 80034d0:	fab0 f080 	clz	r0, r0
 80034d4:	0940      	lsrs	r0, r0, #5
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	6863      	ldr	r3, [r4, #4]
 80034da:	42ab      	cmp	r3, r5
 80034dc:	f104 0404 	add.w	r4, r4, #4
 80034e0:	d0e2      	beq.n	80034a8 <ai_platform_get_activations_map+0x3c>
 80034e2:	3804      	subs	r0, #4
 80034e4:	4626      	mov	r6, r4
 80034e6:	2200      	movs	r2, #0
 80034e8:	e003      	b.n	80034f2 <ai_platform_get_activations_map+0x86>
 80034ea:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80034ee:	42ab      	cmp	r3, r5
 80034f0:	d0da      	beq.n	80034a8 <ai_platform_get_activations_map+0x3c>
 80034f2:	3201      	adds	r2, #1
 80034f4:	4291      	cmp	r1, r2
 80034f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80034fa:	d1f6      	bne.n	80034ea <ai_platform_get_activations_map+0x7e>
 80034fc:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8003500:	4b02      	ldr	r3, [pc, #8]	; (800350c <ai_platform_get_activations_map+0xa0>)
 8003502:	429a      	cmp	r2, r3
 8003504:	d1d0      	bne.n	80034a8 <ai_platform_get_activations_map+0x3c>
 8003506:	2001      	movs	r0, #1
 8003508:	bd70      	pop	{r4, r5, r6, pc}
 800350a:	bf00      	nop
 800350c:	a1facade 	.word	0xa1facade

08003510 <ai_platform_bind_network_params>:
 8003510:	4603      	mov	r3, r0
 8003512:	b190      	cbz	r0, 800353a <ai_platform_bind_network_params+0x2a>
 8003514:	b1a1      	cbz	r1, 8003540 <ai_platform_bind_network_params+0x30>
 8003516:	b18a      	cbz	r2, 800353c <ai_platform_bind_network_params+0x2c>
 8003518:	b410      	push	{r4}
 800351a:	4604      	mov	r4, r0
 800351c:	4809      	ldr	r0, [pc, #36]	; (8003544 <ai_platform_bind_network_params+0x34>)
 800351e:	f844 0b04 	str.w	r0, [r4], #4
 8003522:	c903      	ldmia	r1, {r0, r1}
 8003524:	e884 0003 	stmia.w	r4, {r0, r1}
 8003528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800352c:	330c      	adds	r3, #12
 800352e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003532:	2001      	movs	r0, #1
 8003534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	4770      	bx	lr
 800353c:	4610      	mov	r0, r2
 800353e:	4770      	bx	lr
 8003540:	4608      	mov	r0, r1
 8003542:	4770      	bx	lr
 8003544:	a1facade 	.word	0xa1facade

08003548 <ai_platform_network_get_error>:
 8003548:	b510      	push	{r4, lr}
 800354a:	b120      	cbz	r0, 8003556 <ai_platform_network_get_error+0xe>
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <ai_platform_network_get_error+0xd0>)
 800354e:	6802      	ldr	r2, [r0, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	4604      	mov	r4, r0
 8003554:	d02e      	beq.n	80035b4 <ai_platform_network_get_error+0x6c>
 8003556:	4a31      	ldr	r2, [pc, #196]	; (800361c <ai_platform_network_get_error+0xd4>)
 8003558:	6813      	ldr	r3, [r2, #0]
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	f7ff ff30 	bl	80033c4 <_ai_platform_acquire_crc>
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <ai_platform_network_get_error+0xd8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003570:	d00d      	beq.n	800358e <ai_platform_network_get_error+0x46>
 8003572:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <ai_platform_network_get_error+0xdc>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2a00      	cmp	r2, #0
 800357c:	d1fc      	bne.n	8003578 <ai_platform_network_get_error+0x30>
 800357e:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <ai_platform_network_get_error+0xe0>)
 8003580:	4a2a      	ldr	r2, [pc, #168]	; (800362c <ai_platform_network_get_error+0xe4>)
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <ai_platform_network_get_error+0xe8>)
 8003588:	429a      	cmp	r2, r3
 800358a:	d00d      	beq.n	80035a8 <ai_platform_network_get_error+0x60>
 800358c:	e7fe      	b.n	800358c <ai_platform_network_get_error+0x44>
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <ai_platform_network_get_error+0xec>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	2a00      	cmp	r2, #0
 8003598:	d1fc      	bne.n	8003594 <ai_platform_network_get_error+0x4c>
 800359a:	4b27      	ldr	r3, [pc, #156]	; (8003638 <ai_platform_network_get_error+0xf0>)
 800359c:	4a23      	ldr	r2, [pc, #140]	; (800362c <ai_platform_network_get_error+0xe4>)
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <ai_platform_network_get_error+0xe8>)
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d104      	bne.n	80035b2 <ai_platform_network_get_error+0x6a>
 80035a8:	f7ff ff0e 	bl	80033c8 <_ai_platform_release_crc>
 80035ac:	f241 0010 	movw	r0, #4112	; 0x1010
 80035b0:	bd10      	pop	{r4, pc}
 80035b2:	e7fe      	b.n	80035b2 <ai_platform_network_get_error+0x6a>
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <ai_platform_network_get_error+0xd4>)
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	f7ff ff01 	bl	80033c4 <_ai_platform_acquire_crc>
 80035c2:	4b17      	ldr	r3, [pc, #92]	; (8003620 <ai_platform_network_get_error+0xd8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ce:	d00d      	beq.n	80035ec <ai_platform_network_get_error+0xa4>
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <ai_platform_network_get_error+0xdc>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2a00      	cmp	r2, #0
 80035da:	d1fc      	bne.n	80035d6 <ai_platform_network_get_error+0x8e>
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <ai_platform_network_get_error+0xe0>)
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <ai_platform_network_get_error+0xe4>)
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <ai_platform_network_get_error+0xe8>)
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d00e      	beq.n	8003608 <ai_platform_network_get_error+0xc0>
 80035ea:	e7fe      	b.n	80035ea <ai_platform_network_get_error+0xa2>
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <ai_platform_network_get_error+0xec>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	2a00      	cmp	r2, #0
 80035f6:	d1fc      	bne.n	80035f2 <ai_platform_network_get_error+0xaa>
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <ai_platform_network_get_error+0xf0>)
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <ai_platform_network_get_error+0xe4>)
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <ai_platform_network_get_error+0xe8>)
 8003602:	429a      	cmp	r2, r3
 8003604:	d000      	beq.n	8003608 <ai_platform_network_get_error+0xc0>
 8003606:	e7fe      	b.n	8003606 <ai_platform_network_get_error+0xbe>
 8003608:	f7ff fede 	bl	80033c8 <_ai_platform_release_crc>
 800360c:	f104 0010 	add.w	r0, r4, #16
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	f000 bc88 	b.w	8003f28 <core_get_error>
 8003618:	a1c00100 	.word	0xa1c00100
 800361c:	e0002000 	.word	0xe0002000
 8003620:	e0042000 	.word	0xe0042000
 8003624:	58024c08 	.word	0x58024c08
 8003628:	58024c00 	.word	0x58024c00
 800362c:	f407a5c2 	.word	0xf407a5c2
 8003630:	b5e8b5cd 	.word	0xb5e8b5cd
 8003634:	40023008 	.word	0x40023008
 8003638:	40023000 	.word	0x40023000

0800363c <ai_platform_network_set_error>:
 800363c:	b110      	cbz	r0, 8003644 <ai_platform_network_set_error+0x8>
 800363e:	3010      	adds	r0, #16
 8003640:	f000 bc78 	b.w	8003f34 <core_set_error>
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <ai_platform_inputs_get>:
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	b085      	sub	sp, #20
 800364e:	2800      	cmp	r0, #0
 8003650:	f000 80a1 	beq.w	8003796 <ai_platform_inputs_get+0x14e>
 8003654:	4b6d      	ldr	r3, [pc, #436]	; (800380c <ai_platform_inputs_get+0x1c4>)
 8003656:	6802      	ldr	r2, [r0, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	4607      	mov	r7, r0
 800365c:	f040 809b 	bne.w	8003796 <ai_platform_inputs_get+0x14e>
 8003660:	4a6b      	ldr	r2, [pc, #428]	; (8003810 <ai_platform_inputs_get+0x1c8>)
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	468b      	mov	fp, r1
 800366c:	f7ff feaa 	bl	80033c4 <_ai_platform_acquire_crc>
 8003670:	4b68      	ldr	r3, [pc, #416]	; (8003814 <ai_platform_inputs_get+0x1cc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d00d      	beq.n	800369a <ai_platform_inputs_get+0x52>
 800367e:	4b66      	ldr	r3, [pc, #408]	; (8003818 <ai_platform_inputs_get+0x1d0>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	2a00      	cmp	r2, #0
 8003688:	d1fc      	bne.n	8003684 <ai_platform_inputs_get+0x3c>
 800368a:	4b64      	ldr	r3, [pc, #400]	; (800381c <ai_platform_inputs_get+0x1d4>)
 800368c:	4a64      	ldr	r2, [pc, #400]	; (8003820 <ai_platform_inputs_get+0x1d8>)
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b64      	ldr	r3, [pc, #400]	; (8003824 <ai_platform_inputs_get+0x1dc>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d00d      	beq.n	80036b4 <ai_platform_inputs_get+0x6c>
 8003698:	e7fe      	b.n	8003698 <ai_platform_inputs_get+0x50>
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <ai_platform_inputs_get+0x1e0>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2a00      	cmp	r2, #0
 80036a4:	d1fc      	bne.n	80036a0 <ai_platform_inputs_get+0x58>
 80036a6:	4b61      	ldr	r3, [pc, #388]	; (800382c <ai_platform_inputs_get+0x1e4>)
 80036a8:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <ai_platform_inputs_get+0x1d8>)
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <ai_platform_inputs_get+0x1dc>)
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d16f      	bne.n	8003794 <ai_platform_inputs_get+0x14c>
 80036b4:	f7ff fe88 	bl	80033c8 <_ai_platform_release_crc>
 80036b8:	f1bb 0f00 	cmp.w	fp, #0
 80036bc:	d002      	beq.n	80036c4 <ai_platform_inputs_get+0x7c>
 80036be:	2300      	movs	r3, #0
 80036c0:	f8ab 3000 	strh.w	r3, [fp]
 80036c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8081 	beq.w	80037ce <ai_platform_inputs_get+0x186>
 80036cc:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80036ce:	2e00      	cmp	r6, #0
 80036d0:	d07d      	beq.n	80037ce <ai_platform_inputs_get+0x186>
 80036d2:	8833      	ldrh	r3, [r6, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d07a      	beq.n	80037ce <ai_platform_inputs_get+0x186>
 80036d8:	6873      	ldr	r3, [r6, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d077      	beq.n	80037ce <ai_platform_inputs_get+0x186>
 80036de:	681d      	ldr	r5, [r3, #0]
 80036e0:	2d00      	cmp	r5, #0
 80036e2:	d074      	beq.n	80037ce <ai_platform_inputs_get+0x186>
 80036e4:	f04f 0800 	mov.w	r8, #0
 80036e8:	f8cd b008 	str.w	fp, [sp, #8]
 80036ec:	46c1      	mov	r9, r8
 80036ee:	46bb      	mov	fp, r7
 80036f0:	68b0      	ldr	r0, [r6, #8]
 80036f2:	69aa      	ldr	r2, [r5, #24]
 80036f4:	68ab      	ldr	r3, [r5, #8]
 80036f6:	6844      	ldr	r4, [r0, #4]
 80036f8:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80036fc:	6810      	ldr	r0, [r2, #0]
 80036fe:	68ef      	ldr	r7, [r5, #12]
 8003700:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003704:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	9203      	str	r2, [sp, #12]
 800370c:	f001 fa18 	bl	8004b40 <ai_array_to_buffer_fmt>
 8003710:	9a03      	ldr	r2, [sp, #12]
 8003712:	4601      	mov	r1, r0
 8003714:	69a8      	ldr	r0, [r5, #24]
 8003716:	eb0a 0302 	add.w	r3, sl, r2
 800371a:	4444      	add	r4, r8
 800371c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8003720:	b16b      	cbz	r3, 800373e <ai_platform_inputs_get+0xf6>
 8003722:	2000      	movs	r0, #0
 8003724:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8003728:	6828      	ldr	r0, [r5, #0]
 800372a:	6058      	str	r0, [r3, #4]
 800372c:	2800      	cmp	r0, #0
 800372e:	d058      	beq.n	80037e2 <ai_platform_inputs_get+0x19a>
 8003730:	8840      	ldrh	r0, [r0, #2]
 8003732:	2800      	cmp	r0, #0
 8003734:	d055      	beq.n	80037e2 <ai_platform_inputs_get+0x19a>
 8003736:	2001      	movs	r0, #1
 8003738:	f84a 0002 	str.w	r0, [sl, r2]
 800373c:	69a8      	ldr	r0, [r5, #24]
 800373e:	6842      	ldr	r2, [r0, #4]
 8003740:	6122      	str	r2, [r4, #16]
 8003742:	f04f 0001 	mov.w	r0, #1
 8003746:	7520      	strb	r0, [r4, #20]
 8003748:	9a01      	ldr	r2, [sp, #4]
 800374a:	6960      	ldr	r0, [r4, #20]
 800374c:	60a3      	str	r3, [r4, #8]
 800374e:	f362 201f 	bfi	r0, r2, #8, #24
 8003752:	e9c4 1e00 	strd	r1, lr, [r4]
 8003756:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800375a:	2300      	movs	r3, #0
 800375c:	60e3      	str	r3, [r4, #12]
 800375e:	8830      	ldrh	r0, [r6, #0]
 8003760:	f109 0301 	add.w	r3, r9, #1
 8003764:	4283      	cmp	r3, r0
 8003766:	4699      	mov	r9, r3
 8003768:	b29a      	uxth	r2, r3
 800376a:	d207      	bcs.n	800377c <ai_platform_inputs_get+0x134>
 800376c:	6870      	ldr	r0, [r6, #4]
 800376e:	b128      	cbz	r0, 800377c <ai_platform_inputs_get+0x134>
 8003770:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003774:	f108 081c 	add.w	r8, r8, #28
 8003778:	2d00      	cmp	r5, #0
 800377a:	d1b9      	bne.n	80036f0 <ai_platform_inputs_get+0xa8>
 800377c:	465f      	mov	r7, fp
 800377e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003782:	b322      	cbz	r2, 80037ce <ai_platform_inputs_get+0x186>
 8003784:	68b3      	ldr	r3, [r6, #8]
 8003786:	6858      	ldr	r0, [r3, #4]
 8003788:	f1bb 0f00 	cmp.w	fp, #0
 800378c:	d026      	beq.n	80037dc <ai_platform_inputs_get+0x194>
 800378e:	f8ab 2000 	strh.w	r2, [fp]
 8003792:	e023      	b.n	80037dc <ai_platform_inputs_get+0x194>
 8003794:	e7fe      	b.n	8003794 <ai_platform_inputs_get+0x14c>
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <ai_platform_inputs_get+0x1c8>)
 8003798:	6813      	ldr	r3, [r2, #0]
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	f7ff fe10 	bl	80033c4 <_ai_platform_acquire_crc>
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <ai_platform_inputs_get+0x1cc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b0:	d01a      	beq.n	80037e8 <ai_platform_inputs_get+0x1a0>
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <ai_platform_inputs_get+0x1d0>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	d1fc      	bne.n	80037b8 <ai_platform_inputs_get+0x170>
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <ai_platform_inputs_get+0x1d4>)
 80037c0:	4a17      	ldr	r2, [pc, #92]	; (8003820 <ai_platform_inputs_get+0x1d8>)
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b17      	ldr	r3, [pc, #92]	; (8003824 <ai_platform_inputs_get+0x1dc>)
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d01b      	beq.n	8003804 <ai_platform_inputs_get+0x1bc>
 80037cc:	e7fe      	b.n	80037cc <ai_platform_inputs_get+0x184>
 80037ce:	f107 0010 	add.w	r0, r7, #16
 80037d2:	2218      	movs	r2, #24
 80037d4:	2111      	movs	r1, #17
 80037d6:	f000 fbad 	bl	8003f34 <core_set_error>
 80037da:	2000      	movs	r0, #0
 80037dc:	b005      	add	sp, #20
 80037de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e2:	69a8      	ldr	r0, [r5, #24]
 80037e4:	2300      	movs	r3, #0
 80037e6:	e7aa      	b.n	800373e <ai_platform_inputs_get+0xf6>
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <ai_platform_inputs_get+0x1e0>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2a00      	cmp	r2, #0
 80037f2:	d1fc      	bne.n	80037ee <ai_platform_inputs_get+0x1a6>
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <ai_platform_inputs_get+0x1e4>)
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <ai_platform_inputs_get+0x1d8>)
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <ai_platform_inputs_get+0x1dc>)
 80037fe:	429a      	cmp	r2, r3
 8003800:	d000      	beq.n	8003804 <ai_platform_inputs_get+0x1bc>
 8003802:	e7fe      	b.n	8003802 <ai_platform_inputs_get+0x1ba>
 8003804:	f7ff fde0 	bl	80033c8 <_ai_platform_release_crc>
 8003808:	2000      	movs	r0, #0
 800380a:	e7e7      	b.n	80037dc <ai_platform_inputs_get+0x194>
 800380c:	a1c00100 	.word	0xa1c00100
 8003810:	e0002000 	.word	0xe0002000
 8003814:	e0042000 	.word	0xe0042000
 8003818:	58024c08 	.word	0x58024c08
 800381c:	58024c00 	.word	0x58024c00
 8003820:	f407a5c2 	.word	0xf407a5c2
 8003824:	b5e8b5cd 	.word	0xb5e8b5cd
 8003828:	40023008 	.word	0x40023008
 800382c:	40023000 	.word	0x40023000

08003830 <ai_platform_outputs_get>:
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	b085      	sub	sp, #20
 8003836:	2800      	cmp	r0, #0
 8003838:	f000 80a9 	beq.w	800398e <ai_platform_outputs_get+0x15e>
 800383c:	4b70      	ldr	r3, [pc, #448]	; (8003a00 <ai_platform_outputs_get+0x1d0>)
 800383e:	6802      	ldr	r2, [r0, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	4607      	mov	r7, r0
 8003844:	f040 80a3 	bne.w	800398e <ai_platform_outputs_get+0x15e>
 8003848:	4a6e      	ldr	r2, [pc, #440]	; (8003a04 <ai_platform_outputs_get+0x1d4>)
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	468b      	mov	fp, r1
 8003854:	f7ff fdb6 	bl	80033c4 <_ai_platform_acquire_crc>
 8003858:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <ai_platform_outputs_get+0x1d8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d00d      	beq.n	8003882 <ai_platform_outputs_get+0x52>
 8003866:	4b69      	ldr	r3, [pc, #420]	; (8003a0c <ai_platform_outputs_get+0x1dc>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	2a00      	cmp	r2, #0
 8003870:	d1fc      	bne.n	800386c <ai_platform_outputs_get+0x3c>
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <ai_platform_outputs_get+0x1e0>)
 8003874:	4a67      	ldr	r2, [pc, #412]	; (8003a14 <ai_platform_outputs_get+0x1e4>)
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b67      	ldr	r3, [pc, #412]	; (8003a18 <ai_platform_outputs_get+0x1e8>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d00d      	beq.n	800389c <ai_platform_outputs_get+0x6c>
 8003880:	e7fe      	b.n	8003880 <ai_platform_outputs_get+0x50>
 8003882:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <ai_platform_outputs_get+0x1ec>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2a00      	cmp	r2, #0
 800388c:	d1fc      	bne.n	8003888 <ai_platform_outputs_get+0x58>
 800388e:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <ai_platform_outputs_get+0x1f0>)
 8003890:	4a60      	ldr	r2, [pc, #384]	; (8003a14 <ai_platform_outputs_get+0x1e4>)
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b60      	ldr	r3, [pc, #384]	; (8003a18 <ai_platform_outputs_get+0x1e8>)
 8003898:	429a      	cmp	r2, r3
 800389a:	d177      	bne.n	800398c <ai_platform_outputs_get+0x15c>
 800389c:	f7ff fd94 	bl	80033c8 <_ai_platform_release_crc>
 80038a0:	f1bb 0f00 	cmp.w	fp, #0
 80038a4:	d002      	beq.n	80038ac <ai_platform_outputs_get+0x7c>
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8ab 3000 	strh.w	r3, [fp]
 80038ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	f240 809a 	bls.w	80039e8 <ai_platform_outputs_get+0x1b8>
 80038b4:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80038b6:	f116 0f0c 	cmn.w	r6, #12
 80038ba:	f000 8095 	beq.w	80039e8 <ai_platform_outputs_get+0x1b8>
 80038be:	89b3      	ldrh	r3, [r6, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8091 	beq.w	80039e8 <ai_platform_outputs_get+0x1b8>
 80038c6:	6933      	ldr	r3, [r6, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 808d 	beq.w	80039e8 <ai_platform_outputs_get+0x1b8>
 80038ce:	681d      	ldr	r5, [r3, #0]
 80038d0:	2d00      	cmp	r5, #0
 80038d2:	f000 8089 	beq.w	80039e8 <ai_platform_outputs_get+0x1b8>
 80038d6:	f04f 0800 	mov.w	r8, #0
 80038da:	f8cd b008 	str.w	fp, [sp, #8]
 80038de:	46c1      	mov	r9, r8
 80038e0:	46bb      	mov	fp, r7
 80038e2:	6970      	ldr	r0, [r6, #20]
 80038e4:	69aa      	ldr	r2, [r5, #24]
 80038e6:	68ab      	ldr	r3, [r5, #8]
 80038e8:	6844      	ldr	r4, [r0, #4]
 80038ea:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80038ee:	6810      	ldr	r0, [r2, #0]
 80038f0:	68ef      	ldr	r7, [r5, #12]
 80038f2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80038f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	9203      	str	r2, [sp, #12]
 80038fe:	f001 f91f 	bl	8004b40 <ai_array_to_buffer_fmt>
 8003902:	9a03      	ldr	r2, [sp, #12]
 8003904:	4601      	mov	r1, r0
 8003906:	69a8      	ldr	r0, [r5, #24]
 8003908:	eb0a 0302 	add.w	r3, sl, r2
 800390c:	4444      	add	r4, r8
 800390e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8003912:	b16b      	cbz	r3, 8003930 <ai_platform_outputs_get+0x100>
 8003914:	2000      	movs	r0, #0
 8003916:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800391a:	6828      	ldr	r0, [r5, #0]
 800391c:	6058      	str	r0, [r3, #4]
 800391e:	2800      	cmp	r0, #0
 8003920:	d051      	beq.n	80039c6 <ai_platform_outputs_get+0x196>
 8003922:	8840      	ldrh	r0, [r0, #2]
 8003924:	2800      	cmp	r0, #0
 8003926:	d04e      	beq.n	80039c6 <ai_platform_outputs_get+0x196>
 8003928:	2001      	movs	r0, #1
 800392a:	f84a 0002 	str.w	r0, [sl, r2]
 800392e:	69a8      	ldr	r0, [r5, #24]
 8003930:	6842      	ldr	r2, [r0, #4]
 8003932:	6122      	str	r2, [r4, #16]
 8003934:	f04f 0001 	mov.w	r0, #1
 8003938:	7520      	strb	r0, [r4, #20]
 800393a:	9a01      	ldr	r2, [sp, #4]
 800393c:	6960      	ldr	r0, [r4, #20]
 800393e:	60a3      	str	r3, [r4, #8]
 8003940:	f362 201f 	bfi	r0, r2, #8, #24
 8003944:	e9c4 1e00 	strd	r1, lr, [r4]
 8003948:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800394c:	2300      	movs	r3, #0
 800394e:	60e3      	str	r3, [r4, #12]
 8003950:	89b0      	ldrh	r0, [r6, #12]
 8003952:	f109 0301 	add.w	r3, r9, #1
 8003956:	4283      	cmp	r3, r0
 8003958:	4699      	mov	r9, r3
 800395a:	b29a      	uxth	r2, r3
 800395c:	d207      	bcs.n	800396e <ai_platform_outputs_get+0x13e>
 800395e:	6930      	ldr	r0, [r6, #16]
 8003960:	b128      	cbz	r0, 800396e <ai_platform_outputs_get+0x13e>
 8003962:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003966:	f108 081c 	add.w	r8, r8, #28
 800396a:	2d00      	cmp	r5, #0
 800396c:	d1b9      	bne.n	80038e2 <ai_platform_outputs_get+0xb2>
 800396e:	465f      	mov	r7, fp
 8003970:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003974:	2a00      	cmp	r2, #0
 8003976:	d037      	beq.n	80039e8 <ai_platform_outputs_get+0x1b8>
 8003978:	6973      	ldr	r3, [r6, #20]
 800397a:	6858      	ldr	r0, [r3, #4]
 800397c:	f1bb 0f00 	cmp.w	fp, #0
 8003980:	d001      	beq.n	8003986 <ai_platform_outputs_get+0x156>
 8003982:	f8ab 2000 	strh.w	r2, [fp]
 8003986:	b005      	add	sp, #20
 8003988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398c:	e7fe      	b.n	800398c <ai_platform_outputs_get+0x15c>
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <ai_platform_outputs_get+0x1d4>)
 8003990:	6813      	ldr	r3, [r2, #0]
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	f7ff fd14 	bl	80033c4 <_ai_platform_acquire_crc>
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <ai_platform_outputs_get+0x1d8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a8:	d010      	beq.n	80039cc <ai_platform_outputs_get+0x19c>
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <ai_platform_outputs_get+0x1dc>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	2a00      	cmp	r2, #0
 80039b4:	d1fc      	bne.n	80039b0 <ai_platform_outputs_get+0x180>
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <ai_platform_outputs_get+0x1e0>)
 80039b8:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <ai_platform_outputs_get+0x1e4>)
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <ai_platform_outputs_get+0x1e8>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d019      	beq.n	80039f8 <ai_platform_outputs_get+0x1c8>
 80039c4:	e7fe      	b.n	80039c4 <ai_platform_outputs_get+0x194>
 80039c6:	69a8      	ldr	r0, [r5, #24]
 80039c8:	2300      	movs	r3, #0
 80039ca:	e7b1      	b.n	8003930 <ai_platform_outputs_get+0x100>
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <ai_platform_outputs_get+0x1ec>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	d1fc      	bne.n	80039d2 <ai_platform_outputs_get+0x1a2>
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <ai_platform_outputs_get+0x1f0>)
 80039da:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <ai_platform_outputs_get+0x1e4>)
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <ai_platform_outputs_get+0x1e8>)
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d008      	beq.n	80039f8 <ai_platform_outputs_get+0x1c8>
 80039e6:	e7fe      	b.n	80039e6 <ai_platform_outputs_get+0x1b6>
 80039e8:	f107 0010 	add.w	r0, r7, #16
 80039ec:	2218      	movs	r2, #24
 80039ee:	2111      	movs	r1, #17
 80039f0:	f000 faa0 	bl	8003f34 <core_set_error>
 80039f4:	2000      	movs	r0, #0
 80039f6:	e7c6      	b.n	8003986 <ai_platform_outputs_get+0x156>
 80039f8:	f7ff fce6 	bl	80033c8 <_ai_platform_release_crc>
 80039fc:	2000      	movs	r0, #0
 80039fe:	e7c2      	b.n	8003986 <ai_platform_outputs_get+0x156>
 8003a00:	a1c00100 	.word	0xa1c00100
 8003a04:	e0002000 	.word	0xe0002000
 8003a08:	e0042000 	.word	0xe0042000
 8003a0c:	58024c08 	.word	0x58024c08
 8003a10:	58024c00 	.word	0x58024c00
 8003a14:	f407a5c2 	.word	0xf407a5c2
 8003a18:	b5e8b5cd 	.word	0xb5e8b5cd
 8003a1c:	40023008 	.word	0x40023008
 8003a20:	40023000 	.word	0x40023000

08003a24 <ai_platform_network_create>:
 8003a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	4615      	mov	r5, r2
 8003a2e:	461f      	mov	r7, r3
 8003a30:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003a34:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003a38:	f7ff fcc4 	bl	80033c4 <_ai_platform_acquire_crc>
 8003a3c:	b178      	cbz	r0, 8003a5e <ai_platform_network_create+0x3a>
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	; (8003bbc <ai_platform_network_create+0x198>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	d00d      	beq.n	8003a6a <ai_platform_network_create+0x46>
 8003a4e:	4b5c      	ldr	r3, [pc, #368]	; (8003bc0 <ai_platform_network_create+0x19c>)
 8003a50:	2118      	movs	r1, #24
 8003a52:	6019      	str	r1, [r3, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	2918      	cmp	r1, #24
 8003a58:	d01a      	beq.n	8003a90 <ai_platform_network_create+0x6c>
 8003a5a:	f7ff fcb5 	bl	80033c8 <_ai_platform_release_crc>
 8003a5e:	f244 1333 	movw	r3, #16691	; 0x4133
 8003a62:	4618      	mov	r0, r3
 8003a64:	b003      	add	sp, #12
 8003a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a6a:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <ai_platform_network_create+0x1a0>)
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	6019      	str	r1, [r3, #0]
 8003a70:	2114      	movs	r1, #20
 8003a72:	e001      	b.n	8003a78 <ai_platform_network_create+0x54>
 8003a74:	3901      	subs	r1, #1
 8003a76:	d002      	beq.n	8003a7e <ai_platform_network_create+0x5a>
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1fa      	bne.n	8003a74 <ai_platform_network_create+0x50>
 8003a7e:	4b51      	ldr	r3, [pc, #324]	; (8003bc4 <ai_platform_network_create+0x1a0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b91b      	cbnz	r3, 8003a8c <ai_platform_network_create+0x68>
 8003a84:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <ai_platform_network_create+0x1a4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	d006      	beq.n	8003a9a <ai_platform_network_create+0x76>
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	e7e4      	b.n	8003a5a <ai_platform_network_create+0x36>
 8003a90:	2101      	movs	r1, #1
 8003a92:	6019      	str	r1, [r3, #0]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	2900      	cmp	r1, #0
 8003a98:	d1fc      	bne.n	8003a94 <ai_platform_network_create+0x70>
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7ff fc94 	bl	80033c8 <_ai_platform_release_crc>
 8003aa0:	4a4a      	ldr	r2, [pc, #296]	; (8003bcc <ai_platform_network_create+0x1a8>)
 8003aa2:	6813      	ldr	r3, [r2, #0]
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	f7ff fc8b 	bl	80033c4 <_ai_platform_acquire_crc>
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <ai_platform_network_create+0x198>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aba:	d00d      	beq.n	8003ad8 <ai_platform_network_create+0xb4>
 8003abc:	4b40      	ldr	r3, [pc, #256]	; (8003bc0 <ai_platform_network_create+0x19c>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2a00      	cmp	r2, #0
 8003ac6:	d1fc      	bne.n	8003ac2 <ai_platform_network_create+0x9e>
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <ai_platform_network_create+0x1ac>)
 8003aca:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <ai_platform_network_create+0x1b0>)
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <ai_platform_network_create+0x1b4>)
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d00e      	beq.n	8003af4 <ai_platform_network_create+0xd0>
 8003ad6:	e7fe      	b.n	8003ad6 <ai_platform_network_create+0xb2>
 8003ad8:	4b3a      	ldr	r3, [pc, #232]	; (8003bc4 <ai_platform_network_create+0x1a0>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2a00      	cmp	r2, #0
 8003ae2:	d1fc      	bne.n	8003ade <ai_platform_network_create+0xba>
 8003ae4:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <ai_platform_network_create+0x1a4>)
 8003ae6:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <ai_platform_network_create+0x1b0>)
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <ai_platform_network_create+0x1b4>)
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d000      	beq.n	8003af4 <ai_platform_network_create+0xd0>
 8003af2:	e7fe      	b.n	8003af2 <ai_platform_network_create+0xce>
 8003af4:	f7ff fc68 	bl	80033c8 <_ai_platform_release_crc>
 8003af8:	b1ae      	cbz	r6, 8003b26 <ai_platform_network_create+0x102>
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <ai_platform_network_create+0x1b8>)
 8003afc:	602b      	str	r3, [r5, #0]
 8003afe:	6035      	str	r5, [r6, #0]
 8003b00:	f000 fa10 	bl	8003f24 <core_init>
 8003b04:	b990      	cbnz	r0, 8003b2c <ai_platform_network_create+0x108>
 8003b06:	2430      	movs	r4, #48	; 0x30
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6033      	str	r3, [r6, #0]
 8003b0c:	2610      	movs	r6, #16
 8003b0e:	464a      	mov	r2, r9
 8003b10:	4641      	mov	r1, r8
 8003b12:	4638      	mov	r0, r7
 8003b14:	f001 f80e 	bl	8004b34 <ai_version_get>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f364 0307 	bfi	r3, r4, #0, #8
 8003b1e:	6468      	str	r0, [r5, #68]	; 0x44
 8003b20:	f366 231f 	bfi	r3, r6, #8, #24
 8003b24:	e79d      	b.n	8003a62 <ai_platform_network_create+0x3e>
 8003b26:	f241 0310 	movw	r3, #4112	; 0x1010
 8003b2a:	e79a      	b.n	8003a62 <ai_platform_network_create+0x3e>
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <ai_platform_network_create+0x1a8>)
 8003b2e:	6813      	ldr	r3, [r2, #0]
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	f7ff fc45 	bl	80033c4 <_ai_platform_acquire_crc>
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <ai_platform_network_create+0x198>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d00d      	beq.n	8003b64 <ai_platform_network_create+0x140>
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <ai_platform_network_create+0x19c>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	d1fc      	bne.n	8003b4e <ai_platform_network_create+0x12a>
 8003b54:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <ai_platform_network_create+0x1ac>)
 8003b56:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <ai_platform_network_create+0x1b0>)
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <ai_platform_network_create+0x1b4>)
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d00e      	beq.n	8003b80 <ai_platform_network_create+0x15c>
 8003b62:	e7fe      	b.n	8003b62 <ai_platform_network_create+0x13e>
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <ai_platform_network_create+0x1a0>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	d1fc      	bne.n	8003b6a <ai_platform_network_create+0x146>
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <ai_platform_network_create+0x1a4>)
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <ai_platform_network_create+0x1b0>)
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <ai_platform_network_create+0x1b4>)
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d000      	beq.n	8003b80 <ai_platform_network_create+0x15c>
 8003b7e:	e7fe      	b.n	8003b7e <ai_platform_network_create+0x15a>
 8003b80:	f7ff fc22 	bl	80033c8 <_ai_platform_release_crc>
 8003b84:	2200      	movs	r2, #0
 8003b86:	4641      	mov	r1, r8
 8003b88:	4638      	mov	r0, r7
 8003b8a:	f000 ffd3 	bl	8004b34 <ai_version_get>
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4604      	mov	r4, r0
 8003b92:	2105      	movs	r1, #5
 8003b94:	2001      	movs	r0, #1
 8003b96:	f000 ffcd 	bl	8004b34 <ai_version_get>
 8003b9a:	4284      	cmp	r4, r0
 8003b9c:	d001      	beq.n	8003ba2 <ai_platform_network_create+0x17e>
 8003b9e:	2401      	movs	r4, #1
 8003ba0:	e7b2      	b.n	8003b08 <ai_platform_network_create+0xe4>
 8003ba2:	a802      	add	r0, sp, #8
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <ai_platform_network_create+0x1bc>)
 8003ba6:	f840 3d04 	str.w	r3, [r0, #-4]!
 8003baa:	f000 ff6d 	bl	8004a88 <ai_check_custom_types>
 8003bae:	b110      	cbz	r0, 8003bb6 <ai_platform_network_create+0x192>
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	4634      	mov	r4, r6
 8003bb4:	e7ab      	b.n	8003b0e <ai_platform_network_create+0xea>
 8003bb6:	2402      	movs	r4, #2
 8003bb8:	e7a6      	b.n	8003b08 <ai_platform_network_create+0xe4>
 8003bba:	bf00      	nop
 8003bbc:	e0042000 	.word	0xe0042000
 8003bc0:	58024c08 	.word	0x58024c08
 8003bc4:	40023008 	.word	0x40023008
 8003bc8:	40023000 	.word	0x40023000
 8003bcc:	e0002000 	.word	0xe0002000
 8003bd0:	58024c00 	.word	0x58024c00
 8003bd4:	f407a5c2 	.word	0xf407a5c2
 8003bd8:	b5e8b5cd 	.word	0xb5e8b5cd
 8003bdc:	a1c00100 	.word	0xa1c00100
 8003be0:	84048403 	.word	0x84048403

08003be4 <ai_platform_network_init>:
 8003be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d04b      	beq.n	8003c84 <ai_platform_network_init+0xa0>
 8003bec:	4b79      	ldr	r3, [pc, #484]	; (8003dd4 <ai_platform_network_init+0x1f0>)
 8003bee:	6802      	ldr	r2, [r0, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	d146      	bne.n	8003c84 <ai_platform_network_init+0xa0>
 8003bf6:	4a78      	ldr	r2, [pc, #480]	; (8003dd8 <ai_platform_network_init+0x1f4>)
 8003bf8:	6813      	ldr	r3, [r2, #0]
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	460e      	mov	r6, r1
 8003c02:	f7ff fbdf 	bl	80033c4 <_ai_platform_acquire_crc>
 8003c06:	4b75      	ldr	r3, [pc, #468]	; (8003ddc <ai_platform_network_init+0x1f8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c12:	d00d      	beq.n	8003c30 <ai_platform_network_init+0x4c>
 8003c14:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <ai_platform_network_init+0x1fc>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2a00      	cmp	r2, #0
 8003c1e:	d1fc      	bne.n	8003c1a <ai_platform_network_init+0x36>
 8003c20:	4b70      	ldr	r3, [pc, #448]	; (8003de4 <ai_platform_network_init+0x200>)
 8003c22:	4a71      	ldr	r2, [pc, #452]	; (8003de8 <ai_platform_network_init+0x204>)
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b70      	ldr	r3, [pc, #448]	; (8003dec <ai_platform_network_init+0x208>)
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d00d      	beq.n	8003c4a <ai_platform_network_init+0x66>
 8003c2e:	e7fe      	b.n	8003c2e <ai_platform_network_init+0x4a>
 8003c30:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <ai_platform_network_init+0x20c>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	d1fc      	bne.n	8003c36 <ai_platform_network_init+0x52>
 8003c3c:	4b6d      	ldr	r3, [pc, #436]	; (8003df4 <ai_platform_network_init+0x210>)
 8003c3e:	4a6a      	ldr	r2, [pc, #424]	; (8003de8 <ai_platform_network_init+0x204>)
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b69      	ldr	r3, [pc, #420]	; (8003dec <ai_platform_network_init+0x208>)
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d11b      	bne.n	8003c82 <ai_platform_network_init+0x9e>
 8003c4a:	f7ff fbbd 	bl	80033c8 <_ai_platform_release_crc>
 8003c4e:	2e00      	cmp	r6, #0
 8003c50:	d034      	beq.n	8003cbc <ai_platform_network_init+0xd8>
 8003c52:	4b69      	ldr	r3, [pc, #420]	; (8003df8 <ai_platform_network_init+0x214>)
 8003c54:	6832      	ldr	r2, [r6, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d149      	bne.n	8003cee <ai_platform_network_init+0x10a>
 8003c5a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003c5e:	6930      	ldr	r0, [r6, #16]
 8003c60:	89b3      	ldrh	r3, [r6, #12]
 8003c62:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8003c66:	62a0      	str	r0, [r4, #40]	; 0x28
 8003c68:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8003c72:	84a3      	strh	r3, [r4, #36]	; 0x24
 8003c74:	60e2      	str	r2, [r4, #12]
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 ff30 	bl	8004adc <ai_layers_init_all>
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c82:	e7fe      	b.n	8003c82 <ai_platform_network_init+0x9e>
 8003c84:	4a54      	ldr	r2, [pc, #336]	; (8003dd8 <ai_platform_network_init+0x1f4>)
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	f7ff fb99 	bl	80033c4 <_ai_platform_acquire_crc>
 8003c92:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <ai_platform_network_init+0x1f8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d015      	beq.n	8003ccc <ai_platform_network_init+0xe8>
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <ai_platform_network_init+0x1fc>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	d1fc      	bne.n	8003ca6 <ai_platform_network_init+0xc2>
 8003cac:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <ai_platform_network_init+0x200>)
 8003cae:	4a4e      	ldr	r2, [pc, #312]	; (8003de8 <ai_platform_network_init+0x204>)
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b4d      	ldr	r3, [pc, #308]	; (8003dec <ai_platform_network_init+0x208>)
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d015      	beq.n	8003ce6 <ai_platform_network_init+0x102>
 8003cba:	e7fe      	b.n	8003cba <ai_platform_network_init+0xd6>
 8003cbc:	f104 0010 	add.w	r0, r4, #16
 8003cc0:	2211      	movs	r2, #17
 8003cc2:	2110      	movs	r1, #16
 8003cc4:	4634      	mov	r4, r6
 8003cc6:	f000 f935 	bl	8003f34 <core_set_error>
 8003cca:	e7d7      	b.n	8003c7c <ai_platform_network_init+0x98>
 8003ccc:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <ai_platform_network_init+0x20c>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2a00      	cmp	r2, #0
 8003cd6:	d1fc      	bne.n	8003cd2 <ai_platform_network_init+0xee>
 8003cd8:	4b46      	ldr	r3, [pc, #280]	; (8003df4 <ai_platform_network_init+0x210>)
 8003cda:	4a43      	ldr	r2, [pc, #268]	; (8003de8 <ai_platform_network_init+0x204>)
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b42      	ldr	r3, [pc, #264]	; (8003dec <ai_platform_network_init+0x208>)
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d16d      	bne.n	8003dc2 <ai_platform_network_init+0x1de>
 8003ce6:	f7ff fb6f 	bl	80033c8 <_ai_platform_release_crc>
 8003cea:	2400      	movs	r4, #0
 8003cec:	e7c6      	b.n	8003c7c <ai_platform_network_init+0x98>
 8003cee:	4630      	mov	r0, r6
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8003cf6:	f7ff fb19 	bl	800332c <ai_buffer_get_size>
 8003cfa:	4635      	mov	r5, r6
 8003cfc:	f106 071c 	add.w	r7, r6, #28
 8003d00:	2101      	movs	r1, #1
 8003d02:	4606      	mov	r6, r0
 8003d04:	4638      	mov	r0, r7
 8003d06:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8003d0a:	f7ff fb0f 	bl	800332c <ai_buffer_get_size>
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	bf0a      	itet	eq
 8003d12:	46b6      	moveq	lr, r6
 8003d14:	f04f 0e01 	movne.w	lr, #1
 8003d18:	4635      	moveq	r5, r6
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d14b      	bne.n	8003db6 <ai_platform_network_init+0x1d2>
 8003d1e:	4607      	mov	r7, r0
 8003d20:	4684      	mov	ip, r0
 8003d22:	f1b8 0f00 	cmp.w	r8, #0
 8003d26:	d023      	beq.n	8003d70 <ai_platform_network_init+0x18c>
 8003d28:	8be3      	ldrh	r3, [r4, #30]
 8003d2a:	4573      	cmp	r3, lr
 8003d2c:	d207      	bcs.n	8003d3e <ai_platform_network_init+0x15a>
 8003d2e:	f104 0010 	add.w	r0, r4, #16
 8003d32:	2212      	movs	r2, #18
 8003d34:	2116      	movs	r1, #22
 8003d36:	f000 f8fd 	bl	8003f34 <core_set_error>
 8003d3a:	2400      	movs	r4, #0
 8003d3c:	e79e      	b.n	8003c7c <ai_platform_network_init+0x98>
 8003d3e:	f1be 0f00 	cmp.w	lr, #0
 8003d42:	d006      	beq.n	8003d52 <ai_platform_network_init+0x16e>
 8003d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d46:	6a26      	ldr	r6, [r4, #32]
 8003d48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d4e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003d52:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003d54:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003d58:	2600      	movs	r6, #0
 8003d5a:	4563      	cmp	r3, ip
 8003d5c:	83a6      	strh	r6, [r4, #28]
 8003d5e:	d211      	bcs.n	8003d84 <ai_platform_network_init+0x1a0>
 8003d60:	f104 0010 	add.w	r0, r4, #16
 8003d64:	2213      	movs	r2, #19
 8003d66:	2116      	movs	r1, #22
 8003d68:	f000 f8e4 	bl	8003f34 <core_set_error>
 8003d6c:	4634      	mov	r4, r6
 8003d6e:	e785      	b.n	8003c7c <ai_platform_network_init+0x98>
 8003d70:	2e00      	cmp	r6, #0
 8003d72:	d0d9      	beq.n	8003d28 <ai_platform_network_init+0x144>
 8003d74:	f104 0010 	add.w	r0, r4, #16
 8003d78:	2212      	movs	r2, #18
 8003d7a:	2110      	movs	r1, #16
 8003d7c:	4644      	mov	r4, r8
 8003d7e:	f000 f8d9 	bl	8003f34 <core_set_error>
 8003d82:	e77b      	b.n	8003c7c <ai_platform_network_init+0x98>
 8003d84:	f1bc 0f00 	cmp.w	ip, #0
 8003d88:	d013      	beq.n	8003db2 <ai_platform_network_init+0x1ce>
 8003d8a:	f04f 081c 	mov.w	r8, #28
 8003d8e:	fb08 f80c 	mul.w	r8, r8, ip
 8003d92:	eb07 0e06 	add.w	lr, r7, r6
 8003d96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003d9a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003d9c:	4435      	add	r5, r6
 8003d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003da4:	361c      	adds	r6, #28
 8003da6:	4546      	cmp	r6, r8
 8003da8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003dac:	d1f1      	bne.n	8003d92 <ai_platform_network_init+0x1ae>
 8003dae:	2300      	movs	r3, #0
 8003db0:	e75c      	b.n	8003c6c <ai_platform_network_init+0x88>
 8003db2:	4663      	mov	r3, ip
 8003db4:	e75a      	b.n	8003c6c <ai_platform_network_init+0x88>
 8003db6:	f1b9 0f00 	cmp.w	r9, #0
 8003dba:	d003      	beq.n	8003dc4 <ai_platform_network_init+0x1e0>
 8003dbc:	f04f 0c01 	mov.w	ip, #1
 8003dc0:	e7af      	b.n	8003d22 <ai_platform_network_init+0x13e>
 8003dc2:	e7fe      	b.n	8003dc2 <ai_platform_network_init+0x1de>
 8003dc4:	f104 0010 	add.w	r0, r4, #16
 8003dc8:	2213      	movs	r2, #19
 8003dca:	2110      	movs	r1, #16
 8003dcc:	464c      	mov	r4, r9
 8003dce:	f000 f8b1 	bl	8003f34 <core_set_error>
 8003dd2:	e753      	b.n	8003c7c <ai_platform_network_init+0x98>
 8003dd4:	a1c00100 	.word	0xa1c00100
 8003dd8:	e0002000 	.word	0xe0002000
 8003ddc:	e0042000 	.word	0xe0042000
 8003de0:	58024c08 	.word	0x58024c08
 8003de4:	58024c00 	.word	0x58024c00
 8003de8:	f407a5c2 	.word	0xf407a5c2
 8003dec:	b5e8b5cd 	.word	0xb5e8b5cd
 8003df0:	40023008 	.word	0x40023008
 8003df4:	40023000 	.word	0x40023000
 8003df8:	a1facade 	.word	0xa1facade

08003dfc <ai_platform_network_post_init>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	b120      	cbz	r0, 8003e0a <ai_platform_network_post_init+0xe>
 8003e00:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <ai_platform_network_post_init+0x104>)
 8003e02:	6802      	ldr	r2, [r0, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	4604      	mov	r4, r0
 8003e08:	d02d      	beq.n	8003e66 <ai_platform_network_post_init+0x6a>
 8003e0a:	4a3e      	ldr	r2, [pc, #248]	; (8003f04 <ai_platform_network_post_init+0x108>)
 8003e0c:	6813      	ldr	r3, [r2, #0]
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	f7ff fad6 	bl	80033c4 <_ai_platform_acquire_crc>
 8003e18:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <ai_platform_network_post_init+0x10c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e24:	d00d      	beq.n	8003e42 <ai_platform_network_post_init+0x46>
 8003e26:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <ai_platform_network_post_init+0x110>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	2a00      	cmp	r2, #0
 8003e30:	d1fc      	bne.n	8003e2c <ai_platform_network_post_init+0x30>
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <ai_platform_network_post_init+0x114>)
 8003e34:	4a37      	ldr	r2, [pc, #220]	; (8003f14 <ai_platform_network_post_init+0x118>)
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b37      	ldr	r3, [pc, #220]	; (8003f18 <ai_platform_network_post_init+0x11c>)
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d00d      	beq.n	8003e5c <ai_platform_network_post_init+0x60>
 8003e40:	e7fe      	b.n	8003e40 <ai_platform_network_post_init+0x44>
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <ai_platform_network_post_init+0x120>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	d1fc      	bne.n	8003e48 <ai_platform_network_post_init+0x4c>
 8003e4e:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <ai_platform_network_post_init+0x124>)
 8003e50:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <ai_platform_network_post_init+0x118>)
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <ai_platform_network_post_init+0x11c>)
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d103      	bne.n	8003e64 <ai_platform_network_post_init+0x68>
 8003e5c:	f7ff fab4 	bl	80033c8 <_ai_platform_release_crc>
 8003e60:	2000      	movs	r0, #0
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	e7fe      	b.n	8003e64 <ai_platform_network_post_init+0x68>
 8003e66:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <ai_platform_network_post_init+0x108>)
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	f7ff faa8 	bl	80033c4 <_ai_platform_acquire_crc>
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <ai_platform_network_post_init+0x10c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d00d      	beq.n	8003e9e <ai_platform_network_post_init+0xa2>
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <ai_platform_network_post_init+0x110>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d1fc      	bne.n	8003e88 <ai_platform_network_post_init+0x8c>
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <ai_platform_network_post_init+0x114>)
 8003e90:	4a20      	ldr	r2, [pc, #128]	; (8003f14 <ai_platform_network_post_init+0x118>)
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <ai_platform_network_post_init+0x11c>)
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d00e      	beq.n	8003eba <ai_platform_network_post_init+0xbe>
 8003e9c:	e7fe      	b.n	8003e9c <ai_platform_network_post_init+0xa0>
 8003e9e:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <ai_platform_network_post_init+0x120>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d1fc      	bne.n	8003ea4 <ai_platform_network_post_init+0xa8>
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <ai_platform_network_post_init+0x124>)
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <ai_platform_network_post_init+0x118>)
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <ai_platform_network_post_init+0x11c>)
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d000      	beq.n	8003eba <ai_platform_network_post_init+0xbe>
 8003eb8:	e7fe      	b.n	8003eb8 <ai_platform_network_post_init+0xbc>
 8003eba:	f7ff fa85 	bl	80033c8 <_ai_platform_release_crc>
 8003ebe:	68e3      	ldr	r3, [r4, #12]
 8003ec0:	f013 0502 	ands.w	r5, r3, #2
 8003ec4:	d011      	beq.n	8003eea <ai_platform_network_post_init+0xee>
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f000 fe1c 	bl	8004b04 <ai_layers_post_init_all>
 8003ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ece:	b1a3      	cbz	r3, 8003efa <ai_platform_network_post_init+0xfe>
 8003ed0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003ed2:	b195      	cbz	r5, 8003efa <ai_platform_network_post_init+0xfe>
 8003ed4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	2000      	movs	r0, #0
 8003eda:	4798      	blx	r3
 8003edc:	692b      	ldr	r3, [r5, #16]
 8003ede:	42ab      	cmp	r3, r5
 8003ee0:	d00b      	beq.n	8003efa <ai_platform_network_post_init+0xfe>
 8003ee2:	461d      	mov	r5, r3
 8003ee4:	b14b      	cbz	r3, 8003efa <ai_platform_network_post_init+0xfe>
 8003ee6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ee8:	e7f4      	b.n	8003ed4 <ai_platform_network_post_init+0xd8>
 8003eea:	f104 0010 	add.w	r0, r4, #16
 8003eee:	2210      	movs	r2, #16
 8003ef0:	2111      	movs	r1, #17
 8003ef2:	f000 f81f 	bl	8003f34 <core_set_error>
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}
 8003efa:	2001      	movs	r0, #1
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
 8003efe:	bf00      	nop
 8003f00:	a1c00100 	.word	0xa1c00100
 8003f04:	e0002000 	.word	0xe0002000
 8003f08:	e0042000 	.word	0xe0042000
 8003f0c:	58024c08 	.word	0x58024c08
 8003f10:	58024c00 	.word	0x58024c00
 8003f14:	f407a5c2 	.word	0xf407a5c2
 8003f18:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f1c:	40023008 	.word	0x40023008
 8003f20:	40023000 	.word	0x40023000

08003f24 <core_init>:
 8003f24:	2001      	movs	r0, #1
 8003f26:	4770      	bx	lr

08003f28 <core_get_error>:
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	6800      	ldr	r0, [r0, #0]
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <core_set_error>:
 8003f34:	7803      	ldrb	r3, [r0, #0]
 8003f36:	b933      	cbnz	r3, 8003f46 <core_set_error+0x12>
 8003f38:	7001      	strb	r1, [r0, #0]
 8003f3a:	6803      	ldr	r3, [r0, #0]
 8003f3c:	f362 231f 	bfi	r3, r2, #8, #24
 8003f40:	6003      	str	r3, [r0, #0]
 8003f42:	2001      	movs	r0, #1
 8003f44:	4770      	bx	lr
 8003f46:	2000      	movs	r0, #0
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <forward_dense>:
 8003f4c:	6983      	ldr	r3, [r0, #24]
 8003f4e:	881a      	ldrh	r2, [r3, #0]
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	f000 8193 	beq.w	800427c <forward_dense+0x330>
 8003f56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	ed2d 8b10 	vpush	{d8-d15}
 8003f5e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8003f62:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003f66:	b099      	sub	sp, #100	; 0x64
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8194 	beq.w	8004296 <forward_dense+0x34a>
 8003f6e:	f8d3 8000 	ldr.w	r8, [r3]
 8003f72:	2a01      	cmp	r2, #1
 8003f74:	f240 817f 	bls.w	8004276 <forward_dense+0x32a>
 8003f78:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8003f7c:	b104      	cbz	r4, 8003f80 <forward_dense+0x34>
 8003f7e:	6824      	ldr	r4, [r4, #0]
 8003f80:	2a02      	cmp	r2, #2
 8003f82:	f000 817d 	beq.w	8004280 <forward_dense+0x334>
 8003f86:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 817b 	bne.w	8004286 <forward_dense+0x33a>
 8003f90:	f11c 0118 	adds.w	r1, ip, #24
 8003f94:	930e      	str	r3, [sp, #56]	; 0x38
 8003f96:	f000 817c 	beq.w	8004292 <forward_dense+0x346>
 8003f9a:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 8003f9e:	2901      	cmp	r1, #1
 8003fa0:	f240 83ab 	bls.w	80046fa <forward_dense+0x7ae>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8178 	beq.w	800429a <forward_dense+0x34e>
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fb0:	68e7      	ldr	r7, [r4, #12]
 8003fb2:	6998      	ldr	r0, [r3, #24]
 8003fb4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8003fb8:	6803      	ldr	r3, [r0, #0]
 8003fba:	6849      	ldr	r1, [r1, #4]
 8003fbc:	9115      	str	r1, [sp, #84]	; 0x54
 8003fbe:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 8003fc2:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8003fc6:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8003fca:	fa4e f101 	asr.w	r1, lr, r1
 8003fce:	2a03      	cmp	r2, #3
 8003fd0:	68ff      	ldr	r7, [r7, #12]
 8003fd2:	9113      	str	r1, [sp, #76]	; 0x4c
 8003fd4:	fb05 f506 	mul.w	r5, r5, r6
 8003fd8:	f000 8373 	beq.w	80046c2 <forward_dense+0x776>
 8003fdc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8003fe0:	2a00      	cmp	r2, #0
 8003fe2:	f000 8371 	beq.w	80046c8 <forward_dense+0x77c>
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	f000 836d 	beq.w	80046c8 <forward_dense+0x77c>
 8003fee:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8003ff8:	f000 836c 	beq.w	80046d4 <forward_dense+0x788>
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	f000 8369 	beq.w	80046d4 <forward_dense+0x788>
 8004002:	f04f 0a00 	mov.w	sl, #0
 8004006:	69a3      	ldr	r3, [r4, #24]
 8004008:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800400c:	6899      	ldr	r1, [r3, #8]
 800400e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004010:	9102      	str	r1, [sp, #8]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	6892      	ldr	r2, [r2, #8]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	9305      	str	r3, [sp, #20]
 800401a:	00ad      	lsls	r5, r5, #2
 800401c:	fb07 1005 	mla	r0, r7, r5, r1
 8004020:	00b4      	lsls	r4, r6, #2
 8004022:	4281      	cmp	r1, r0
 8004024:	9011      	str	r0, [sp, #68]	; 0x44
 8004026:	9410      	str	r4, [sp, #64]	; 0x40
 8004028:	eb01 0804 	add.w	r8, r1, r4
 800402c:	f080 811e 	bcs.w	800426c <forward_dense+0x320>
 8004030:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004032:	eddf faa0 	vldr	s31, [pc, #640]	; 80042b4 <forward_dense+0x368>
 8004036:	08e8      	lsrs	r0, r5, #3
 8004038:	0141      	lsls	r1, r0, #5
 800403a:	f025 0301 	bic.w	r3, r5, #1
 800403e:	4606      	mov	r6, r0
 8004040:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 8004044:	9001      	str	r0, [sp, #4]
 8004046:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 800404a:	00f7      	lsls	r7, r6, #3
 800404c:	9316      	str	r3, [sp, #88]	; 0x58
 800404e:	0143      	lsls	r3, r0, #5
 8004050:	00b6      	lsls	r6, r6, #2
 8004052:	f1a5 0410 	sub.w	r4, r5, #16
 8004056:	9307      	str	r3, [sp, #28]
 8004058:	f107 0308 	add.w	r3, r7, #8
 800405c:	0924      	lsrs	r4, r4, #4
 800405e:	9304      	str	r3, [sp, #16]
 8004060:	1d33      	adds	r3, r6, #4
 8004062:	3401      	adds	r4, #1
 8004064:	930d      	str	r3, [sp, #52]	; 0x34
 8004066:	f005 0301 	and.w	r3, r5, #1
 800406a:	01a4      	lsls	r4, r4, #6
 800406c:	f005 0907 	and.w	r9, r5, #7
 8004070:	9309      	str	r3, [sp, #36]	; 0x24
 8004072:	00ab      	lsls	r3, r5, #2
 8004074:	9312      	str	r3, [sp, #72]	; 0x48
 8004076:	9703      	str	r7, [sp, #12]
 8004078:	960c      	str	r6, [sp, #48]	; 0x30
 800407a:	9417      	str	r4, [sp, #92]	; 0x5c
 800407c:	eb02 0b01 	add.w	fp, r2, r1
 8004080:	4653      	mov	r3, sl
 8004082:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8004086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004088:	9907      	ldr	r1, [sp, #28]
 800408a:	6992      	ldr	r2, [r2, #24]
 800408c:	6894      	ldr	r4, [r2, #8]
 800408e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004090:	4459      	add	r1, fp
 8004092:	9106      	str	r1, [sp, #24]
 8004094:	2a00      	cmp	r2, #0
 8004096:	f000 810f 	beq.w	80042b8 <forward_dense+0x36c>
 800409a:	6992      	ldr	r2, [r2, #24]
 800409c:	6896      	ldr	r6, [r2, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 810e 	beq.w	80042c0 <forward_dense+0x374>
 80040a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80040a6:	2a04      	cmp	r2, #4
 80040a8:	f000 821e 	beq.w	80044e8 <forward_dense+0x59c>
 80040ac:	9a02      	ldr	r2, [sp, #8]
 80040ae:	4590      	cmp	r8, r2
 80040b0:	f240 80d3 	bls.w	800425a <forward_dense+0x30e>
 80040b4:	4694      	mov	ip, r2
 80040b6:	9a07      	ldr	r2, [sp, #28]
 80040b8:	f8dd a014 	ldr.w	sl, [sp, #20]
 80040bc:	f102 0e20 	add.w	lr, r2, #32
 80040c0:	46b1      	mov	r9, r6
 80040c2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80040c4:	44de      	add	lr, fp
 80040c6:	f1b9 0f00 	cmp.w	r9, #0
 80040ca:	f000 80e8 	beq.w	800429e <forward_dense+0x352>
 80040ce:	9a01      	ldr	r2, [sp, #4]
 80040d0:	edd9 2a00 	vldr	s5, [r9]
 80040d4:	eddf 6a77 	vldr	s13, [pc, #476]	; 80042b4 <forward_dense+0x368>
 80040d8:	f109 0904 	add.w	r9, r9, #4
 80040dc:	2a00      	cmp	r2, #0
 80040de:	f000 80e6 	beq.w	80042ae <forward_dense+0x362>
 80040e2:	9904      	ldr	r1, [sp, #16]
 80040e4:	f104 0208 	add.w	r2, r4, #8
 80040e8:	190f      	adds	r7, r1, r4
 80040ea:	4671      	mov	r1, lr
 80040ec:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 80040f0:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 80040f4:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 80040f8:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 80040fc:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004100:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 8004104:	ed51 3a04 	vldr	s7, [r1, #-16]
 8004108:	ed51 4a03 	vldr	s9, [r1, #-12]
 800410c:	ed51 5a02 	vldr	s11, [r1, #-8]
 8004110:	ed11 6a01 	vldr	s12, [r1, #-4]
 8004114:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004118:	ed95 7a00 	vldr	s14, [r5]
 800411c:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 8004120:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004128:	ed90 7a00 	vldr	s14, [r0]
 800412c:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 8004130:	eee7 7a03 	vfma.f32	s15, s14, s6
 8004134:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004138:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800413c:	ed95 3a00 	vldr	s6, [r5]
 8004140:	ed90 7a00 	vldr	s14, [r0]
 8004144:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 8004148:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800414c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8004150:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004158:	ed95 3a00 	vldr	s6, [r5]
 800415c:	ed90 4a00 	vldr	s8, [r0]
 8004160:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 8004164:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8004168:	eee7 7a05 	vfma.f32	s15, s14, s10
 800416c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004170:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004174:	ed95 5a00 	vldr	s10, [r5]
 8004178:	ed90 7a00 	vldr	s14, [r0]
 800417c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004180:	3208      	adds	r2, #8
 8004182:	4297      	cmp	r7, r2
 8004184:	f101 0120 	add.w	r1, r1, #32
 8004188:	eee4 7a24 	vfma.f32	s15, s8, s9
 800418c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004190:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004194:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004198:	d1a8      	bne.n	80040ec <forward_dense+0x1a0>
 800419a:	9a03      	ldr	r2, [sp, #12]
 800419c:	18a1      	adds	r1, r4, r2
 800419e:	465a      	mov	r2, fp
 80041a0:	2e00      	cmp	r6, #0
 80041a2:	d04a      	beq.n	800423a <forward_dense+0x2ee>
 80041a4:	7808      	ldrb	r0, [r1, #0]
 80041a6:	ed92 7a00 	vldr	s14, [r2]
 80041aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80041ae:	edd0 7a00 	vldr	s15, [r0]
 80041b2:	2e01      	cmp	r6, #1
 80041b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041b8:	d03f      	beq.n	800423a <forward_dense+0x2ee>
 80041ba:	7848      	ldrb	r0, [r1, #1]
 80041bc:	edd2 7a01 	vldr	s15, [r2, #4]
 80041c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80041c4:	ed90 7a00 	vldr	s14, [r0]
 80041c8:	2e02      	cmp	r6, #2
 80041ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041ce:	d034      	beq.n	800423a <forward_dense+0x2ee>
 80041d0:	7888      	ldrb	r0, [r1, #2]
 80041d2:	edd2 7a02 	vldr	s15, [r2, #8]
 80041d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80041da:	ed90 7a00 	vldr	s14, [r0]
 80041de:	2e03      	cmp	r6, #3
 80041e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041e4:	d029      	beq.n	800423a <forward_dense+0x2ee>
 80041e6:	78c8      	ldrb	r0, [r1, #3]
 80041e8:	edd2 7a03 	vldr	s15, [r2, #12]
 80041ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80041f0:	ed90 7a00 	vldr	s14, [r0]
 80041f4:	2e04      	cmp	r6, #4
 80041f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041fa:	d01e      	beq.n	800423a <forward_dense+0x2ee>
 80041fc:	7908      	ldrb	r0, [r1, #4]
 80041fe:	edd2 7a04 	vldr	s15, [r2, #16]
 8004202:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004206:	ed90 7a00 	vldr	s14, [r0]
 800420a:	2e05      	cmp	r6, #5
 800420c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004210:	d013      	beq.n	800423a <forward_dense+0x2ee>
 8004212:	7948      	ldrb	r0, [r1, #5]
 8004214:	edd2 7a05 	vldr	s15, [r2, #20]
 8004218:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800421c:	ed90 7a00 	vldr	s14, [r0]
 8004220:	2e06      	cmp	r6, #6
 8004222:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004226:	d008      	beq.n	800423a <forward_dense+0x2ee>
 8004228:	7989      	ldrb	r1, [r1, #6]
 800422a:	edd2 7a06 	vldr	s15, [r2, #24]
 800422e:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8004232:	ed92 7a00 	vldr	s14, [r2]
 8004236:	eee7 6a27 	vfma.f32	s13, s14, s15
 800423a:	4454      	add	r4, sl
 800423c:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8004240:	ecec 6a01 	vstmia	ip!, {s13}
 8004244:	45c4      	cmp	ip, r8
 8004246:	f4ff af3e 	bcc.w	80040c6 <forward_dense+0x17a>
 800424a:	9902      	ldr	r1, [sp, #8]
 800424c:	43ca      	mvns	r2, r1
 800424e:	4442      	add	r2, r8
 8004250:	f022 0203 	bic.w	r2, r2, #3
 8004254:	3204      	adds	r2, #4
 8004256:	188a      	adds	r2, r1, r2
 8004258:	9202      	str	r2, [sp, #8]
 800425a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800425c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800425e:	4490      	add	r8, r2
 8004260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004262:	4493      	add	fp, r2
 8004264:	9a02      	ldr	r2, [sp, #8]
 8004266:	428a      	cmp	r2, r1
 8004268:	f4ff af0d 	bcc.w	8004086 <forward_dense+0x13a>
 800426c:	b019      	add	sp, #100	; 0x64
 800426e:	ecbd 8b10 	vpop	{d8-d15}
 8004272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004276:	2300      	movs	r3, #0
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	deff      	udf	#255	; 0xff
 800427c:	6853      	ldr	r3, [r2, #4]
 800427e:	deff      	udf	#255	; 0xff
 8004280:	2300      	movs	r3, #0
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	deff      	udf	#255	; 0xff
 8004286:	6819      	ldr	r1, [r3, #0]
 8004288:	910e      	str	r1, [sp, #56]	; 0x38
 800428a:	f11c 0118 	adds.w	r1, ip, #24
 800428e:	f47f ae84 	bne.w	8003f9a <forward_dense+0x4e>
 8004292:	910f      	str	r1, [sp, #60]	; 0x3c
 8004294:	e68b      	b.n	8003fae <forward_dense+0x62>
 8004296:	4698      	mov	r8, r3
 8004298:	e66b      	b.n	8003f72 <forward_dense+0x26>
 800429a:	930f      	str	r3, [sp, #60]	; 0x3c
 800429c:	e687      	b.n	8003fae <forward_dense+0x62>
 800429e:	9a01      	ldr	r2, [sp, #4]
 80042a0:	eddf 6a04 	vldr	s13, [pc, #16]	; 80042b4 <forward_dense+0x368>
 80042a4:	eef0 2a6f 	vmov.f32	s5, s31
 80042a8:	2a00      	cmp	r2, #0
 80042aa:	f47f af1a 	bne.w	80040e2 <forward_dense+0x196>
 80042ae:	9a06      	ldr	r2, [sp, #24]
 80042b0:	4621      	mov	r1, r4
 80042b2:	e775      	b.n	80041a0 <forward_dense+0x254>
 80042b4:	00000000 	.word	0x00000000
 80042b8:	4616      	mov	r6, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f47f aef2 	bne.w	80040a4 <forward_dense+0x158>
 80042c0:	9a02      	ldr	r2, [sp, #8]
 80042c2:	4590      	cmp	r8, r2
 80042c4:	d9c9      	bls.n	800425a <forward_dense+0x30e>
 80042c6:	4615      	mov	r5, r2
 80042c8:	9a07      	ldr	r2, [sp, #28]
 80042ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 80042cc:	9308      	str	r3, [sp, #32]
 80042ce:	f102 0740 	add.w	r7, r2, #64	; 0x40
 80042d2:	9a06      	ldr	r2, [sp, #24]
 80042d4:	9b05      	ldr	r3, [sp, #20]
 80042d6:	4610      	mov	r0, r2
 80042d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80042da:	445f      	add	r7, fp
 80042dc:	eb00 0c02 	add.w	ip, r0, r2
 80042e0:	f001 0e0f 	and.w	lr, r1, #15
 80042e4:	468a      	mov	sl, r1
 80042e6:	4691      	mov	r9, r2
 80042e8:	2e00      	cmp	r6, #0
 80042ea:	f000 81de 	beq.w	80046aa <forward_dense+0x75e>
 80042ee:	f1ba 0f0f 	cmp.w	sl, #15
 80042f2:	ed96 fa00 	vldr	s30, [r6]
 80042f6:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 80042b4 <forward_dense+0x368>
 80042fa:	f106 0604 	add.w	r6, r6, #4
 80042fe:	f240 81dc 	bls.w	80046ba <forward_dense+0x76e>
 8004302:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004306:	463a      	mov	r2, r7
 8004308:	4650      	mov	r0, sl
 800430a:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 800430e:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8004312:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 8004316:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 800431a:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 800431e:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 8004322:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 8004326:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 800432a:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 800432e:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 8004332:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 8004336:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800433a:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 800433e:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 8004342:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 8004346:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 800434a:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800434e:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 8004352:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004356:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 800435a:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800435e:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 8004362:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 8004366:	ed12 4a04 	vldr	s8, [r2, #-16]
 800436a:	ed51 4a04 	vldr	s9, [r1, #-16]
 800436e:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004372:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004376:	ed12 6a02 	vldr	s12, [r2, #-8]
 800437a:	ed11 7a02 	vldr	s14, [r1, #-8]
 800437e:	ee67 7aae 	vmul.f32	s15, s15, s29
 8004382:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 8004386:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800438a:	3810      	subs	r0, #16
 800438c:	280f      	cmp	r0, #15
 800438e:	ed11 ea01 	vldr	s28, [r1, #-4]
 8004392:	ed52 da01 	vldr	s27, [r2, #-4]
 8004396:	eeed 7a2e 	vfma.f32	s15, s26, s29
 800439a:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800439e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80043a2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80043a6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80043aa:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80043ae:	eee9 7a89 	vfma.f32	s15, s19, s18
 80043b2:	eee8 7a88 	vfma.f32	s15, s17, s16
 80043b6:	eee0 7a20 	vfma.f32	s15, s0, s1
 80043ba:	eee1 7a21 	vfma.f32	s15, s2, s3
 80043be:	eee2 7a22 	vfma.f32	s15, s4, s5
 80043c2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80043c6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80043ca:	eee5 7a25 	vfma.f32	s15, s10, s11
 80043ce:	eee6 7a07 	vfma.f32	s15, s12, s14
 80043d2:	eeee 7a2d 	vfma.f32	s15, s28, s27
 80043d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80043da:	d896      	bhi.n	800430a <forward_dense+0x3be>
 80043dc:	eb04 0009 	add.w	r0, r4, r9
 80043e0:	4672      	mov	r2, lr
 80043e2:	4661      	mov	r1, ip
 80043e4:	2a00      	cmp	r2, #0
 80043e6:	d075      	beq.n	80044d4 <forward_dense+0x588>
 80043e8:	ed90 7a00 	vldr	s14, [r0]
 80043ec:	edd1 7a00 	vldr	s15, [r1]
 80043f0:	2a01      	cmp	r2, #1
 80043f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80043f6:	d06d      	beq.n	80044d4 <forward_dense+0x588>
 80043f8:	ed90 7a01 	vldr	s14, [r0, #4]
 80043fc:	edd1 7a01 	vldr	s15, [r1, #4]
 8004400:	2a02      	cmp	r2, #2
 8004402:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004406:	d065      	beq.n	80044d4 <forward_dense+0x588>
 8004408:	ed90 7a02 	vldr	s14, [r0, #8]
 800440c:	edd1 7a02 	vldr	s15, [r1, #8]
 8004410:	2a03      	cmp	r2, #3
 8004412:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004416:	d05d      	beq.n	80044d4 <forward_dense+0x588>
 8004418:	ed90 7a03 	vldr	s14, [r0, #12]
 800441c:	edd1 7a03 	vldr	s15, [r1, #12]
 8004420:	2a04      	cmp	r2, #4
 8004422:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004426:	d055      	beq.n	80044d4 <forward_dense+0x588>
 8004428:	ed90 7a04 	vldr	s14, [r0, #16]
 800442c:	edd1 7a04 	vldr	s15, [r1, #16]
 8004430:	2a05      	cmp	r2, #5
 8004432:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004436:	d04d      	beq.n	80044d4 <forward_dense+0x588>
 8004438:	ed90 7a05 	vldr	s14, [r0, #20]
 800443c:	edd1 7a05 	vldr	s15, [r1, #20]
 8004440:	2a06      	cmp	r2, #6
 8004442:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004446:	d045      	beq.n	80044d4 <forward_dense+0x588>
 8004448:	ed90 7a06 	vldr	s14, [r0, #24]
 800444c:	edd1 7a06 	vldr	s15, [r1, #24]
 8004450:	2a07      	cmp	r2, #7
 8004452:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004456:	d03d      	beq.n	80044d4 <forward_dense+0x588>
 8004458:	ed90 7a07 	vldr	s14, [r0, #28]
 800445c:	edd1 7a07 	vldr	s15, [r1, #28]
 8004460:	2a08      	cmp	r2, #8
 8004462:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004466:	d035      	beq.n	80044d4 <forward_dense+0x588>
 8004468:	ed90 7a08 	vldr	s14, [r0, #32]
 800446c:	edd1 7a08 	vldr	s15, [r1, #32]
 8004470:	2a09      	cmp	r2, #9
 8004472:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004476:	d02d      	beq.n	80044d4 <forward_dense+0x588>
 8004478:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800447c:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8004480:	2a0a      	cmp	r2, #10
 8004482:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004486:	d025      	beq.n	80044d4 <forward_dense+0x588>
 8004488:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800448c:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8004490:	2a0b      	cmp	r2, #11
 8004492:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004496:	d01d      	beq.n	80044d4 <forward_dense+0x588>
 8004498:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800449c:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 80044a0:	2a0c      	cmp	r2, #12
 80044a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80044a6:	d015      	beq.n	80044d4 <forward_dense+0x588>
 80044a8:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 80044ac:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 80044b0:	2a0d      	cmp	r2, #13
 80044b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80044b6:	d00d      	beq.n	80044d4 <forward_dense+0x588>
 80044b8:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 80044bc:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 80044c0:	2a0e      	cmp	r2, #14
 80044c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80044c6:	d005      	beq.n	80044d4 <forward_dense+0x588>
 80044c8:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 80044cc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80044d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80044d4:	441c      	add	r4, r3
 80044d6:	ee7f 6a26 	vadd.f32	s13, s30, s13
 80044da:	ece5 6a01 	vstmia	r5!, {s13}
 80044de:	4545      	cmp	r5, r8
 80044e0:	f4ff af02 	bcc.w	80042e8 <forward_dense+0x39c>
 80044e4:	9b08      	ldr	r3, [sp, #32]
 80044e6:	e6b0      	b.n	800424a <forward_dense+0x2fe>
 80044e8:	9902      	ldr	r1, [sp, #8]
 80044ea:	4588      	cmp	r8, r1
 80044ec:	f67f aeb5 	bls.w	800425a <forward_dense+0x30e>
 80044f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80044f2:	eb02 000b 	add.w	r0, r2, fp
 80044f6:	9a07      	ldr	r2, [sp, #28]
 80044f8:	9008      	str	r0, [sp, #32]
 80044fa:	3220      	adds	r2, #32
 80044fc:	3007      	adds	r0, #7
 80044fe:	445a      	add	r2, fp
 8004500:	900b      	str	r0, [sp, #44]	; 0x2c
 8004502:	920a      	str	r2, [sp, #40]	; 0x28
 8004504:	4689      	mov	r9, r1
 8004506:	2e00      	cmp	r6, #0
 8004508:	f000 80b9 	beq.w	800467e <forward_dense+0x732>
 800450c:	9a01      	ldr	r2, [sp, #4]
 800450e:	edd6 2a00 	vldr	s5, [r6]
 8004512:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 80042b4 <forward_dense+0x368>
 8004516:	3604      	adds	r6, #4
 8004518:	2a00      	cmp	r2, #0
 800451a:	f000 80b8 	beq.w	800468e <forward_dense+0x742>
 800451e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004520:	1917      	adds	r7, r2, r4
 8004522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004524:	1d21      	adds	r1, r4, #4
 8004526:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 800452a:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800452e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8004532:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 8004536:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 800453a:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800453e:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004542:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004546:	ed52 5a02 	vldr	s11, [r2, #-8]
 800454a:	ed12 6a01 	vldr	s12, [r2, #-4]
 800454e:	f005 0e0f 	and.w	lr, r5, #15
 8004552:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8004556:	ed9e 7a00 	vldr	s14, [lr]
 800455a:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800455e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	ed9c 7a00 	vldr	s14, [ip]
 800456a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800456e:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 8004572:	eee7 7a03 	vfma.f32	s15, s14, s6
 8004576:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800457a:	f000 0c0f 	and.w	ip, r0, #15
 800457e:	ed9e 7a00 	vldr	s14, [lr]
 8004582:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8004586:	eee7 7a23 	vfma.f32	s15, s14, s7
 800458a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800458e:	3104      	adds	r1, #4
 8004590:	ed9c 7a00 	vldr	s14, [ip]
 8004594:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8004598:	eee7 7a04 	vfma.f32	s15, s14, s8
 800459c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80045a0:	f005 050f 	and.w	r5, r5, #15
 80045a4:	ed9c 7a00 	vldr	s14, [ip]
 80045a8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80045ac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80045b0:	428f      	cmp	r7, r1
 80045b2:	ed95 7a00 	vldr	s14, [r5]
 80045b6:	ea4f 1510 	mov.w	r5, r0, lsr #4
 80045ba:	eee7 7a05 	vfma.f32	s15, s14, s10
 80045be:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80045c2:	f000 000f 	and.w	r0, r0, #15
 80045c6:	ed95 7a00 	vldr	s14, [r5]
 80045ca:	eee7 7a25 	vfma.f32	s15, s14, s11
 80045ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80045d2:	f102 0220 	add.w	r2, r2, #32
 80045d6:	ed90 7a00 	vldr	s14, [r0]
 80045da:	eee7 7a06 	vfma.f32	s15, s14, s12
 80045de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80045e2:	d1a0      	bne.n	8004526 <forward_dense+0x5da>
 80045e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045e6:	46de      	mov	lr, fp
 80045e8:	eb04 0a02 	add.w	sl, r4, r2
 80045ec:	9a08      	ldr	r2, [sp, #32]
 80045ee:	4596      	cmp	lr, r2
 80045f0:	d22c      	bcs.n	800464c <forward_dense+0x700>
 80045f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045f4:	f10e 0108 	add.w	r1, lr, #8
 80045f8:	eba2 0c01 	sub.w	ip, r2, r1
 80045fc:	f02c 0207 	bic.w	r2, ip, #7
 8004600:	f10e 0710 	add.w	r7, lr, #16
 8004604:	4417      	add	r7, r2
 8004606:	f10a 35ff 	add.w	r5, sl, #4294967295
 800460a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800460e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004612:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004616:	f002 000f 	and.w	r0, r2, #15
 800461a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800461e:	ed90 7a00 	vldr	s14, [r0]
 8004622:	0912      	lsrs	r2, r2, #4
 8004624:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462c:	ed92 7a00 	vldr	s14, [r2]
 8004630:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004634:	3108      	adds	r1, #8
 8004636:	428f      	cmp	r7, r1
 8004638:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800463c:	d1e5      	bne.n	800460a <forward_dense+0x6be>
 800463e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004642:	f10c 0c01 	add.w	ip, ip, #1
 8004646:	44e2      	add	sl, ip
 8004648:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800464c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800464e:	b312      	cbz	r2, 8004696 <forward_dense+0x74a>
 8004650:	f89a 2000 	ldrb.w	r2, [sl]
 8004654:	edde 7a00 	vldr	s15, [lr]
 8004658:	0912      	lsrs	r2, r2, #4
 800465a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800465e:	ed92 7a00 	vldr	s14, [r2]
 8004662:	9a05      	ldr	r2, [sp, #20]
 8004664:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004668:	4414      	add	r4, r2
 800466a:	ee76 2aa2 	vadd.f32	s5, s13, s5
 800466e:	ece9 2a01 	vstmia	r9!, {s5}
 8004672:	45c8      	cmp	r8, r9
 8004674:	f67f ade9 	bls.w	800424a <forward_dense+0x2fe>
 8004678:	2e00      	cmp	r6, #0
 800467a:	f47f af47 	bne.w	800450c <forward_dense+0x5c0>
 800467e:	9a01      	ldr	r2, [sp, #4]
 8004680:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004700 <forward_dense+0x7b4>
 8004684:	eef0 2a6f 	vmov.f32	s5, s31
 8004688:	2a00      	cmp	r2, #0
 800468a:	f47f af48 	bne.w	800451e <forward_dense+0x5d2>
 800468e:	f8dd e018 	ldr.w	lr, [sp, #24]
 8004692:	46a2      	mov	sl, r4
 8004694:	e7aa      	b.n	80045ec <forward_dense+0x6a0>
 8004696:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800469a:	9a05      	ldr	r2, [sp, #20]
 800469c:	ece9 6a01 	vstmia	r9!, {s13}
 80046a0:	45c1      	cmp	r9, r8
 80046a2:	4414      	add	r4, r2
 80046a4:	f4ff af2f 	bcc.w	8004506 <forward_dense+0x5ba>
 80046a8:	e5cf      	b.n	800424a <forward_dense+0x2fe>
 80046aa:	f1ba 0f0f 	cmp.w	sl, #15
 80046ae:	eeb0 fa6f 	vmov.f32	s30, s31
 80046b2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004700 <forward_dense+0x7b4>
 80046b6:	f63f ae24 	bhi.w	8004302 <forward_dense+0x3b6>
 80046ba:	4652      	mov	r2, sl
 80046bc:	4620      	mov	r0, r4
 80046be:	9906      	ldr	r1, [sp, #24]
 80046c0:	e690      	b.n	80043e4 <forward_dense+0x498>
 80046c2:	2300      	movs	r3, #0
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	deff      	udf	#255	; 0xff
 80046c8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	4691      	mov	r9, r2
 80046d0:	f47f ac94 	bne.w	8003ffc <forward_dense+0xb0>
 80046d4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80046d8:	f1b9 0f00 	cmp.w	r9, #0
 80046dc:	f43f ac93 	beq.w	8004006 <forward_dense+0xba>
 80046e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80046e4:	f000 fa82 	bl	8004bec <ai_array_get_byte_size>
 80046e8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80046ec:	4602      	mov	r2, r0
 80046ee:	4651      	mov	r1, sl
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fad1 	bl	8004c98 <memcpy>
 80046f6:	4682      	mov	sl, r0
 80046f8:	e485      	b.n	8004006 <forward_dense+0xba>
 80046fa:	2300      	movs	r3, #0
 80046fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80046fe:	e456      	b.n	8003fae <forward_dense+0x62>
 8004700:	00000000 	.word	0x00000000

08004704 <nl_func_sm_array_f32>:
 8004704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004708:	ed2d 8b04 	vpush	{d8-d9}
 800470c:	b089      	sub	sp, #36	; 0x24
 800470e:	698f      	ldr	r7, [r1, #24]
 8004710:	6984      	ldr	r4, [r0, #24]
 8004712:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8004716:	68bd      	ldr	r5, [r7, #8]
 8004718:	9402      	str	r4, [sp, #8]
 800471a:	4626      	mov	r6, r4
 800471c:	4696      	mov	lr, r2
 800471e:	eba2 020c 	sub.w	r2, r2, ip
 8004722:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8004726:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	68b6      	ldr	r6, [r6, #8]
 800472c:	ebae 0e04 	sub.w	lr, lr, r4
 8004730:	4295      	cmp	r5, r2
 8004732:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8004736:	d354      	bcc.n	80047e2 <nl_func_sm_array_f32+0xde>
 8004738:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800473c:	f1cc 0200 	rsb	r2, ip, #0
 8004740:	00a4      	lsls	r4, r4, #2
 8004742:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8004746:	9303      	str	r3, [sp, #12]
 8004748:	9204      	str	r2, [sp, #16]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4262      	negs	r2, r4
 800474e:	9205      	str	r2, [sp, #20]
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004756:	9b02      	ldr	r3, [sp, #8]
 8004758:	9a07      	ldr	r2, [sp, #28]
 800475a:	60bd      	str	r5, [r7, #8]
 800475c:	609e      	str	r6, [r3, #8]
 800475e:	9b06      	ldr	r3, [sp, #24]
 8004760:	6992      	ldr	r2, [r2, #24]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	6894      	ldr	r4, [r2, #8]
 8004766:	9a03      	ldr	r2, [sp, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2a01      	cmp	r2, #1
 800476c:	ed93 8a00 	vldr	s16, [r3]
 8004770:	d940      	bls.n	80047f4 <nl_func_sm_array_f32+0xf0>
 8004772:	9901      	ldr	r1, [sp, #4]
 8004774:	1d1a      	adds	r2, r3, #4
 8004776:	eb03 0b01 	add.w	fp, r3, r1
 800477a:	ecf2 7a01 	vldmia	r2!, {s15}
 800477e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004786:	bfb8      	it	lt
 8004788:	eeb0 8a67 	vmovlt.f32	s16, s15
 800478c:	4593      	cmp	fp, r2
 800478e:	d1f4      	bne.n	800477a <nl_func_sm_array_f32+0x76>
 8004790:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8004800 <nl_func_sm_array_f32+0xfc>
 8004794:	469a      	mov	sl, r3
 8004796:	46a1      	mov	r9, r4
 8004798:	46a0      	mov	r8, r4
 800479a:	ecba 0a01 	vldmia	sl!, {s0}
 800479e:	ee30 0a48 	vsub.f32	s0, s0, s16
 80047a2:	f003 f9f1 	bl	8007b88 <expf>
 80047a6:	45d3      	cmp	fp, sl
 80047a8:	eca8 0a01 	vstmia	r8!, {s0}
 80047ac:	ee78 8a80 	vadd.f32	s17, s17, s0
 80047b0:	d1f3      	bne.n	800479a <nl_func_sm_array_f32+0x96>
 80047b2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80047b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ba:	d00b      	beq.n	80047d4 <nl_func_sm_array_f32+0xd0>
 80047bc:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80047c0:	9b01      	ldr	r3, [sp, #4]
 80047c2:	441c      	add	r4, r3
 80047c4:	edd9 7a00 	vldr	s15, [r9]
 80047c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047cc:	ece9 7a01 	vstmia	r9!, {s15}
 80047d0:	454c      	cmp	r4, r9
 80047d2:	d1f7      	bne.n	80047c4 <nl_func_sm_array_f32+0xc0>
 80047d4:	9b04      	ldr	r3, [sp, #16]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	441d      	add	r5, r3
 80047da:	9b05      	ldr	r3, [sp, #20]
 80047dc:	42aa      	cmp	r2, r5
 80047de:	441e      	add	r6, r3
 80047e0:	d9b9      	bls.n	8004756 <nl_func_sm_array_f32+0x52>
 80047e2:	60ba      	str	r2, [r7, #8]
 80047e4:	9a02      	ldr	r2, [sp, #8]
 80047e6:	68d3      	ldr	r3, [r2, #12]
 80047e8:	6093      	str	r3, [r2, #8]
 80047ea:	b009      	add	sp, #36	; 0x24
 80047ec:	ecbd 8b04 	vpop	{d8-d9}
 80047f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	d0ed      	beq.n	80047d4 <nl_func_sm_array_f32+0xd0>
 80047f8:	9a01      	ldr	r2, [sp, #4]
 80047fa:	eb03 0b02 	add.w	fp, r3, r2
 80047fe:	e7c7      	b.n	8004790 <nl_func_sm_array_f32+0x8c>
 8004800:	00000000 	.word	0x00000000

08004804 <nl_func_relu_generic_array_f32>:
 8004804:	b430      	push	{r4, r5}
 8004806:	6989      	ldr	r1, [r1, #24]
 8004808:	6980      	ldr	r0, [r0, #24]
 800480a:	edd3 6a02 	vldr	s13, [r3, #8]
 800480e:	688c      	ldr	r4, [r1, #8]
 8004810:	6880      	ldr	r0, [r0, #8]
 8004812:	ed93 7a00 	vldr	s14, [r3]
 8004816:	ed93 6a01 	vldr	s12, [r3, #4]
 800481a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800481e:	3a01      	subs	r2, #1
 8004820:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004824:	0092      	lsls	r2, r2, #2
 8004826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482a:	4410      	add	r0, r2
 800482c:	4422      	add	r2, r4
 800482e:	d421      	bmi.n	8004874 <nl_func_relu_generic_array_f32+0x70>
 8004830:	4294      	cmp	r4, r2
 8004832:	d83d      	bhi.n	80048b0 <nl_func_relu_generic_array_f32+0xac>
 8004834:	1d13      	adds	r3, r2, #4
 8004836:	1d02      	adds	r2, r0, #4
 8004838:	e010      	b.n	800485c <nl_func_relu_generic_array_f32+0x58>
 800483a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800483e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004842:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004846:	d501      	bpl.n	800484c <nl_func_relu_generic_array_f32+0x48>
 8004848:	ee65 7a86 	vmul.f32	s15, s11, s12
 800484c:	ed62 7a01 	vstmdb	r2!, {s15}
 8004850:	6888      	ldr	r0, [r1, #8]
 8004852:	f1a3 0408 	sub.w	r4, r3, #8
 8004856:	4284      	cmp	r4, r0
 8004858:	462b      	mov	r3, r5
 800485a:	d329      	bcc.n	80048b0 <nl_func_relu_generic_array_f32+0xac>
 800485c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004860:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	f1a3 0504 	sub.w	r5, r3, #4
 800486c:	d4e5      	bmi.n	800483a <nl_func_relu_generic_array_f32+0x36>
 800486e:	eef0 7a66 	vmov.f32	s15, s13
 8004872:	e7eb      	b.n	800484c <nl_func_relu_generic_array_f32+0x48>
 8004874:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	d01a      	beq.n	80048b4 <nl_func_relu_generic_array_f32+0xb0>
 800487e:	4294      	cmp	r4, r2
 8004880:	d816      	bhi.n	80048b0 <nl_func_relu_generic_array_f32+0xac>
 8004882:	1d13      	adds	r3, r2, #4
 8004884:	1d02      	adds	r2, r0, #4
 8004886:	ed53 7a01 	vldr	s15, [r3, #-4]
 800488a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800488e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004892:	f1a3 0408 	sub.w	r4, r3, #8
 8004896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489a:	f1a3 0004 	sub.w	r0, r3, #4
 800489e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80048a2:	4623      	mov	r3, r4
 80048a4:	d51e      	bpl.n	80048e4 <nl_func_relu_generic_array_f32+0xe0>
 80048a6:	ed62 6a01 	vstmdb	r2!, {s13}
 80048aa:	688b      	ldr	r3, [r1, #8]
 80048ac:	42a3      	cmp	r3, r4
 80048ae:	d91e      	bls.n	80048ee <nl_func_relu_generic_array_f32+0xea>
 80048b0:	bc30      	pop	{r4, r5}
 80048b2:	4770      	bx	lr
 80048b4:	4294      	cmp	r4, r2
 80048b6:	d8fb      	bhi.n	80048b0 <nl_func_relu_generic_array_f32+0xac>
 80048b8:	1d13      	adds	r3, r2, #4
 80048ba:	2500      	movs	r5, #0
 80048bc:	1d02      	adds	r2, r0, #4
 80048be:	ed53 7a01 	vldr	s15, [r3, #-4]
 80048c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c6:	f1a3 0408 	sub.w	r4, r3, #8
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	f1a3 0004 	sub.w	r0, r3, #4
 80048d2:	4623      	mov	r3, r4
 80048d4:	db0d      	blt.n	80048f2 <nl_func_relu_generic_array_f32+0xee>
 80048d6:	ed62 7a01 	vstmdb	r2!, {s15}
 80048da:	688b      	ldr	r3, [r1, #8]
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d8e7      	bhi.n	80048b0 <nl_func_relu_generic_array_f32+0xac>
 80048e0:	4603      	mov	r3, r0
 80048e2:	e7ec      	b.n	80048be <nl_func_relu_generic_array_f32+0xba>
 80048e4:	ed62 7a01 	vstmdb	r2!, {s15}
 80048e8:	688c      	ldr	r4, [r1, #8]
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d8e0      	bhi.n	80048b0 <nl_func_relu_generic_array_f32+0xac>
 80048ee:	4603      	mov	r3, r0
 80048f0:	e7c9      	b.n	8004886 <nl_func_relu_generic_array_f32+0x82>
 80048f2:	f842 5d04 	str.w	r5, [r2, #-4]!
 80048f6:	688c      	ldr	r4, [r1, #8]
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d8d9      	bhi.n	80048b0 <nl_func_relu_generic_array_f32+0xac>
 80048fc:	4603      	mov	r3, r0
 80048fe:	e7de      	b.n	80048be <nl_func_relu_generic_array_f32+0xba>

08004900 <forward_relu>:
 8004900:	6982      	ldr	r2, [r0, #24]
 8004902:	8813      	ldrh	r3, [r2, #0]
 8004904:	b333      	cbz	r3, 8004954 <forward_relu+0x54>
 8004906:	6852      	ldr	r2, [r2, #4]
 8004908:	6851      	ldr	r1, [r2, #4]
 800490a:	b101      	cbz	r1, 800490e <forward_relu+0xe>
 800490c:	6809      	ldr	r1, [r1, #0]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d91d      	bls.n	800494e <forward_relu+0x4e>
 8004912:	b4f0      	push	{r4, r5, r6, r7}
 8004914:	6917      	ldr	r7, [r2, #16]
 8004916:	b107      	cbz	r7, 800491a <forward_relu+0x1a>
 8004918:	683f      	ldr	r7, [r7, #0]
 800491a:	688c      	ldr	r4, [r1, #8]
 800491c:	69c3      	ldr	r3, [r0, #28]
 800491e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d044      	beq.n	80049b0 <forward_relu+0xb0>
 8004926:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800492a:	2d01      	cmp	r5, #1
 800492c:	d014      	beq.n	8004958 <forward_relu+0x58>
 800492e:	2c00      	cmp	r4, #0
 8004930:	d074      	beq.n	8004a1c <forward_relu+0x11c>
 8004932:	68ce      	ldr	r6, [r1, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800493a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800493e:	42a6      	cmp	r6, r4
 8004940:	fb05 f202 	mul.w	r2, r5, r2
 8004944:	d1f9      	bne.n	800493a <forward_relu+0x3a>
 8004946:	4638      	mov	r0, r7
 8004948:	bcf0      	pop	{r4, r5, r6, r7}
 800494a:	f7ff bf5b 	b.w	8004804 <nl_func_relu_generic_array_f32>
 800494e:	2300      	movs	r3, #0
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	deff      	udf	#255	; 0xff
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	deff      	udf	#255	; 0xff
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	6988      	ldr	r0, [r1, #24]
 800495c:	6896      	ldr	r6, [r2, #8]
 800495e:	ed93 7a00 	vldr	s14, [r3]
 8004962:	6882      	ldr	r2, [r0, #8]
 8004964:	b184      	cbz	r4, 8004988 <forward_relu+0x88>
 8004966:	68cf      	ldr	r7, [r1, #12]
 8004968:	462b      	mov	r3, r5
 800496a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800496e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8004972:	42a7      	cmp	r7, r4
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	d1f9      	bne.n	800496e <forward_relu+0x6e>
 800497a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800497e:	3b01      	subs	r3, #1
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	18d2      	adds	r2, r2, r3
 8004984:	441e      	add	r6, r3
 8004986:	d23f      	bcs.n	8004a08 <forward_relu+0x108>
 8004988:	1d13      	adds	r3, r2, #4
 800498a:	2500      	movs	r5, #0
 800498c:	1d32      	adds	r2, r6, #4
 800498e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499a:	f1a3 0104 	sub.w	r1, r3, #4
 800499e:	d835      	bhi.n	8004a0c <forward_relu+0x10c>
 80049a0:	ed62 7a01 	vstmdb	r2!, {s15}
 80049a4:	6884      	ldr	r4, [r0, #8]
 80049a6:	3b08      	subs	r3, #8
 80049a8:	429c      	cmp	r4, r3
 80049aa:	d82d      	bhi.n	8004a08 <forward_relu+0x108>
 80049ac:	460b      	mov	r3, r1
 80049ae:	e7ee      	b.n	800498e <forward_relu+0x8e>
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	698d      	ldr	r5, [r1, #24]
 80049b4:	6898      	ldr	r0, [r3, #8]
 80049b6:	68ab      	ldr	r3, [r5, #8]
 80049b8:	b184      	cbz	r4, 80049dc <forward_relu+0xdc>
 80049ba:	68ce      	ldr	r6, [r1, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80049c2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80049c6:	42a6      	cmp	r6, r4
 80049c8:	fb01 f202 	mul.w	r2, r1, r2
 80049cc:	d1f9      	bne.n	80049c2 <forward_relu+0xc2>
 80049ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80049d2:	3a01      	subs	r2, #1
 80049d4:	0092      	lsls	r2, r2, #2
 80049d6:	189b      	adds	r3, r3, r2
 80049d8:	4410      	add	r0, r2
 80049da:	d215      	bcs.n	8004a08 <forward_relu+0x108>
 80049dc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004a20 <forward_relu+0x120>
 80049e0:	3304      	adds	r3, #4
 80049e2:	1d01      	adds	r1, r0, #4
 80049e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80049e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f0:	bfb8      	it	lt
 80049f2:	eef0 7a47 	vmovlt.f32	s15, s14
 80049f6:	ed61 7a01 	vstmdb	r1!, {s15}
 80049fa:	68a8      	ldr	r0, [r5, #8]
 80049fc:	f1a3 0208 	sub.w	r2, r3, #8
 8004a00:	4290      	cmp	r0, r2
 8004a02:	f1a3 0304 	sub.w	r3, r3, #4
 8004a06:	d9ed      	bls.n	80049e4 <forward_relu+0xe4>
 8004a08:	bcf0      	pop	{r4, r5, r6, r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004a10:	6884      	ldr	r4, [r0, #8]
 8004a12:	3b08      	subs	r3, #8
 8004a14:	429c      	cmp	r4, r3
 8004a16:	d8f7      	bhi.n	8004a08 <forward_relu+0x108>
 8004a18:	460b      	mov	r3, r1
 8004a1a:	e7b8      	b.n	800498e <forward_relu+0x8e>
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	e792      	b.n	8004946 <forward_relu+0x46>
 8004a20:	00000000 	.word	0x00000000

08004a24 <forward_sm>:
 8004a24:	6982      	ldr	r2, [r0, #24]
 8004a26:	8813      	ldrh	r3, [r2, #0]
 8004a28:	b32b      	cbz	r3, 8004a76 <forward_sm+0x52>
 8004a2a:	6852      	ldr	r2, [r2, #4]
 8004a2c:	6851      	ldr	r1, [r2, #4]
 8004a2e:	b101      	cbz	r1, 8004a32 <forward_sm+0xe>
 8004a30:	6809      	ldr	r1, [r1, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d91c      	bls.n	8004a70 <forward_sm+0x4c>
 8004a36:	6913      	ldr	r3, [r2, #16]
 8004a38:	b1c3      	cbz	r3, 8004a6c <forward_sm+0x48>
 8004a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	688c      	ldr	r4, [r1, #8]
 8004a40:	68c3      	ldr	r3, [r0, #12]
 8004a42:	68ce      	ldr	r6, [r1, #12]
 8004a44:	685f      	ldr	r7, [r3, #4]
 8004a46:	6873      	ldr	r3, [r6, #4]
 8004a48:	0a24      	lsrs	r4, r4, #8
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	d015      	beq.n	8004a7a <forward_sm+0x56>
 8004a4e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004a52:	2201      	movs	r2, #1
 8004a54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a58:	42a6      	cmp	r6, r4
 8004a5a:	fb05 f202 	mul.w	r2, r5, r2
 8004a5e:	d1f9      	bne.n	8004a54 <forward_sm+0x30>
 8004a60:	e9cd 3700 	strd	r3, r7, [sp]
 8004a64:	f7ff fe4e 	bl	8004704 <nl_func_sm_array_f32>
 8004a68:	b003      	add	sp, #12
 8004a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	deff      	udf	#255	; 0xff
 8004a70:	2300      	movs	r3, #0
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	deff      	udf	#255	; 0xff
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	deff      	udf	#255	; 0xff
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	e9cd 3700 	strd	r3, r7, [sp]
 8004a80:	f7ff fe40 	bl	8004704 <nl_func_sm_array_f32>
 8004a84:	b003      	add	sp, #12
 8004a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a88 <ai_check_custom_types>:
 8004a88:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <ai_check_custom_types+0x50>)
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	b118      	cbz	r0, 8004a9a <ai_check_custom_types+0x12>
 8004a92:	7803      	ldrb	r3, [r0, #0]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d002      	beq.n	8004a9e <ai_check_custom_types+0x16>
 8004a98:	2000      	movs	r0, #0
 8004a9a:	b002      	add	sp, #8
 8004a9c:	4770      	bx	lr
 8004a9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <ai_check_custom_types+0x28>
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f080 0001 	eor.w	r0, r0, #1
 8004aac:	b002      	add	sp, #8
 8004aae:	4770      	bx	lr
 8004ab0:	7842      	ldrb	r2, [r0, #1]
 8004ab2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	f100 0001 	add.w	r0, r0, #1
 8004abc:	d1f3      	bne.n	8004aa6 <ai_check_custom_types+0x1e>
 8004abe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004ac2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d1ed      	bne.n	8004aa6 <ai_check_custom_types+0x1e>
 8004aca:	7842      	ldrb	r2, [r0, #1]
 8004acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d1e8      	bne.n	8004aa6 <ai_check_custom_types+0x1e>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e7e7      	b.n	8004aa8 <ai_check_custom_types+0x20>
 8004ad8:	08007eb0 	.word	0x08007eb0

08004adc <ai_layers_init_all>:
 8004adc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004ade:	b17a      	cbz	r2, 8004b00 <ai_layers_init_all+0x24>
 8004ae0:	6913      	ldr	r3, [r2, #16]
 8004ae2:	60d0      	str	r0, [r2, #12]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	f04f 0201 	mov.w	r2, #1
 8004aea:	d009      	beq.n	8004b00 <ai_layers_init_all+0x24>
 8004aec:	b143      	cbz	r3, 8004b00 <ai_layers_init_all+0x24>
 8004aee:	6919      	ldr	r1, [r3, #16]
 8004af0:	60d8      	str	r0, [r3, #12]
 8004af2:	4299      	cmp	r1, r3
 8004af4:	f102 0201 	add.w	r2, r2, #1
 8004af8:	d002      	beq.n	8004b00 <ai_layers_init_all+0x24>
 8004afa:	460b      	mov	r3, r1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f6      	bne.n	8004aee <ai_layers_init_all+0x12>
 8004b00:	4610      	mov	r0, r2
 8004b02:	4770      	bx	lr

08004b04 <ai_layers_post_init_all>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004b08:	b18c      	cbz	r4, 8004b2e <ai_layers_post_init_all+0x2a>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	f013 0f01 	tst.w	r3, #1
 8004b12:	4620      	mov	r0, r4
 8004b14:	d003      	beq.n	8004b1e <ai_layers_post_init_all+0x1a>
 8004b16:	6a23      	ldr	r3, [r4, #32]
 8004b18:	b10b      	cbz	r3, 8004b1e <ai_layers_post_init_all+0x1a>
 8004b1a:	4798      	blx	r3
 8004b1c:	3501      	adds	r5, #1
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d002      	beq.n	8004b2a <ai_layers_post_init_all+0x26>
 8004b24:	461c      	mov	r4, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <ai_layers_post_init_all+0x8>
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	bd38      	pop	{r3, r4, r5, pc}
 8004b2e:	4625      	mov	r5, r4
 8004b30:	e7fb      	b.n	8004b2a <ai_layers_post_init_all+0x26>
 8004b32:	bf00      	nop

08004b34 <ai_version_get>:
 8004b34:	0212      	lsls	r2, r2, #8
 8004b36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004b3a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8004b3e:	4770      	bx	lr

08004b40 <ai_array_to_buffer_fmt>:
 8004b40:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d036      	beq.n	8004bb6 <ai_array_to_buffer_fmt+0x76>
 8004b48:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <ai_array_to_buffer_fmt+0x90>)
 8004b4a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00f      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004b52:	dd12      	ble.n	8004b7a <ai_array_to_buffer_fmt+0x3a>
 8004b54:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <ai_array_to_buffer_fmt+0x94>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004b5a:	dd1e      	ble.n	8004b9a <ai_array_to_buffer_fmt+0x5a>
 8004b5c:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <ai_array_to_buffer_fmt+0x98>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004b62:	dd30      	ble.n	8004bc6 <ai_array_to_buffer_fmt+0x86>
 8004b64:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <ai_array_to_buffer_fmt+0x9c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004b6a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d11f      	bne.n	8004bb2 <ai_array_to_buffer_fmt+0x72>
 8004b72:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004b76:	4318      	orrs	r0, r3
 8004b78:	4770      	bx	lr
 8004b7a:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <ai_array_to_buffer_fmt+0xa0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d0f8      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004b80:	dd0b      	ble.n	8004b9a <ai_array_to_buffer_fmt+0x5a>
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <ai_array_to_buffer_fmt+0xa4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d0f4      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004b88:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d0f0      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004b90:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <ai_array_to_buffer_fmt+0x72>
 8004b98:	e7eb      	b.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004b9a:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d0e7      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004ba2:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d0e3      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004baa:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d0df      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004bb2:	2340      	movs	r3, #64	; 0x40
 8004bb4:	e7dd      	b.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <ai_array_to_buffer_fmt+0xa8>)
 8004bb8:	4003      	ands	r3, r0
 8004bba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bbe:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004bc2:	4318      	orrs	r0, r3
 8004bc4:	4770      	bx	lr
 8004bc6:	3a0f      	subs	r2, #15
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d0d2      	beq.n	8004b72 <ai_array_to_buffer_fmt+0x32>
 8004bcc:	e7f1      	b.n	8004bb2 <ai_array_to_buffer_fmt+0x72>
 8004bce:	bf00      	nop
 8004bd0:	00060440 	.word	0x00060440
 8004bd4:	00840447 	.word	0x00840447
 8004bd8:	0084084f 	.word	0x0084084f
 8004bdc:	00841040 	.word	0x00841040
 8004be0:	00040447 	.word	0x00040447
 8004be4:	0004084f 	.word	0x0004084f
 8004be8:	00803fff 	.word	0x00803fff

08004bec <ai_array_get_byte_size>:
 8004bec:	b1c1      	cbz	r1, 8004c20 <ai_array_get_byte_size+0x34>
 8004bee:	11c3      	asrs	r3, r0, #7
 8004bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bf4:	fb01 f102 	mul.w	r1, r1, r2
 8004bf8:	3107      	adds	r1, #7
 8004bfa:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8004bfe:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8004c02:	f021 0107 	bic.w	r1, r1, #7
 8004c06:	2804      	cmp	r0, #4
 8004c08:	fa21 f102 	lsr.w	r1, r1, r2
 8004c0c:	d00a      	beq.n	8004c24 <ai_array_get_byte_size+0x38>
 8004c0e:	2808      	cmp	r0, #8
 8004c10:	d103      	bne.n	8004c1a <ai_array_get_byte_size+0x2e>
 8004c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c16:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8004c1a:	3107      	adds	r1, #7
 8004c1c:	08c8      	lsrs	r0, r1, #3
 8004c1e:	4770      	bx	lr
 8004c20:	4608      	mov	r0, r1
 8004c22:	4770      	bx	lr
 8004c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c28:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8004c2c:	3107      	adds	r1, #7
 8004c2e:	08c8      	lsrs	r0, r1, #3
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop

08004c34 <__errno>:
 8004c34:	4b01      	ldr	r3, [pc, #4]	; (8004c3c <__errno+0x8>)
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000740 	.word	0x20000740

08004c40 <__libc_init_array>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	4d0d      	ldr	r5, [pc, #52]	; (8004c78 <__libc_init_array+0x38>)
 8004c44:	4c0d      	ldr	r4, [pc, #52]	; (8004c7c <__libc_init_array+0x3c>)
 8004c46:	1b64      	subs	r4, r4, r5
 8004c48:	10a4      	asrs	r4, r4, #2
 8004c4a:	2600      	movs	r6, #0
 8004c4c:	42a6      	cmp	r6, r4
 8004c4e:	d109      	bne.n	8004c64 <__libc_init_array+0x24>
 8004c50:	4d0b      	ldr	r5, [pc, #44]	; (8004c80 <__libc_init_array+0x40>)
 8004c52:	4c0c      	ldr	r4, [pc, #48]	; (8004c84 <__libc_init_array+0x44>)
 8004c54:	f003 f90e 	bl	8007e74 <_init>
 8004c58:	1b64      	subs	r4, r4, r5
 8004c5a:	10a4      	asrs	r4, r4, #2
 8004c5c:	2600      	movs	r6, #0
 8004c5e:	42a6      	cmp	r6, r4
 8004c60:	d105      	bne.n	8004c6e <__libc_init_array+0x2e>
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c68:	4798      	blx	r3
 8004c6a:	3601      	adds	r6, #1
 8004c6c:	e7ee      	b.n	8004c4c <__libc_init_array+0xc>
 8004c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c72:	4798      	blx	r3
 8004c74:	3601      	adds	r6, #1
 8004c76:	e7f2      	b.n	8004c5e <__libc_init_array+0x1e>
 8004c78:	08012304 	.word	0x08012304
 8004c7c:	08012304 	.word	0x08012304
 8004c80:	08012304 	.word	0x08012304
 8004c84:	08012308 	.word	0x08012308

08004c88 <malloc>:
 8004c88:	4b02      	ldr	r3, [pc, #8]	; (8004c94 <malloc+0xc>)
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	f000 b885 	b.w	8004d9c <_malloc_r>
 8004c92:	bf00      	nop
 8004c94:	20000740 	.word	0x20000740

08004c98 <memcpy>:
 8004c98:	440a      	add	r2, r1
 8004c9a:	4291      	cmp	r1, r2
 8004c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca0:	d100      	bne.n	8004ca4 <memcpy+0xc>
 8004ca2:	4770      	bx	lr
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cae:	4291      	cmp	r1, r2
 8004cb0:	d1f9      	bne.n	8004ca6 <memcpy+0xe>
 8004cb2:	bd10      	pop	{r4, pc}

08004cb4 <memset>:
 8004cb4:	4402      	add	r2, r0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d100      	bne.n	8004cbe <memset+0xa>
 8004cbc:	4770      	bx	lr
 8004cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc2:	e7f9      	b.n	8004cb8 <memset+0x4>

08004cc4 <_free_r>:
 8004cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cc6:	2900      	cmp	r1, #0
 8004cc8:	d044      	beq.n	8004d54 <_free_r+0x90>
 8004cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cce:	9001      	str	r0, [sp, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004cd6:	bfb8      	it	lt
 8004cd8:	18e4      	addlt	r4, r4, r3
 8004cda:	f001 ff63 	bl	8006ba4 <__malloc_lock>
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <_free_r+0x94>)
 8004ce0:	9801      	ldr	r0, [sp, #4]
 8004ce2:	6813      	ldr	r3, [r2, #0]
 8004ce4:	b933      	cbnz	r3, 8004cf4 <_free_r+0x30>
 8004ce6:	6063      	str	r3, [r4, #4]
 8004ce8:	6014      	str	r4, [r2, #0]
 8004cea:	b003      	add	sp, #12
 8004cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cf0:	f001 bf5e 	b.w	8006bb0 <__malloc_unlock>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d908      	bls.n	8004d0a <_free_r+0x46>
 8004cf8:	6825      	ldr	r5, [r4, #0]
 8004cfa:	1961      	adds	r1, r4, r5
 8004cfc:	428b      	cmp	r3, r1
 8004cfe:	bf01      	itttt	eq
 8004d00:	6819      	ldreq	r1, [r3, #0]
 8004d02:	685b      	ldreq	r3, [r3, #4]
 8004d04:	1949      	addeq	r1, r1, r5
 8004d06:	6021      	streq	r1, [r4, #0]
 8004d08:	e7ed      	b.n	8004ce6 <_free_r+0x22>
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	b10b      	cbz	r3, 8004d14 <_free_r+0x50>
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d9fa      	bls.n	8004d0a <_free_r+0x46>
 8004d14:	6811      	ldr	r1, [r2, #0]
 8004d16:	1855      	adds	r5, r2, r1
 8004d18:	42a5      	cmp	r5, r4
 8004d1a:	d10b      	bne.n	8004d34 <_free_r+0x70>
 8004d1c:	6824      	ldr	r4, [r4, #0]
 8004d1e:	4421      	add	r1, r4
 8004d20:	1854      	adds	r4, r2, r1
 8004d22:	42a3      	cmp	r3, r4
 8004d24:	6011      	str	r1, [r2, #0]
 8004d26:	d1e0      	bne.n	8004cea <_free_r+0x26>
 8004d28:	681c      	ldr	r4, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	6053      	str	r3, [r2, #4]
 8004d2e:	4421      	add	r1, r4
 8004d30:	6011      	str	r1, [r2, #0]
 8004d32:	e7da      	b.n	8004cea <_free_r+0x26>
 8004d34:	d902      	bls.n	8004d3c <_free_r+0x78>
 8004d36:	230c      	movs	r3, #12
 8004d38:	6003      	str	r3, [r0, #0]
 8004d3a:	e7d6      	b.n	8004cea <_free_r+0x26>
 8004d3c:	6825      	ldr	r5, [r4, #0]
 8004d3e:	1961      	adds	r1, r4, r5
 8004d40:	428b      	cmp	r3, r1
 8004d42:	bf04      	itt	eq
 8004d44:	6819      	ldreq	r1, [r3, #0]
 8004d46:	685b      	ldreq	r3, [r3, #4]
 8004d48:	6063      	str	r3, [r4, #4]
 8004d4a:	bf04      	itt	eq
 8004d4c:	1949      	addeq	r1, r1, r5
 8004d4e:	6021      	streq	r1, [r4, #0]
 8004d50:	6054      	str	r4, [r2, #4]
 8004d52:	e7ca      	b.n	8004cea <_free_r+0x26>
 8004d54:	b003      	add	sp, #12
 8004d56:	bd30      	pop	{r4, r5, pc}
 8004d58:	2000150c 	.word	0x2000150c

08004d5c <sbrk_aligned>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	4e0e      	ldr	r6, [pc, #56]	; (8004d98 <sbrk_aligned+0x3c>)
 8004d60:	460c      	mov	r4, r1
 8004d62:	6831      	ldr	r1, [r6, #0]
 8004d64:	4605      	mov	r5, r0
 8004d66:	b911      	cbnz	r1, 8004d6e <sbrk_aligned+0x12>
 8004d68:	f000 fd84 	bl	8005874 <_sbrk_r>
 8004d6c:	6030      	str	r0, [r6, #0]
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 fd7f 	bl	8005874 <_sbrk_r>
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	d00a      	beq.n	8004d90 <sbrk_aligned+0x34>
 8004d7a:	1cc4      	adds	r4, r0, #3
 8004d7c:	f024 0403 	bic.w	r4, r4, #3
 8004d80:	42a0      	cmp	r0, r4
 8004d82:	d007      	beq.n	8004d94 <sbrk_aligned+0x38>
 8004d84:	1a21      	subs	r1, r4, r0
 8004d86:	4628      	mov	r0, r5
 8004d88:	f000 fd74 	bl	8005874 <_sbrk_r>
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d101      	bne.n	8004d94 <sbrk_aligned+0x38>
 8004d90:	f04f 34ff 	mov.w	r4, #4294967295
 8004d94:	4620      	mov	r0, r4
 8004d96:	bd70      	pop	{r4, r5, r6, pc}
 8004d98:	20001510 	.word	0x20001510

08004d9c <_malloc_r>:
 8004d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da0:	1ccd      	adds	r5, r1, #3
 8004da2:	f025 0503 	bic.w	r5, r5, #3
 8004da6:	3508      	adds	r5, #8
 8004da8:	2d0c      	cmp	r5, #12
 8004daa:	bf38      	it	cc
 8004dac:	250c      	movcc	r5, #12
 8004dae:	2d00      	cmp	r5, #0
 8004db0:	4607      	mov	r7, r0
 8004db2:	db01      	blt.n	8004db8 <_malloc_r+0x1c>
 8004db4:	42a9      	cmp	r1, r5
 8004db6:	d905      	bls.n	8004dc4 <_malloc_r+0x28>
 8004db8:	230c      	movs	r3, #12
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	2600      	movs	r6, #0
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc4:	4e2e      	ldr	r6, [pc, #184]	; (8004e80 <_malloc_r+0xe4>)
 8004dc6:	f001 feed 	bl	8006ba4 <__malloc_lock>
 8004dca:	6833      	ldr	r3, [r6, #0]
 8004dcc:	461c      	mov	r4, r3
 8004dce:	bb34      	cbnz	r4, 8004e1e <_malloc_r+0x82>
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	f7ff ffc2 	bl	8004d5c <sbrk_aligned>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	4604      	mov	r4, r0
 8004ddc:	d14d      	bne.n	8004e7a <_malloc_r+0xde>
 8004dde:	6834      	ldr	r4, [r6, #0]
 8004de0:	4626      	mov	r6, r4
 8004de2:	2e00      	cmp	r6, #0
 8004de4:	d140      	bne.n	8004e68 <_malloc_r+0xcc>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	4631      	mov	r1, r6
 8004dea:	4638      	mov	r0, r7
 8004dec:	eb04 0803 	add.w	r8, r4, r3
 8004df0:	f000 fd40 	bl	8005874 <_sbrk_r>
 8004df4:	4580      	cmp	r8, r0
 8004df6:	d13a      	bne.n	8004e6e <_malloc_r+0xd2>
 8004df8:	6821      	ldr	r1, [r4, #0]
 8004dfa:	3503      	adds	r5, #3
 8004dfc:	1a6d      	subs	r5, r5, r1
 8004dfe:	f025 0503 	bic.w	r5, r5, #3
 8004e02:	3508      	adds	r5, #8
 8004e04:	2d0c      	cmp	r5, #12
 8004e06:	bf38      	it	cc
 8004e08:	250c      	movcc	r5, #12
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f7ff ffa5 	bl	8004d5c <sbrk_aligned>
 8004e12:	3001      	adds	r0, #1
 8004e14:	d02b      	beq.n	8004e6e <_malloc_r+0xd2>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	442b      	add	r3, r5
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	e00e      	b.n	8004e3c <_malloc_r+0xa0>
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	1b52      	subs	r2, r2, r5
 8004e22:	d41e      	bmi.n	8004e62 <_malloc_r+0xc6>
 8004e24:	2a0b      	cmp	r2, #11
 8004e26:	d916      	bls.n	8004e56 <_malloc_r+0xba>
 8004e28:	1961      	adds	r1, r4, r5
 8004e2a:	42a3      	cmp	r3, r4
 8004e2c:	6025      	str	r5, [r4, #0]
 8004e2e:	bf18      	it	ne
 8004e30:	6059      	strne	r1, [r3, #4]
 8004e32:	6863      	ldr	r3, [r4, #4]
 8004e34:	bf08      	it	eq
 8004e36:	6031      	streq	r1, [r6, #0]
 8004e38:	5162      	str	r2, [r4, r5]
 8004e3a:	604b      	str	r3, [r1, #4]
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	f104 060b 	add.w	r6, r4, #11
 8004e42:	f001 feb5 	bl	8006bb0 <__malloc_unlock>
 8004e46:	f026 0607 	bic.w	r6, r6, #7
 8004e4a:	1d23      	adds	r3, r4, #4
 8004e4c:	1af2      	subs	r2, r6, r3
 8004e4e:	d0b6      	beq.n	8004dbe <_malloc_r+0x22>
 8004e50:	1b9b      	subs	r3, r3, r6
 8004e52:	50a3      	str	r3, [r4, r2]
 8004e54:	e7b3      	b.n	8004dbe <_malloc_r+0x22>
 8004e56:	6862      	ldr	r2, [r4, #4]
 8004e58:	42a3      	cmp	r3, r4
 8004e5a:	bf0c      	ite	eq
 8004e5c:	6032      	streq	r2, [r6, #0]
 8004e5e:	605a      	strne	r2, [r3, #4]
 8004e60:	e7ec      	b.n	8004e3c <_malloc_r+0xa0>
 8004e62:	4623      	mov	r3, r4
 8004e64:	6864      	ldr	r4, [r4, #4]
 8004e66:	e7b2      	b.n	8004dce <_malloc_r+0x32>
 8004e68:	4634      	mov	r4, r6
 8004e6a:	6876      	ldr	r6, [r6, #4]
 8004e6c:	e7b9      	b.n	8004de2 <_malloc_r+0x46>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4638      	mov	r0, r7
 8004e74:	f001 fe9c 	bl	8006bb0 <__malloc_unlock>
 8004e78:	e7a1      	b.n	8004dbe <_malloc_r+0x22>
 8004e7a:	6025      	str	r5, [r4, #0]
 8004e7c:	e7de      	b.n	8004e3c <_malloc_r+0xa0>
 8004e7e:	bf00      	nop
 8004e80:	2000150c 	.word	0x2000150c

08004e84 <__cvt>:
 8004e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	ec55 4b10 	vmov	r4, r5, d0
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	460e      	mov	r6, r1
 8004e90:	4619      	mov	r1, r3
 8004e92:	462b      	mov	r3, r5
 8004e94:	bfbb      	ittet	lt
 8004e96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e9a:	461d      	movlt	r5, r3
 8004e9c:	2300      	movge	r3, #0
 8004e9e:	232d      	movlt	r3, #45	; 0x2d
 8004ea0:	700b      	strb	r3, [r1, #0]
 8004ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ea4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ea8:	4691      	mov	r9, r2
 8004eaa:	f023 0820 	bic.w	r8, r3, #32
 8004eae:	bfbc      	itt	lt
 8004eb0:	4622      	movlt	r2, r4
 8004eb2:	4614      	movlt	r4, r2
 8004eb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eb8:	d005      	beq.n	8004ec6 <__cvt+0x42>
 8004eba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ebe:	d100      	bne.n	8004ec2 <__cvt+0x3e>
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	2102      	movs	r1, #2
 8004ec4:	e000      	b.n	8004ec8 <__cvt+0x44>
 8004ec6:	2103      	movs	r1, #3
 8004ec8:	ab03      	add	r3, sp, #12
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	ab02      	add	r3, sp, #8
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	ec45 4b10 	vmov	d0, r4, r5
 8004ed4:	4653      	mov	r3, sl
 8004ed6:	4632      	mov	r2, r6
 8004ed8:	f000 fe52 	bl	8005b80 <_dtoa_r>
 8004edc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	d102      	bne.n	8004eea <__cvt+0x66>
 8004ee4:	f019 0f01 	tst.w	r9, #1
 8004ee8:	d022      	beq.n	8004f30 <__cvt+0xac>
 8004eea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eee:	eb07 0906 	add.w	r9, r7, r6
 8004ef2:	d110      	bne.n	8004f16 <__cvt+0x92>
 8004ef4:	783b      	ldrb	r3, [r7, #0]
 8004ef6:	2b30      	cmp	r3, #48	; 0x30
 8004ef8:	d10a      	bne.n	8004f10 <__cvt+0x8c>
 8004efa:	2200      	movs	r2, #0
 8004efc:	2300      	movs	r3, #0
 8004efe:	4620      	mov	r0, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	f7fb fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f06:	b918      	cbnz	r0, 8004f10 <__cvt+0x8c>
 8004f08:	f1c6 0601 	rsb	r6, r6, #1
 8004f0c:	f8ca 6000 	str.w	r6, [sl]
 8004f10:	f8da 3000 	ldr.w	r3, [sl]
 8004f14:	4499      	add	r9, r3
 8004f16:	2200      	movs	r2, #0
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	f7fb fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f22:	b108      	cbz	r0, 8004f28 <__cvt+0xa4>
 8004f24:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f28:	2230      	movs	r2, #48	; 0x30
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	454b      	cmp	r3, r9
 8004f2e:	d307      	bcc.n	8004f40 <__cvt+0xbc>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f34:	1bdb      	subs	r3, r3, r7
 8004f36:	4638      	mov	r0, r7
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	b004      	add	sp, #16
 8004f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f40:	1c59      	adds	r1, r3, #1
 8004f42:	9103      	str	r1, [sp, #12]
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e7f0      	b.n	8004f2a <__cvt+0xa6>

08004f48 <__exponent>:
 8004f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	bfb8      	it	lt
 8004f50:	4249      	neglt	r1, r1
 8004f52:	f803 2b02 	strb.w	r2, [r3], #2
 8004f56:	bfb4      	ite	lt
 8004f58:	222d      	movlt	r2, #45	; 0x2d
 8004f5a:	222b      	movge	r2, #43	; 0x2b
 8004f5c:	2909      	cmp	r1, #9
 8004f5e:	7042      	strb	r2, [r0, #1]
 8004f60:	dd2a      	ble.n	8004fb8 <__exponent+0x70>
 8004f62:	f10d 0407 	add.w	r4, sp, #7
 8004f66:	46a4      	mov	ip, r4
 8004f68:	270a      	movs	r7, #10
 8004f6a:	46a6      	mov	lr, r4
 8004f6c:	460a      	mov	r2, r1
 8004f6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f72:	fb07 1516 	mls	r5, r7, r6, r1
 8004f76:	3530      	adds	r5, #48	; 0x30
 8004f78:	2a63      	cmp	r2, #99	; 0x63
 8004f7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f82:	4631      	mov	r1, r6
 8004f84:	dcf1      	bgt.n	8004f6a <__exponent+0x22>
 8004f86:	3130      	adds	r1, #48	; 0x30
 8004f88:	f1ae 0502 	sub.w	r5, lr, #2
 8004f8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f90:	1c44      	adds	r4, r0, #1
 8004f92:	4629      	mov	r1, r5
 8004f94:	4561      	cmp	r1, ip
 8004f96:	d30a      	bcc.n	8004fae <__exponent+0x66>
 8004f98:	f10d 0209 	add.w	r2, sp, #9
 8004f9c:	eba2 020e 	sub.w	r2, r2, lr
 8004fa0:	4565      	cmp	r5, ip
 8004fa2:	bf88      	it	hi
 8004fa4:	2200      	movhi	r2, #0
 8004fa6:	4413      	add	r3, r2
 8004fa8:	1a18      	subs	r0, r3, r0
 8004faa:	b003      	add	sp, #12
 8004fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004fb6:	e7ed      	b.n	8004f94 <__exponent+0x4c>
 8004fb8:	2330      	movs	r3, #48	; 0x30
 8004fba:	3130      	adds	r1, #48	; 0x30
 8004fbc:	7083      	strb	r3, [r0, #2]
 8004fbe:	70c1      	strb	r1, [r0, #3]
 8004fc0:	1d03      	adds	r3, r0, #4
 8004fc2:	e7f1      	b.n	8004fa8 <__exponent+0x60>

08004fc4 <_printf_float>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	ed2d 8b02 	vpush	{d8}
 8004fcc:	b08d      	sub	sp, #52	; 0x34
 8004fce:	460c      	mov	r4, r1
 8004fd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	461f      	mov	r7, r3
 8004fd8:	4605      	mov	r5, r0
 8004fda:	f001 fd77 	bl	8006acc <_localeconv_r>
 8004fde:	f8d0 a000 	ldr.w	sl, [r0]
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f7fb f8f4 	bl	80001d0 <strlen>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	930a      	str	r3, [sp, #40]	; 0x28
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	9305      	str	r3, [sp, #20]
 8004ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ff8:	3307      	adds	r3, #7
 8004ffa:	f023 0307 	bic.w	r3, r3, #7
 8004ffe:	f103 0208 	add.w	r2, r3, #8
 8005002:	f8c8 2000 	str.w	r2, [r8]
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800500e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005012:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005016:	9307      	str	r3, [sp, #28]
 8005018:	f8cd 8018 	str.w	r8, [sp, #24]
 800501c:	ee08 0a10 	vmov	s16, r0
 8005020:	4b9f      	ldr	r3, [pc, #636]	; (80052a0 <_printf_float+0x2dc>)
 8005022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	f7fb fd7f 	bl	8000b2c <__aeabi_dcmpun>
 800502e:	bb88      	cbnz	r0, 8005094 <_printf_float+0xd0>
 8005030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005034:	4b9a      	ldr	r3, [pc, #616]	; (80052a0 <_printf_float+0x2dc>)
 8005036:	f04f 32ff 	mov.w	r2, #4294967295
 800503a:	f7fb fd59 	bl	8000af0 <__aeabi_dcmple>
 800503e:	bb48      	cbnz	r0, 8005094 <_printf_float+0xd0>
 8005040:	2200      	movs	r2, #0
 8005042:	2300      	movs	r3, #0
 8005044:	4640      	mov	r0, r8
 8005046:	4649      	mov	r1, r9
 8005048:	f7fb fd48 	bl	8000adc <__aeabi_dcmplt>
 800504c:	b110      	cbz	r0, 8005054 <_printf_float+0x90>
 800504e:	232d      	movs	r3, #45	; 0x2d
 8005050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005054:	4b93      	ldr	r3, [pc, #588]	; (80052a4 <_printf_float+0x2e0>)
 8005056:	4894      	ldr	r0, [pc, #592]	; (80052a8 <_printf_float+0x2e4>)
 8005058:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800505c:	bf94      	ite	ls
 800505e:	4698      	movls	r8, r3
 8005060:	4680      	movhi	r8, r0
 8005062:	2303      	movs	r3, #3
 8005064:	6123      	str	r3, [r4, #16]
 8005066:	9b05      	ldr	r3, [sp, #20]
 8005068:	f023 0204 	bic.w	r2, r3, #4
 800506c:	6022      	str	r2, [r4, #0]
 800506e:	f04f 0900 	mov.w	r9, #0
 8005072:	9700      	str	r7, [sp, #0]
 8005074:	4633      	mov	r3, r6
 8005076:	aa0b      	add	r2, sp, #44	; 0x2c
 8005078:	4621      	mov	r1, r4
 800507a:	4628      	mov	r0, r5
 800507c:	f000 f9d8 	bl	8005430 <_printf_common>
 8005080:	3001      	adds	r0, #1
 8005082:	f040 8090 	bne.w	80051a6 <_printf_float+0x1e2>
 8005086:	f04f 30ff 	mov.w	r0, #4294967295
 800508a:	b00d      	add	sp, #52	; 0x34
 800508c:	ecbd 8b02 	vpop	{d8}
 8005090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005094:	4642      	mov	r2, r8
 8005096:	464b      	mov	r3, r9
 8005098:	4640      	mov	r0, r8
 800509a:	4649      	mov	r1, r9
 800509c:	f7fb fd46 	bl	8000b2c <__aeabi_dcmpun>
 80050a0:	b140      	cbz	r0, 80050b4 <_printf_float+0xf0>
 80050a2:	464b      	mov	r3, r9
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bfbc      	itt	lt
 80050a8:	232d      	movlt	r3, #45	; 0x2d
 80050aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050ae:	487f      	ldr	r0, [pc, #508]	; (80052ac <_printf_float+0x2e8>)
 80050b0:	4b7f      	ldr	r3, [pc, #508]	; (80052b0 <_printf_float+0x2ec>)
 80050b2:	e7d1      	b.n	8005058 <_printf_float+0x94>
 80050b4:	6863      	ldr	r3, [r4, #4]
 80050b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050ba:	9206      	str	r2, [sp, #24]
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	d13f      	bne.n	8005140 <_printf_float+0x17c>
 80050c0:	2306      	movs	r3, #6
 80050c2:	6063      	str	r3, [r4, #4]
 80050c4:	9b05      	ldr	r3, [sp, #20]
 80050c6:	6861      	ldr	r1, [r4, #4]
 80050c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050cc:	2300      	movs	r3, #0
 80050ce:	9303      	str	r3, [sp, #12]
 80050d0:	ab0a      	add	r3, sp, #40	; 0x28
 80050d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050d6:	ab09      	add	r3, sp, #36	; 0x24
 80050d8:	ec49 8b10 	vmov	d0, r8, r9
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	6022      	str	r2, [r4, #0]
 80050e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050e4:	4628      	mov	r0, r5
 80050e6:	f7ff fecd 	bl	8004e84 <__cvt>
 80050ea:	9b06      	ldr	r3, [sp, #24]
 80050ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050ee:	2b47      	cmp	r3, #71	; 0x47
 80050f0:	4680      	mov	r8, r0
 80050f2:	d108      	bne.n	8005106 <_printf_float+0x142>
 80050f4:	1cc8      	adds	r0, r1, #3
 80050f6:	db02      	blt.n	80050fe <_printf_float+0x13a>
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	4299      	cmp	r1, r3
 80050fc:	dd41      	ble.n	8005182 <_printf_float+0x1be>
 80050fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8005102:	fa5f fb8b 	uxtb.w	fp, fp
 8005106:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800510a:	d820      	bhi.n	800514e <_printf_float+0x18a>
 800510c:	3901      	subs	r1, #1
 800510e:	465a      	mov	r2, fp
 8005110:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005114:	9109      	str	r1, [sp, #36]	; 0x24
 8005116:	f7ff ff17 	bl	8004f48 <__exponent>
 800511a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800511c:	1813      	adds	r3, r2, r0
 800511e:	2a01      	cmp	r2, #1
 8005120:	4681      	mov	r9, r0
 8005122:	6123      	str	r3, [r4, #16]
 8005124:	dc02      	bgt.n	800512c <_printf_float+0x168>
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	07d2      	lsls	r2, r2, #31
 800512a:	d501      	bpl.n	8005130 <_printf_float+0x16c>
 800512c:	3301      	adds	r3, #1
 800512e:	6123      	str	r3, [r4, #16]
 8005130:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005134:	2b00      	cmp	r3, #0
 8005136:	d09c      	beq.n	8005072 <_printf_float+0xae>
 8005138:	232d      	movs	r3, #45	; 0x2d
 800513a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513e:	e798      	b.n	8005072 <_printf_float+0xae>
 8005140:	9a06      	ldr	r2, [sp, #24]
 8005142:	2a47      	cmp	r2, #71	; 0x47
 8005144:	d1be      	bne.n	80050c4 <_printf_float+0x100>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1bc      	bne.n	80050c4 <_printf_float+0x100>
 800514a:	2301      	movs	r3, #1
 800514c:	e7b9      	b.n	80050c2 <_printf_float+0xfe>
 800514e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005152:	d118      	bne.n	8005186 <_printf_float+0x1c2>
 8005154:	2900      	cmp	r1, #0
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	dd0b      	ble.n	8005172 <_printf_float+0x1ae>
 800515a:	6121      	str	r1, [r4, #16]
 800515c:	b913      	cbnz	r3, 8005164 <_printf_float+0x1a0>
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	07d0      	lsls	r0, r2, #31
 8005162:	d502      	bpl.n	800516a <_printf_float+0x1a6>
 8005164:	3301      	adds	r3, #1
 8005166:	440b      	add	r3, r1
 8005168:	6123      	str	r3, [r4, #16]
 800516a:	65a1      	str	r1, [r4, #88]	; 0x58
 800516c:	f04f 0900 	mov.w	r9, #0
 8005170:	e7de      	b.n	8005130 <_printf_float+0x16c>
 8005172:	b913      	cbnz	r3, 800517a <_printf_float+0x1b6>
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	07d2      	lsls	r2, r2, #31
 8005178:	d501      	bpl.n	800517e <_printf_float+0x1ba>
 800517a:	3302      	adds	r3, #2
 800517c:	e7f4      	b.n	8005168 <_printf_float+0x1a4>
 800517e:	2301      	movs	r3, #1
 8005180:	e7f2      	b.n	8005168 <_printf_float+0x1a4>
 8005182:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005188:	4299      	cmp	r1, r3
 800518a:	db05      	blt.n	8005198 <_printf_float+0x1d4>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	6121      	str	r1, [r4, #16]
 8005190:	07d8      	lsls	r0, r3, #31
 8005192:	d5ea      	bpl.n	800516a <_printf_float+0x1a6>
 8005194:	1c4b      	adds	r3, r1, #1
 8005196:	e7e7      	b.n	8005168 <_printf_float+0x1a4>
 8005198:	2900      	cmp	r1, #0
 800519a:	bfd4      	ite	le
 800519c:	f1c1 0202 	rsble	r2, r1, #2
 80051a0:	2201      	movgt	r2, #1
 80051a2:	4413      	add	r3, r2
 80051a4:	e7e0      	b.n	8005168 <_printf_float+0x1a4>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	055a      	lsls	r2, r3, #21
 80051aa:	d407      	bmi.n	80051bc <_printf_float+0x1f8>
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	4642      	mov	r2, r8
 80051b0:	4631      	mov	r1, r6
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	d12c      	bne.n	8005214 <_printf_float+0x250>
 80051ba:	e764      	b.n	8005086 <_printf_float+0xc2>
 80051bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051c0:	f240 80e0 	bls.w	8005384 <_printf_float+0x3c0>
 80051c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051c8:	2200      	movs	r2, #0
 80051ca:	2300      	movs	r3, #0
 80051cc:	f7fb fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d034      	beq.n	800523e <_printf_float+0x27a>
 80051d4:	4a37      	ldr	r2, [pc, #220]	; (80052b4 <_printf_float+0x2f0>)
 80051d6:	2301      	movs	r3, #1
 80051d8:	4631      	mov	r1, r6
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	f43f af51 	beq.w	8005086 <_printf_float+0xc2>
 80051e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051e8:	429a      	cmp	r2, r3
 80051ea:	db02      	blt.n	80051f2 <_printf_float+0x22e>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	07d8      	lsls	r0, r3, #31
 80051f0:	d510      	bpl.n	8005214 <_printf_float+0x250>
 80051f2:	ee18 3a10 	vmov	r3, s16
 80051f6:	4652      	mov	r2, sl
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f af41 	beq.w	8005086 <_printf_float+0xc2>
 8005204:	f04f 0800 	mov.w	r8, #0
 8005208:	f104 091a 	add.w	r9, r4, #26
 800520c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520e:	3b01      	subs	r3, #1
 8005210:	4543      	cmp	r3, r8
 8005212:	dc09      	bgt.n	8005228 <_printf_float+0x264>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	079b      	lsls	r3, r3, #30
 8005218:	f100 8105 	bmi.w	8005426 <_printf_float+0x462>
 800521c:	68e0      	ldr	r0, [r4, #12]
 800521e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005220:	4298      	cmp	r0, r3
 8005222:	bfb8      	it	lt
 8005224:	4618      	movlt	r0, r3
 8005226:	e730      	b.n	800508a <_printf_float+0xc6>
 8005228:	2301      	movs	r3, #1
 800522a:	464a      	mov	r2, r9
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	f43f af27 	beq.w	8005086 <_printf_float+0xc2>
 8005238:	f108 0801 	add.w	r8, r8, #1
 800523c:	e7e6      	b.n	800520c <_printf_float+0x248>
 800523e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	dc39      	bgt.n	80052b8 <_printf_float+0x2f4>
 8005244:	4a1b      	ldr	r2, [pc, #108]	; (80052b4 <_printf_float+0x2f0>)
 8005246:	2301      	movs	r3, #1
 8005248:	4631      	mov	r1, r6
 800524a:	4628      	mov	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	f43f af19 	beq.w	8005086 <_printf_float+0xc2>
 8005254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005258:	4313      	orrs	r3, r2
 800525a:	d102      	bne.n	8005262 <_printf_float+0x29e>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	07d9      	lsls	r1, r3, #31
 8005260:	d5d8      	bpl.n	8005214 <_printf_float+0x250>
 8005262:	ee18 3a10 	vmov	r3, s16
 8005266:	4652      	mov	r2, sl
 8005268:	4631      	mov	r1, r6
 800526a:	4628      	mov	r0, r5
 800526c:	47b8      	blx	r7
 800526e:	3001      	adds	r0, #1
 8005270:	f43f af09 	beq.w	8005086 <_printf_float+0xc2>
 8005274:	f04f 0900 	mov.w	r9, #0
 8005278:	f104 0a1a 	add.w	sl, r4, #26
 800527c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800527e:	425b      	negs	r3, r3
 8005280:	454b      	cmp	r3, r9
 8005282:	dc01      	bgt.n	8005288 <_printf_float+0x2c4>
 8005284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005286:	e792      	b.n	80051ae <_printf_float+0x1ea>
 8005288:	2301      	movs	r3, #1
 800528a:	4652      	mov	r2, sl
 800528c:	4631      	mov	r1, r6
 800528e:	4628      	mov	r0, r5
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	f43f aef7 	beq.w	8005086 <_printf_float+0xc2>
 8005298:	f109 0901 	add.w	r9, r9, #1
 800529c:	e7ee      	b.n	800527c <_printf_float+0x2b8>
 800529e:	bf00      	nop
 80052a0:	7fefffff 	.word	0x7fefffff
 80052a4:	08011f0c 	.word	0x08011f0c
 80052a8:	08011f10 	.word	0x08011f10
 80052ac:	08011f18 	.word	0x08011f18
 80052b0:	08011f14 	.word	0x08011f14
 80052b4:	08011f1c 	.word	0x08011f1c
 80052b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052bc:	429a      	cmp	r2, r3
 80052be:	bfa8      	it	ge
 80052c0:	461a      	movge	r2, r3
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	4691      	mov	r9, r2
 80052c6:	dc37      	bgt.n	8005338 <_printf_float+0x374>
 80052c8:	f04f 0b00 	mov.w	fp, #0
 80052cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052d0:	f104 021a 	add.w	r2, r4, #26
 80052d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052d6:	9305      	str	r3, [sp, #20]
 80052d8:	eba3 0309 	sub.w	r3, r3, r9
 80052dc:	455b      	cmp	r3, fp
 80052de:	dc33      	bgt.n	8005348 <_printf_float+0x384>
 80052e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e4:	429a      	cmp	r2, r3
 80052e6:	db3b      	blt.n	8005360 <_printf_float+0x39c>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	07da      	lsls	r2, r3, #31
 80052ec:	d438      	bmi.n	8005360 <_printf_float+0x39c>
 80052ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f0:	9a05      	ldr	r2, [sp, #20]
 80052f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052f4:	1a9a      	subs	r2, r3, r2
 80052f6:	eba3 0901 	sub.w	r9, r3, r1
 80052fa:	4591      	cmp	r9, r2
 80052fc:	bfa8      	it	ge
 80052fe:	4691      	movge	r9, r2
 8005300:	f1b9 0f00 	cmp.w	r9, #0
 8005304:	dc35      	bgt.n	8005372 <_printf_float+0x3ae>
 8005306:	f04f 0800 	mov.w	r8, #0
 800530a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800530e:	f104 0a1a 	add.w	sl, r4, #26
 8005312:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	eba3 0309 	sub.w	r3, r3, r9
 800531c:	4543      	cmp	r3, r8
 800531e:	f77f af79 	ble.w	8005214 <_printf_float+0x250>
 8005322:	2301      	movs	r3, #1
 8005324:	4652      	mov	r2, sl
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	f43f aeaa 	beq.w	8005086 <_printf_float+0xc2>
 8005332:	f108 0801 	add.w	r8, r8, #1
 8005336:	e7ec      	b.n	8005312 <_printf_float+0x34e>
 8005338:	4613      	mov	r3, r2
 800533a:	4631      	mov	r1, r6
 800533c:	4642      	mov	r2, r8
 800533e:	4628      	mov	r0, r5
 8005340:	47b8      	blx	r7
 8005342:	3001      	adds	r0, #1
 8005344:	d1c0      	bne.n	80052c8 <_printf_float+0x304>
 8005346:	e69e      	b.n	8005086 <_printf_float+0xc2>
 8005348:	2301      	movs	r3, #1
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	9205      	str	r2, [sp, #20]
 8005350:	47b8      	blx	r7
 8005352:	3001      	adds	r0, #1
 8005354:	f43f ae97 	beq.w	8005086 <_printf_float+0xc2>
 8005358:	9a05      	ldr	r2, [sp, #20]
 800535a:	f10b 0b01 	add.w	fp, fp, #1
 800535e:	e7b9      	b.n	80052d4 <_printf_float+0x310>
 8005360:	ee18 3a10 	vmov	r3, s16
 8005364:	4652      	mov	r2, sl
 8005366:	4631      	mov	r1, r6
 8005368:	4628      	mov	r0, r5
 800536a:	47b8      	blx	r7
 800536c:	3001      	adds	r0, #1
 800536e:	d1be      	bne.n	80052ee <_printf_float+0x32a>
 8005370:	e689      	b.n	8005086 <_printf_float+0xc2>
 8005372:	9a05      	ldr	r2, [sp, #20]
 8005374:	464b      	mov	r3, r9
 8005376:	4442      	add	r2, r8
 8005378:	4631      	mov	r1, r6
 800537a:	4628      	mov	r0, r5
 800537c:	47b8      	blx	r7
 800537e:	3001      	adds	r0, #1
 8005380:	d1c1      	bne.n	8005306 <_printf_float+0x342>
 8005382:	e680      	b.n	8005086 <_printf_float+0xc2>
 8005384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005386:	2a01      	cmp	r2, #1
 8005388:	dc01      	bgt.n	800538e <_printf_float+0x3ca>
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	d538      	bpl.n	8005400 <_printf_float+0x43c>
 800538e:	2301      	movs	r3, #1
 8005390:	4642      	mov	r2, r8
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	f43f ae74 	beq.w	8005086 <_printf_float+0xc2>
 800539e:	ee18 3a10 	vmov	r3, s16
 80053a2:	4652      	mov	r2, sl
 80053a4:	4631      	mov	r1, r6
 80053a6:	4628      	mov	r0, r5
 80053a8:	47b8      	blx	r7
 80053aa:	3001      	adds	r0, #1
 80053ac:	f43f ae6b 	beq.w	8005086 <_printf_float+0xc2>
 80053b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053b4:	2200      	movs	r2, #0
 80053b6:	2300      	movs	r3, #0
 80053b8:	f7fb fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80053bc:	b9d8      	cbnz	r0, 80053f6 <_printf_float+0x432>
 80053be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c0:	f108 0201 	add.w	r2, r8, #1
 80053c4:	3b01      	subs	r3, #1
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	47b8      	blx	r7
 80053cc:	3001      	adds	r0, #1
 80053ce:	d10e      	bne.n	80053ee <_printf_float+0x42a>
 80053d0:	e659      	b.n	8005086 <_printf_float+0xc2>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4652      	mov	r2, sl
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae52 	beq.w	8005086 <_printf_float+0xc2>
 80053e2:	f108 0801 	add.w	r8, r8, #1
 80053e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	4543      	cmp	r3, r8
 80053ec:	dcf1      	bgt.n	80053d2 <_printf_float+0x40e>
 80053ee:	464b      	mov	r3, r9
 80053f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053f4:	e6dc      	b.n	80051b0 <_printf_float+0x1ec>
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	f104 0a1a 	add.w	sl, r4, #26
 80053fe:	e7f2      	b.n	80053e6 <_printf_float+0x422>
 8005400:	2301      	movs	r3, #1
 8005402:	4642      	mov	r2, r8
 8005404:	e7df      	b.n	80053c6 <_printf_float+0x402>
 8005406:	2301      	movs	r3, #1
 8005408:	464a      	mov	r2, r9
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f ae38 	beq.w	8005086 <_printf_float+0xc2>
 8005416:	f108 0801 	add.w	r8, r8, #1
 800541a:	68e3      	ldr	r3, [r4, #12]
 800541c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800541e:	1a5b      	subs	r3, r3, r1
 8005420:	4543      	cmp	r3, r8
 8005422:	dcf0      	bgt.n	8005406 <_printf_float+0x442>
 8005424:	e6fa      	b.n	800521c <_printf_float+0x258>
 8005426:	f04f 0800 	mov.w	r8, #0
 800542a:	f104 0919 	add.w	r9, r4, #25
 800542e:	e7f4      	b.n	800541a <_printf_float+0x456>

08005430 <_printf_common>:
 8005430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	4616      	mov	r6, r2
 8005436:	4699      	mov	r9, r3
 8005438:	688a      	ldr	r2, [r1, #8]
 800543a:	690b      	ldr	r3, [r1, #16]
 800543c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005440:	4293      	cmp	r3, r2
 8005442:	bfb8      	it	lt
 8005444:	4613      	movlt	r3, r2
 8005446:	6033      	str	r3, [r6, #0]
 8005448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800544c:	4607      	mov	r7, r0
 800544e:	460c      	mov	r4, r1
 8005450:	b10a      	cbz	r2, 8005456 <_printf_common+0x26>
 8005452:	3301      	adds	r3, #1
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	0699      	lsls	r1, r3, #26
 800545a:	bf42      	ittt	mi
 800545c:	6833      	ldrmi	r3, [r6, #0]
 800545e:	3302      	addmi	r3, #2
 8005460:	6033      	strmi	r3, [r6, #0]
 8005462:	6825      	ldr	r5, [r4, #0]
 8005464:	f015 0506 	ands.w	r5, r5, #6
 8005468:	d106      	bne.n	8005478 <_printf_common+0x48>
 800546a:	f104 0a19 	add.w	sl, r4, #25
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	6832      	ldr	r2, [r6, #0]
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	42ab      	cmp	r3, r5
 8005476:	dc26      	bgt.n	80054c6 <_printf_common+0x96>
 8005478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800547c:	1e13      	subs	r3, r2, #0
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	bf18      	it	ne
 8005482:	2301      	movne	r3, #1
 8005484:	0692      	lsls	r2, r2, #26
 8005486:	d42b      	bmi.n	80054e0 <_printf_common+0xb0>
 8005488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800548c:	4649      	mov	r1, r9
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	3001      	adds	r0, #1
 8005494:	d01e      	beq.n	80054d4 <_printf_common+0xa4>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	68e5      	ldr	r5, [r4, #12]
 800549a:	6832      	ldr	r2, [r6, #0]
 800549c:	f003 0306 	and.w	r3, r3, #6
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	bf08      	it	eq
 80054a4:	1aad      	subeq	r5, r5, r2
 80054a6:	68a3      	ldr	r3, [r4, #8]
 80054a8:	6922      	ldr	r2, [r4, #16]
 80054aa:	bf0c      	ite	eq
 80054ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b0:	2500      	movne	r5, #0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	bfc4      	itt	gt
 80054b6:	1a9b      	subgt	r3, r3, r2
 80054b8:	18ed      	addgt	r5, r5, r3
 80054ba:	2600      	movs	r6, #0
 80054bc:	341a      	adds	r4, #26
 80054be:	42b5      	cmp	r5, r6
 80054c0:	d11a      	bne.n	80054f8 <_printf_common+0xc8>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e008      	b.n	80054d8 <_printf_common+0xa8>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4652      	mov	r2, sl
 80054ca:	4649      	mov	r1, r9
 80054cc:	4638      	mov	r0, r7
 80054ce:	47c0      	blx	r8
 80054d0:	3001      	adds	r0, #1
 80054d2:	d103      	bne.n	80054dc <_printf_common+0xac>
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054dc:	3501      	adds	r5, #1
 80054de:	e7c6      	b.n	800546e <_printf_common+0x3e>
 80054e0:	18e1      	adds	r1, r4, r3
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	2030      	movs	r0, #48	; 0x30
 80054e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ea:	4422      	add	r2, r4
 80054ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f4:	3302      	adds	r3, #2
 80054f6:	e7c7      	b.n	8005488 <_printf_common+0x58>
 80054f8:	2301      	movs	r3, #1
 80054fa:	4622      	mov	r2, r4
 80054fc:	4649      	mov	r1, r9
 80054fe:	4638      	mov	r0, r7
 8005500:	47c0      	blx	r8
 8005502:	3001      	adds	r0, #1
 8005504:	d0e6      	beq.n	80054d4 <_printf_common+0xa4>
 8005506:	3601      	adds	r6, #1
 8005508:	e7d9      	b.n	80054be <_printf_common+0x8e>
	...

0800550c <_printf_i>:
 800550c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	7e0f      	ldrb	r7, [r1, #24]
 8005512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005514:	2f78      	cmp	r7, #120	; 0x78
 8005516:	4691      	mov	r9, r2
 8005518:	4680      	mov	r8, r0
 800551a:	460c      	mov	r4, r1
 800551c:	469a      	mov	sl, r3
 800551e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005522:	d807      	bhi.n	8005534 <_printf_i+0x28>
 8005524:	2f62      	cmp	r7, #98	; 0x62
 8005526:	d80a      	bhi.n	800553e <_printf_i+0x32>
 8005528:	2f00      	cmp	r7, #0
 800552a:	f000 80d8 	beq.w	80056de <_printf_i+0x1d2>
 800552e:	2f58      	cmp	r7, #88	; 0x58
 8005530:	f000 80a3 	beq.w	800567a <_printf_i+0x16e>
 8005534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800553c:	e03a      	b.n	80055b4 <_printf_i+0xa8>
 800553e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005542:	2b15      	cmp	r3, #21
 8005544:	d8f6      	bhi.n	8005534 <_printf_i+0x28>
 8005546:	a101      	add	r1, pc, #4	; (adr r1, 800554c <_printf_i+0x40>)
 8005548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800554c:	080055a5 	.word	0x080055a5
 8005550:	080055b9 	.word	0x080055b9
 8005554:	08005535 	.word	0x08005535
 8005558:	08005535 	.word	0x08005535
 800555c:	08005535 	.word	0x08005535
 8005560:	08005535 	.word	0x08005535
 8005564:	080055b9 	.word	0x080055b9
 8005568:	08005535 	.word	0x08005535
 800556c:	08005535 	.word	0x08005535
 8005570:	08005535 	.word	0x08005535
 8005574:	08005535 	.word	0x08005535
 8005578:	080056c5 	.word	0x080056c5
 800557c:	080055e9 	.word	0x080055e9
 8005580:	080056a7 	.word	0x080056a7
 8005584:	08005535 	.word	0x08005535
 8005588:	08005535 	.word	0x08005535
 800558c:	080056e7 	.word	0x080056e7
 8005590:	08005535 	.word	0x08005535
 8005594:	080055e9 	.word	0x080055e9
 8005598:	08005535 	.word	0x08005535
 800559c:	08005535 	.word	0x08005535
 80055a0:	080056af 	.word	0x080056af
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	1d1a      	adds	r2, r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	602a      	str	r2, [r5, #0]
 80055ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0a3      	b.n	8005700 <_printf_i+0x1f4>
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	6829      	ldr	r1, [r5, #0]
 80055bc:	0606      	lsls	r6, r0, #24
 80055be:	f101 0304 	add.w	r3, r1, #4
 80055c2:	d50a      	bpl.n	80055da <_printf_i+0xce>
 80055c4:	680e      	ldr	r6, [r1, #0]
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	2e00      	cmp	r6, #0
 80055ca:	da03      	bge.n	80055d4 <_printf_i+0xc8>
 80055cc:	232d      	movs	r3, #45	; 0x2d
 80055ce:	4276      	negs	r6, r6
 80055d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d4:	485e      	ldr	r0, [pc, #376]	; (8005750 <_printf_i+0x244>)
 80055d6:	230a      	movs	r3, #10
 80055d8:	e019      	b.n	800560e <_printf_i+0x102>
 80055da:	680e      	ldr	r6, [r1, #0]
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055e2:	bf18      	it	ne
 80055e4:	b236      	sxthne	r6, r6
 80055e6:	e7ef      	b.n	80055c8 <_printf_i+0xbc>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	1d19      	adds	r1, r3, #4
 80055ee:	6029      	str	r1, [r5, #0]
 80055f0:	0601      	lsls	r1, r0, #24
 80055f2:	d501      	bpl.n	80055f8 <_printf_i+0xec>
 80055f4:	681e      	ldr	r6, [r3, #0]
 80055f6:	e002      	b.n	80055fe <_printf_i+0xf2>
 80055f8:	0646      	lsls	r6, r0, #25
 80055fa:	d5fb      	bpl.n	80055f4 <_printf_i+0xe8>
 80055fc:	881e      	ldrh	r6, [r3, #0]
 80055fe:	4854      	ldr	r0, [pc, #336]	; (8005750 <_printf_i+0x244>)
 8005600:	2f6f      	cmp	r7, #111	; 0x6f
 8005602:	bf0c      	ite	eq
 8005604:	2308      	moveq	r3, #8
 8005606:	230a      	movne	r3, #10
 8005608:	2100      	movs	r1, #0
 800560a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800560e:	6865      	ldr	r5, [r4, #4]
 8005610:	60a5      	str	r5, [r4, #8]
 8005612:	2d00      	cmp	r5, #0
 8005614:	bfa2      	ittt	ge
 8005616:	6821      	ldrge	r1, [r4, #0]
 8005618:	f021 0104 	bicge.w	r1, r1, #4
 800561c:	6021      	strge	r1, [r4, #0]
 800561e:	b90e      	cbnz	r6, 8005624 <_printf_i+0x118>
 8005620:	2d00      	cmp	r5, #0
 8005622:	d04d      	beq.n	80056c0 <_printf_i+0x1b4>
 8005624:	4615      	mov	r5, r2
 8005626:	fbb6 f1f3 	udiv	r1, r6, r3
 800562a:	fb03 6711 	mls	r7, r3, r1, r6
 800562e:	5dc7      	ldrb	r7, [r0, r7]
 8005630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005634:	4637      	mov	r7, r6
 8005636:	42bb      	cmp	r3, r7
 8005638:	460e      	mov	r6, r1
 800563a:	d9f4      	bls.n	8005626 <_printf_i+0x11a>
 800563c:	2b08      	cmp	r3, #8
 800563e:	d10b      	bne.n	8005658 <_printf_i+0x14c>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	07de      	lsls	r6, r3, #31
 8005644:	d508      	bpl.n	8005658 <_printf_i+0x14c>
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	6861      	ldr	r1, [r4, #4]
 800564a:	4299      	cmp	r1, r3
 800564c:	bfde      	ittt	le
 800564e:	2330      	movle	r3, #48	; 0x30
 8005650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005658:	1b52      	subs	r2, r2, r5
 800565a:	6122      	str	r2, [r4, #16]
 800565c:	f8cd a000 	str.w	sl, [sp]
 8005660:	464b      	mov	r3, r9
 8005662:	aa03      	add	r2, sp, #12
 8005664:	4621      	mov	r1, r4
 8005666:	4640      	mov	r0, r8
 8005668:	f7ff fee2 	bl	8005430 <_printf_common>
 800566c:	3001      	adds	r0, #1
 800566e:	d14c      	bne.n	800570a <_printf_i+0x1fe>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	b004      	add	sp, #16
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567a:	4835      	ldr	r0, [pc, #212]	; (8005750 <_printf_i+0x244>)
 800567c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005680:	6829      	ldr	r1, [r5, #0]
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	f851 6b04 	ldr.w	r6, [r1], #4
 8005688:	6029      	str	r1, [r5, #0]
 800568a:	061d      	lsls	r5, r3, #24
 800568c:	d514      	bpl.n	80056b8 <_printf_i+0x1ac>
 800568e:	07df      	lsls	r7, r3, #31
 8005690:	bf44      	itt	mi
 8005692:	f043 0320 	orrmi.w	r3, r3, #32
 8005696:	6023      	strmi	r3, [r4, #0]
 8005698:	b91e      	cbnz	r6, 80056a2 <_printf_i+0x196>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f023 0320 	bic.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	2310      	movs	r3, #16
 80056a4:	e7b0      	b.n	8005608 <_printf_i+0xfc>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	f043 0320 	orr.w	r3, r3, #32
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	2378      	movs	r3, #120	; 0x78
 80056b0:	4828      	ldr	r0, [pc, #160]	; (8005754 <_printf_i+0x248>)
 80056b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056b6:	e7e3      	b.n	8005680 <_printf_i+0x174>
 80056b8:	0659      	lsls	r1, r3, #25
 80056ba:	bf48      	it	mi
 80056bc:	b2b6      	uxthmi	r6, r6
 80056be:	e7e6      	b.n	800568e <_printf_i+0x182>
 80056c0:	4615      	mov	r5, r2
 80056c2:	e7bb      	b.n	800563c <_printf_i+0x130>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	6826      	ldr	r6, [r4, #0]
 80056c8:	6961      	ldr	r1, [r4, #20]
 80056ca:	1d18      	adds	r0, r3, #4
 80056cc:	6028      	str	r0, [r5, #0]
 80056ce:	0635      	lsls	r5, r6, #24
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	d501      	bpl.n	80056d8 <_printf_i+0x1cc>
 80056d4:	6019      	str	r1, [r3, #0]
 80056d6:	e002      	b.n	80056de <_printf_i+0x1d2>
 80056d8:	0670      	lsls	r0, r6, #25
 80056da:	d5fb      	bpl.n	80056d4 <_printf_i+0x1c8>
 80056dc:	8019      	strh	r1, [r3, #0]
 80056de:	2300      	movs	r3, #0
 80056e0:	6123      	str	r3, [r4, #16]
 80056e2:	4615      	mov	r5, r2
 80056e4:	e7ba      	b.n	800565c <_printf_i+0x150>
 80056e6:	682b      	ldr	r3, [r5, #0]
 80056e8:	1d1a      	adds	r2, r3, #4
 80056ea:	602a      	str	r2, [r5, #0]
 80056ec:	681d      	ldr	r5, [r3, #0]
 80056ee:	6862      	ldr	r2, [r4, #4]
 80056f0:	2100      	movs	r1, #0
 80056f2:	4628      	mov	r0, r5
 80056f4:	f7fa fd74 	bl	80001e0 <memchr>
 80056f8:	b108      	cbz	r0, 80056fe <_printf_i+0x1f2>
 80056fa:	1b40      	subs	r0, r0, r5
 80056fc:	6060      	str	r0, [r4, #4]
 80056fe:	6863      	ldr	r3, [r4, #4]
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	2300      	movs	r3, #0
 8005704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005708:	e7a8      	b.n	800565c <_printf_i+0x150>
 800570a:	6923      	ldr	r3, [r4, #16]
 800570c:	462a      	mov	r2, r5
 800570e:	4649      	mov	r1, r9
 8005710:	4640      	mov	r0, r8
 8005712:	47d0      	blx	sl
 8005714:	3001      	adds	r0, #1
 8005716:	d0ab      	beq.n	8005670 <_printf_i+0x164>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	079b      	lsls	r3, r3, #30
 800571c:	d413      	bmi.n	8005746 <_printf_i+0x23a>
 800571e:	68e0      	ldr	r0, [r4, #12]
 8005720:	9b03      	ldr	r3, [sp, #12]
 8005722:	4298      	cmp	r0, r3
 8005724:	bfb8      	it	lt
 8005726:	4618      	movlt	r0, r3
 8005728:	e7a4      	b.n	8005674 <_printf_i+0x168>
 800572a:	2301      	movs	r3, #1
 800572c:	4632      	mov	r2, r6
 800572e:	4649      	mov	r1, r9
 8005730:	4640      	mov	r0, r8
 8005732:	47d0      	blx	sl
 8005734:	3001      	adds	r0, #1
 8005736:	d09b      	beq.n	8005670 <_printf_i+0x164>
 8005738:	3501      	adds	r5, #1
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	9903      	ldr	r1, [sp, #12]
 800573e:	1a5b      	subs	r3, r3, r1
 8005740:	42ab      	cmp	r3, r5
 8005742:	dcf2      	bgt.n	800572a <_printf_i+0x21e>
 8005744:	e7eb      	b.n	800571e <_printf_i+0x212>
 8005746:	2500      	movs	r5, #0
 8005748:	f104 0619 	add.w	r6, r4, #25
 800574c:	e7f5      	b.n	800573a <_printf_i+0x22e>
 800574e:	bf00      	nop
 8005750:	08011f1e 	.word	0x08011f1e
 8005754:	08011f2f 	.word	0x08011f2f

08005758 <iprintf>:
 8005758:	b40f      	push	{r0, r1, r2, r3}
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <iprintf+0x2c>)
 800575c:	b513      	push	{r0, r1, r4, lr}
 800575e:	681c      	ldr	r4, [r3, #0]
 8005760:	b124      	cbz	r4, 800576c <iprintf+0x14>
 8005762:	69a3      	ldr	r3, [r4, #24]
 8005764:	b913      	cbnz	r3, 800576c <iprintf+0x14>
 8005766:	4620      	mov	r0, r4
 8005768:	f001 f912 	bl	8006990 <__sinit>
 800576c:	ab05      	add	r3, sp, #20
 800576e:	9a04      	ldr	r2, [sp, #16]
 8005770:	68a1      	ldr	r1, [r4, #8]
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	4620      	mov	r0, r4
 8005776:	f001 ff6f 	bl	8007658 <_vfiprintf_r>
 800577a:	b002      	add	sp, #8
 800577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005780:	b004      	add	sp, #16
 8005782:	4770      	bx	lr
 8005784:	20000740 	.word	0x20000740

08005788 <_puts_r>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	460e      	mov	r6, r1
 800578c:	4605      	mov	r5, r0
 800578e:	b118      	cbz	r0, 8005798 <_puts_r+0x10>
 8005790:	6983      	ldr	r3, [r0, #24]
 8005792:	b90b      	cbnz	r3, 8005798 <_puts_r+0x10>
 8005794:	f001 f8fc 	bl	8006990 <__sinit>
 8005798:	69ab      	ldr	r3, [r5, #24]
 800579a:	68ac      	ldr	r4, [r5, #8]
 800579c:	b913      	cbnz	r3, 80057a4 <_puts_r+0x1c>
 800579e:	4628      	mov	r0, r5
 80057a0:	f001 f8f6 	bl	8006990 <__sinit>
 80057a4:	4b2c      	ldr	r3, [pc, #176]	; (8005858 <_puts_r+0xd0>)
 80057a6:	429c      	cmp	r4, r3
 80057a8:	d120      	bne.n	80057ec <_puts_r+0x64>
 80057aa:	686c      	ldr	r4, [r5, #4]
 80057ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057ae:	07db      	lsls	r3, r3, #31
 80057b0:	d405      	bmi.n	80057be <_puts_r+0x36>
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	0598      	lsls	r0, r3, #22
 80057b6:	d402      	bmi.n	80057be <_puts_r+0x36>
 80057b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ba:	f001 f98c 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	0719      	lsls	r1, r3, #28
 80057c2:	d51d      	bpl.n	8005800 <_puts_r+0x78>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	b1db      	cbz	r3, 8005800 <_puts_r+0x78>
 80057c8:	3e01      	subs	r6, #1
 80057ca:	68a3      	ldr	r3, [r4, #8]
 80057cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057d0:	3b01      	subs	r3, #1
 80057d2:	60a3      	str	r3, [r4, #8]
 80057d4:	bb39      	cbnz	r1, 8005826 <_puts_r+0x9e>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	da38      	bge.n	800584c <_puts_r+0xc4>
 80057da:	4622      	mov	r2, r4
 80057dc:	210a      	movs	r1, #10
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 f880 	bl	80058e4 <__swbuf_r>
 80057e4:	3001      	adds	r0, #1
 80057e6:	d011      	beq.n	800580c <_puts_r+0x84>
 80057e8:	250a      	movs	r5, #10
 80057ea:	e011      	b.n	8005810 <_puts_r+0x88>
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <_puts_r+0xd4>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d101      	bne.n	80057f6 <_puts_r+0x6e>
 80057f2:	68ac      	ldr	r4, [r5, #8]
 80057f4:	e7da      	b.n	80057ac <_puts_r+0x24>
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <_puts_r+0xd8>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	bf08      	it	eq
 80057fc:	68ec      	ldreq	r4, [r5, #12]
 80057fe:	e7d5      	b.n	80057ac <_puts_r+0x24>
 8005800:	4621      	mov	r1, r4
 8005802:	4628      	mov	r0, r5
 8005804:	f000 f8c0 	bl	8005988 <__swsetup_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	d0dd      	beq.n	80057c8 <_puts_r+0x40>
 800580c:	f04f 35ff 	mov.w	r5, #4294967295
 8005810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005812:	07da      	lsls	r2, r3, #31
 8005814:	d405      	bmi.n	8005822 <_puts_r+0x9a>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	059b      	lsls	r3, r3, #22
 800581a:	d402      	bmi.n	8005822 <_puts_r+0x9a>
 800581c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581e:	f001 f95b 	bl	8006ad8 <__retarget_lock_release_recursive>
 8005822:	4628      	mov	r0, r5
 8005824:	bd70      	pop	{r4, r5, r6, pc}
 8005826:	2b00      	cmp	r3, #0
 8005828:	da04      	bge.n	8005834 <_puts_r+0xac>
 800582a:	69a2      	ldr	r2, [r4, #24]
 800582c:	429a      	cmp	r2, r3
 800582e:	dc06      	bgt.n	800583e <_puts_r+0xb6>
 8005830:	290a      	cmp	r1, #10
 8005832:	d004      	beq.n	800583e <_puts_r+0xb6>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	6022      	str	r2, [r4, #0]
 800583a:	7019      	strb	r1, [r3, #0]
 800583c:	e7c5      	b.n	80057ca <_puts_r+0x42>
 800583e:	4622      	mov	r2, r4
 8005840:	4628      	mov	r0, r5
 8005842:	f000 f84f 	bl	80058e4 <__swbuf_r>
 8005846:	3001      	adds	r0, #1
 8005848:	d1bf      	bne.n	80057ca <_puts_r+0x42>
 800584a:	e7df      	b.n	800580c <_puts_r+0x84>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	250a      	movs	r5, #10
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	6022      	str	r2, [r4, #0]
 8005854:	701d      	strb	r5, [r3, #0]
 8005856:	e7db      	b.n	8005810 <_puts_r+0x88>
 8005858:	08011ff0 	.word	0x08011ff0
 800585c:	08012010 	.word	0x08012010
 8005860:	08011fd0 	.word	0x08011fd0

08005864 <puts>:
 8005864:	4b02      	ldr	r3, [pc, #8]	; (8005870 <puts+0xc>)
 8005866:	4601      	mov	r1, r0
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	f7ff bf8d 	b.w	8005788 <_puts_r>
 800586e:	bf00      	nop
 8005870:	20000740 	.word	0x20000740

08005874 <_sbrk_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d06      	ldr	r5, [pc, #24]	; (8005890 <_sbrk_r+0x1c>)
 8005878:	2300      	movs	r3, #0
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	f7fb fd44 	bl	800130c <_sbrk>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_sbrk_r+0x1a>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	b103      	cbz	r3, 800588e <_sbrk_r+0x1a>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	20001518 	.word	0x20001518

08005894 <siprintf>:
 8005894:	b40e      	push	{r1, r2, r3}
 8005896:	b500      	push	{lr}
 8005898:	b09c      	sub	sp, #112	; 0x70
 800589a:	ab1d      	add	r3, sp, #116	; 0x74
 800589c:	9002      	str	r0, [sp, #8]
 800589e:	9006      	str	r0, [sp, #24]
 80058a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058a4:	4809      	ldr	r0, [pc, #36]	; (80058cc <siprintf+0x38>)
 80058a6:	9107      	str	r1, [sp, #28]
 80058a8:	9104      	str	r1, [sp, #16]
 80058aa:	4909      	ldr	r1, [pc, #36]	; (80058d0 <siprintf+0x3c>)
 80058ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b0:	9105      	str	r1, [sp, #20]
 80058b2:	6800      	ldr	r0, [r0, #0]
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	a902      	add	r1, sp, #8
 80058b8:	f001 fda4 	bl	8007404 <_svfiprintf_r>
 80058bc:	9b02      	ldr	r3, [sp, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	b01c      	add	sp, #112	; 0x70
 80058c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c8:	b003      	add	sp, #12
 80058ca:	4770      	bx	lr
 80058cc:	20000740 	.word	0x20000740
 80058d0:	ffff0208 	.word	0xffff0208

080058d4 <strcpy>:
 80058d4:	4603      	mov	r3, r0
 80058d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058da:	f803 2b01 	strb.w	r2, [r3], #1
 80058de:	2a00      	cmp	r2, #0
 80058e0:	d1f9      	bne.n	80058d6 <strcpy+0x2>
 80058e2:	4770      	bx	lr

080058e4 <__swbuf_r>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	460e      	mov	r6, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	4605      	mov	r5, r0
 80058ec:	b118      	cbz	r0, 80058f6 <__swbuf_r+0x12>
 80058ee:	6983      	ldr	r3, [r0, #24]
 80058f0:	b90b      	cbnz	r3, 80058f6 <__swbuf_r+0x12>
 80058f2:	f001 f84d 	bl	8006990 <__sinit>
 80058f6:	4b21      	ldr	r3, [pc, #132]	; (800597c <__swbuf_r+0x98>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	d12b      	bne.n	8005954 <__swbuf_r+0x70>
 80058fc:	686c      	ldr	r4, [r5, #4]
 80058fe:	69a3      	ldr	r3, [r4, #24]
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	071a      	lsls	r2, r3, #28
 8005906:	d52f      	bpl.n	8005968 <__swbuf_r+0x84>
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	b36b      	cbz	r3, 8005968 <__swbuf_r+0x84>
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	1ac0      	subs	r0, r0, r3
 8005912:	6963      	ldr	r3, [r4, #20]
 8005914:	b2f6      	uxtb	r6, r6
 8005916:	4283      	cmp	r3, r0
 8005918:	4637      	mov	r7, r6
 800591a:	dc04      	bgt.n	8005926 <__swbuf_r+0x42>
 800591c:	4621      	mov	r1, r4
 800591e:	4628      	mov	r0, r5
 8005920:	f000 ffa2 	bl	8006868 <_fflush_r>
 8005924:	bb30      	cbnz	r0, 8005974 <__swbuf_r+0x90>
 8005926:	68a3      	ldr	r3, [r4, #8]
 8005928:	3b01      	subs	r3, #1
 800592a:	60a3      	str	r3, [r4, #8]
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	6022      	str	r2, [r4, #0]
 8005932:	701e      	strb	r6, [r3, #0]
 8005934:	6963      	ldr	r3, [r4, #20]
 8005936:	3001      	adds	r0, #1
 8005938:	4283      	cmp	r3, r0
 800593a:	d004      	beq.n	8005946 <__swbuf_r+0x62>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	07db      	lsls	r3, r3, #31
 8005940:	d506      	bpl.n	8005950 <__swbuf_r+0x6c>
 8005942:	2e0a      	cmp	r6, #10
 8005944:	d104      	bne.n	8005950 <__swbuf_r+0x6c>
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f000 ff8d 	bl	8006868 <_fflush_r>
 800594e:	b988      	cbnz	r0, 8005974 <__swbuf_r+0x90>
 8005950:	4638      	mov	r0, r7
 8005952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <__swbuf_r+0x9c>)
 8005956:	429c      	cmp	r4, r3
 8005958:	d101      	bne.n	800595e <__swbuf_r+0x7a>
 800595a:	68ac      	ldr	r4, [r5, #8]
 800595c:	e7cf      	b.n	80058fe <__swbuf_r+0x1a>
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <__swbuf_r+0xa0>)
 8005960:	429c      	cmp	r4, r3
 8005962:	bf08      	it	eq
 8005964:	68ec      	ldreq	r4, [r5, #12]
 8005966:	e7ca      	b.n	80058fe <__swbuf_r+0x1a>
 8005968:	4621      	mov	r1, r4
 800596a:	4628      	mov	r0, r5
 800596c:	f000 f80c 	bl	8005988 <__swsetup_r>
 8005970:	2800      	cmp	r0, #0
 8005972:	d0cb      	beq.n	800590c <__swbuf_r+0x28>
 8005974:	f04f 37ff 	mov.w	r7, #4294967295
 8005978:	e7ea      	b.n	8005950 <__swbuf_r+0x6c>
 800597a:	bf00      	nop
 800597c:	08011ff0 	.word	0x08011ff0
 8005980:	08012010 	.word	0x08012010
 8005984:	08011fd0 	.word	0x08011fd0

08005988 <__swsetup_r>:
 8005988:	4b32      	ldr	r3, [pc, #200]	; (8005a54 <__swsetup_r+0xcc>)
 800598a:	b570      	push	{r4, r5, r6, lr}
 800598c:	681d      	ldr	r5, [r3, #0]
 800598e:	4606      	mov	r6, r0
 8005990:	460c      	mov	r4, r1
 8005992:	b125      	cbz	r5, 800599e <__swsetup_r+0x16>
 8005994:	69ab      	ldr	r3, [r5, #24]
 8005996:	b913      	cbnz	r3, 800599e <__swsetup_r+0x16>
 8005998:	4628      	mov	r0, r5
 800599a:	f000 fff9 	bl	8006990 <__sinit>
 800599e:	4b2e      	ldr	r3, [pc, #184]	; (8005a58 <__swsetup_r+0xd0>)
 80059a0:	429c      	cmp	r4, r3
 80059a2:	d10f      	bne.n	80059c4 <__swsetup_r+0x3c>
 80059a4:	686c      	ldr	r4, [r5, #4]
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059ac:	0719      	lsls	r1, r3, #28
 80059ae:	d42c      	bmi.n	8005a0a <__swsetup_r+0x82>
 80059b0:	06dd      	lsls	r5, r3, #27
 80059b2:	d411      	bmi.n	80059d8 <__swsetup_r+0x50>
 80059b4:	2309      	movs	r3, #9
 80059b6:	6033      	str	r3, [r6, #0]
 80059b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	f04f 30ff 	mov.w	r0, #4294967295
 80059c2:	e03e      	b.n	8005a42 <__swsetup_r+0xba>
 80059c4:	4b25      	ldr	r3, [pc, #148]	; (8005a5c <__swsetup_r+0xd4>)
 80059c6:	429c      	cmp	r4, r3
 80059c8:	d101      	bne.n	80059ce <__swsetup_r+0x46>
 80059ca:	68ac      	ldr	r4, [r5, #8]
 80059cc:	e7eb      	b.n	80059a6 <__swsetup_r+0x1e>
 80059ce:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <__swsetup_r+0xd8>)
 80059d0:	429c      	cmp	r4, r3
 80059d2:	bf08      	it	eq
 80059d4:	68ec      	ldreq	r4, [r5, #12]
 80059d6:	e7e6      	b.n	80059a6 <__swsetup_r+0x1e>
 80059d8:	0758      	lsls	r0, r3, #29
 80059da:	d512      	bpl.n	8005a02 <__swsetup_r+0x7a>
 80059dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059de:	b141      	cbz	r1, 80059f2 <__swsetup_r+0x6a>
 80059e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059e4:	4299      	cmp	r1, r3
 80059e6:	d002      	beq.n	80059ee <__swsetup_r+0x66>
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff f96b 	bl	8004cc4 <_free_r>
 80059ee:	2300      	movs	r3, #0
 80059f0:	6363      	str	r3, [r4, #52]	; 0x34
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059f8:	81a3      	strh	r3, [r4, #12]
 80059fa:	2300      	movs	r3, #0
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	f043 0308 	orr.w	r3, r3, #8
 8005a08:	81a3      	strh	r3, [r4, #12]
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	b94b      	cbnz	r3, 8005a22 <__swsetup_r+0x9a>
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a18:	d003      	beq.n	8005a22 <__swsetup_r+0x9a>
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f001 f881 	bl	8006b24 <__smakebuf_r>
 8005a22:	89a0      	ldrh	r0, [r4, #12]
 8005a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a28:	f010 0301 	ands.w	r3, r0, #1
 8005a2c:	d00a      	beq.n	8005a44 <__swsetup_r+0xbc>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	6963      	ldr	r3, [r4, #20]
 8005a34:	425b      	negs	r3, r3
 8005a36:	61a3      	str	r3, [r4, #24]
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	b943      	cbnz	r3, 8005a4e <__swsetup_r+0xc6>
 8005a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a40:	d1ba      	bne.n	80059b8 <__swsetup_r+0x30>
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	0781      	lsls	r1, r0, #30
 8005a46:	bf58      	it	pl
 8005a48:	6963      	ldrpl	r3, [r4, #20]
 8005a4a:	60a3      	str	r3, [r4, #8]
 8005a4c:	e7f4      	b.n	8005a38 <__swsetup_r+0xb0>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e7f7      	b.n	8005a42 <__swsetup_r+0xba>
 8005a52:	bf00      	nop
 8005a54:	20000740 	.word	0x20000740
 8005a58:	08011ff0 	.word	0x08011ff0
 8005a5c:	08012010 	.word	0x08012010
 8005a60:	08011fd0 	.word	0x08011fd0

08005a64 <quorem>:
 8005a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a68:	6903      	ldr	r3, [r0, #16]
 8005a6a:	690c      	ldr	r4, [r1, #16]
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	4607      	mov	r7, r0
 8005a70:	f2c0 8081 	blt.w	8005b76 <quorem+0x112>
 8005a74:	3c01      	subs	r4, #1
 8005a76:	f101 0814 	add.w	r8, r1, #20
 8005a7a:	f100 0514 	add.w	r5, r0, #20
 8005a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a98:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a9c:	d331      	bcc.n	8005b02 <quorem+0x9e>
 8005a9e:	f04f 0e00 	mov.w	lr, #0
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	46ac      	mov	ip, r5
 8005aa6:	46f2      	mov	sl, lr
 8005aa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005aac:	b293      	uxth	r3, r2
 8005aae:	fb06 e303 	mla	r3, r6, r3, lr
 8005ab2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	ebaa 0303 	sub.w	r3, sl, r3
 8005abc:	f8dc a000 	ldr.w	sl, [ip]
 8005ac0:	0c12      	lsrs	r2, r2, #16
 8005ac2:	fa13 f38a 	uxtah	r3, r3, sl
 8005ac6:	fb06 e202 	mla	r2, r6, r2, lr
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	9b00      	ldr	r3, [sp, #0]
 8005ace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ad2:	b292      	uxth	r2, r2
 8005ad4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005adc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ae0:	4581      	cmp	r9, r0
 8005ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ae6:	f84c 3b04 	str.w	r3, [ip], #4
 8005aea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005aee:	d2db      	bcs.n	8005aa8 <quorem+0x44>
 8005af0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005af4:	b92b      	cbnz	r3, 8005b02 <quorem+0x9e>
 8005af6:	9b01      	ldr	r3, [sp, #4]
 8005af8:	3b04      	subs	r3, #4
 8005afa:	429d      	cmp	r5, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	d32e      	bcc.n	8005b5e <quorem+0xfa>
 8005b00:	613c      	str	r4, [r7, #16]
 8005b02:	4638      	mov	r0, r7
 8005b04:	f001 fadc 	bl	80070c0 <__mcmp>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	db24      	blt.n	8005b56 <quorem+0xf2>
 8005b0c:	3601      	adds	r6, #1
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f04f 0c00 	mov.w	ip, #0
 8005b14:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b18:	f8d0 e000 	ldr.w	lr, [r0]
 8005b1c:	b293      	uxth	r3, r2
 8005b1e:	ebac 0303 	sub.w	r3, ip, r3
 8005b22:	0c12      	lsrs	r2, r2, #16
 8005b24:	fa13 f38e 	uxtah	r3, r3, lr
 8005b28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b36:	45c1      	cmp	r9, r8
 8005b38:	f840 3b04 	str.w	r3, [r0], #4
 8005b3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b40:	d2e8      	bcs.n	8005b14 <quorem+0xb0>
 8005b42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b4a:	b922      	cbnz	r2, 8005b56 <quorem+0xf2>
 8005b4c:	3b04      	subs	r3, #4
 8005b4e:	429d      	cmp	r5, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	d30a      	bcc.n	8005b6a <quorem+0x106>
 8005b54:	613c      	str	r4, [r7, #16]
 8005b56:	4630      	mov	r0, r6
 8005b58:	b003      	add	sp, #12
 8005b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d1cc      	bne.n	8005b00 <quorem+0x9c>
 8005b66:	3c01      	subs	r4, #1
 8005b68:	e7c7      	b.n	8005afa <quorem+0x96>
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	3b04      	subs	r3, #4
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	d1f0      	bne.n	8005b54 <quorem+0xf0>
 8005b72:	3c01      	subs	r4, #1
 8005b74:	e7eb      	b.n	8005b4e <quorem+0xea>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e7ee      	b.n	8005b58 <quorem+0xf4>
 8005b7a:	0000      	movs	r0, r0
 8005b7c:	0000      	movs	r0, r0
	...

08005b80 <_dtoa_r>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	ed2d 8b04 	vpush	{d8-d9}
 8005b88:	ec57 6b10 	vmov	r6, r7, d0
 8005b8c:	b093      	sub	sp, #76	; 0x4c
 8005b8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b94:	9106      	str	r1, [sp, #24]
 8005b96:	ee10 aa10 	vmov	sl, s0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005ba0:	46bb      	mov	fp, r7
 8005ba2:	b975      	cbnz	r5, 8005bc2 <_dtoa_r+0x42>
 8005ba4:	2010      	movs	r0, #16
 8005ba6:	f7ff f86f 	bl	8004c88 <malloc>
 8005baa:	4602      	mov	r2, r0
 8005bac:	6260      	str	r0, [r4, #36]	; 0x24
 8005bae:	b920      	cbnz	r0, 8005bba <_dtoa_r+0x3a>
 8005bb0:	4ba7      	ldr	r3, [pc, #668]	; (8005e50 <_dtoa_r+0x2d0>)
 8005bb2:	21ea      	movs	r1, #234	; 0xea
 8005bb4:	48a7      	ldr	r0, [pc, #668]	; (8005e54 <_dtoa_r+0x2d4>)
 8005bb6:	f001 fed5 	bl	8007964 <__assert_func>
 8005bba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bbe:	6005      	str	r5, [r0, #0]
 8005bc0:	60c5      	str	r5, [r0, #12]
 8005bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	b151      	cbz	r1, 8005bde <_dtoa_r+0x5e>
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	604a      	str	r2, [r1, #4]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4093      	lsls	r3, r2
 8005bd0:	608b      	str	r3, [r1, #8]
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f001 f832 	bl	8006c3c <_Bfree>
 8005bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	1e3b      	subs	r3, r7, #0
 8005be0:	bfaa      	itet	ge
 8005be2:	2300      	movge	r3, #0
 8005be4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005be8:	f8c8 3000 	strge.w	r3, [r8]
 8005bec:	4b9a      	ldr	r3, [pc, #616]	; (8005e58 <_dtoa_r+0x2d8>)
 8005bee:	bfbc      	itt	lt
 8005bf0:	2201      	movlt	r2, #1
 8005bf2:	f8c8 2000 	strlt.w	r2, [r8]
 8005bf6:	ea33 030b 	bics.w	r3, r3, fp
 8005bfa:	d11b      	bne.n	8005c34 <_dtoa_r+0xb4>
 8005bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bfe:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c08:	4333      	orrs	r3, r6
 8005c0a:	f000 8592 	beq.w	8006732 <_dtoa_r+0xbb2>
 8005c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c10:	b963      	cbnz	r3, 8005c2c <_dtoa_r+0xac>
 8005c12:	4b92      	ldr	r3, [pc, #584]	; (8005e5c <_dtoa_r+0x2dc>)
 8005c14:	e022      	b.n	8005c5c <_dtoa_r+0xdc>
 8005c16:	4b92      	ldr	r3, [pc, #584]	; (8005e60 <_dtoa_r+0x2e0>)
 8005c18:	9301      	str	r3, [sp, #4]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	9801      	ldr	r0, [sp, #4]
 8005c22:	b013      	add	sp, #76	; 0x4c
 8005c24:	ecbd 8b04 	vpop	{d8-d9}
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	4b8b      	ldr	r3, [pc, #556]	; (8005e5c <_dtoa_r+0x2dc>)
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	3303      	adds	r3, #3
 8005c32:	e7f3      	b.n	8005c1c <_dtoa_r+0x9c>
 8005c34:	2200      	movs	r2, #0
 8005c36:	2300      	movs	r3, #0
 8005c38:	4650      	mov	r0, sl
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	f7fa ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c40:	ec4b ab19 	vmov	d9, sl, fp
 8005c44:	4680      	mov	r8, r0
 8005c46:	b158      	cbz	r0, 8005c60 <_dtoa_r+0xe0>
 8005c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 856b 	beq.w	800672c <_dtoa_r+0xbac>
 8005c56:	4883      	ldr	r0, [pc, #524]	; (8005e64 <_dtoa_r+0x2e4>)
 8005c58:	6018      	str	r0, [r3, #0]
 8005c5a:	1e43      	subs	r3, r0, #1
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	e7df      	b.n	8005c20 <_dtoa_r+0xa0>
 8005c60:	ec4b ab10 	vmov	d0, sl, fp
 8005c64:	aa10      	add	r2, sp, #64	; 0x40
 8005c66:	a911      	add	r1, sp, #68	; 0x44
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f001 facf 	bl	800720c <__d2b>
 8005c6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005c72:	ee08 0a10 	vmov	s16, r0
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	f000 8084 	beq.w	8005d84 <_dtoa_r+0x204>
 8005c7c:	ee19 3a90 	vmov	r3, s19
 8005c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005c88:	4656      	mov	r6, sl
 8005c8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005c96:	4b74      	ldr	r3, [pc, #464]	; (8005e68 <_dtoa_r+0x2e8>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa faf3 	bl	8000288 <__aeabi_dsub>
 8005ca2:	a365      	add	r3, pc, #404	; (adr r3, 8005e38 <_dtoa_r+0x2b8>)
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f7fa fca6 	bl	80005f8 <__aeabi_dmul>
 8005cac:	a364      	add	r3, pc, #400	; (adr r3, 8005e40 <_dtoa_r+0x2c0>)
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	f7fa faeb 	bl	800028c <__adddf3>
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	4628      	mov	r0, r5
 8005cba:	460f      	mov	r7, r1
 8005cbc:	f7fa fc32 	bl	8000524 <__aeabi_i2d>
 8005cc0:	a361      	add	r3, pc, #388	; (adr r3, 8005e48 <_dtoa_r+0x2c8>)
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f7fa fc97 	bl	80005f8 <__aeabi_dmul>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	f7fa fadb 	bl	800028c <__adddf3>
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	460f      	mov	r7, r1
 8005cda:	f7fa ff3d 	bl	8000b58 <__aeabi_d2iz>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	9000      	str	r0, [sp, #0]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	f7fa fef8 	bl	8000adc <__aeabi_dcmplt>
 8005cec:	b150      	cbz	r0, 8005d04 <_dtoa_r+0x184>
 8005cee:	9800      	ldr	r0, [sp, #0]
 8005cf0:	f7fa fc18 	bl	8000524 <__aeabi_i2d>
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	f7fa fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cfc:	b910      	cbnz	r0, 8005d04 <_dtoa_r+0x184>
 8005cfe:	9b00      	ldr	r3, [sp, #0]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	9b00      	ldr	r3, [sp, #0]
 8005d06:	2b16      	cmp	r3, #22
 8005d08:	d85a      	bhi.n	8005dc0 <_dtoa_r+0x240>
 8005d0a:	9a00      	ldr	r2, [sp, #0]
 8005d0c:	4b57      	ldr	r3, [pc, #348]	; (8005e6c <_dtoa_r+0x2ec>)
 8005d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	ec51 0b19 	vmov	r0, r1, d9
 8005d1a:	f7fa fedf 	bl	8000adc <__aeabi_dcmplt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d050      	beq.n	8005dc4 <_dtoa_r+0x244>
 8005d22:	9b00      	ldr	r3, [sp, #0]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d2e:	1b5d      	subs	r5, r3, r5
 8005d30:	1e6b      	subs	r3, r5, #1
 8005d32:	9305      	str	r3, [sp, #20]
 8005d34:	bf45      	ittet	mi
 8005d36:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d3a:	9304      	strmi	r3, [sp, #16]
 8005d3c:	2300      	movpl	r3, #0
 8005d3e:	2300      	movmi	r3, #0
 8005d40:	bf4c      	ite	mi
 8005d42:	9305      	strmi	r3, [sp, #20]
 8005d44:	9304      	strpl	r3, [sp, #16]
 8005d46:	9b00      	ldr	r3, [sp, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	db3d      	blt.n	8005dc8 <_dtoa_r+0x248>
 8005d4c:	9b05      	ldr	r3, [sp, #20]
 8005d4e:	9a00      	ldr	r2, [sp, #0]
 8005d50:	920a      	str	r2, [sp, #40]	; 0x28
 8005d52:	4413      	add	r3, r2
 8005d54:	9305      	str	r3, [sp, #20]
 8005d56:	2300      	movs	r3, #0
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	9b06      	ldr	r3, [sp, #24]
 8005d5c:	2b09      	cmp	r3, #9
 8005d5e:	f200 8089 	bhi.w	8005e74 <_dtoa_r+0x2f4>
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	bfc4      	itt	gt
 8005d66:	3b04      	subgt	r3, #4
 8005d68:	9306      	strgt	r3, [sp, #24]
 8005d6a:	9b06      	ldr	r3, [sp, #24]
 8005d6c:	f1a3 0302 	sub.w	r3, r3, #2
 8005d70:	bfcc      	ite	gt
 8005d72:	2500      	movgt	r5, #0
 8005d74:	2501      	movle	r5, #1
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	f200 8087 	bhi.w	8005e8a <_dtoa_r+0x30a>
 8005d7c:	e8df f003 	tbb	[pc, r3]
 8005d80:	59383a2d 	.word	0x59383a2d
 8005d84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d88:	441d      	add	r5, r3
 8005d8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	bfc1      	itttt	gt
 8005d92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005d9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005d9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005da2:	bfda      	itte	le
 8005da4:	f1c3 0320 	rsble	r3, r3, #32
 8005da8:	fa06 f003 	lslle.w	r0, r6, r3
 8005dac:	4318      	orrgt	r0, r3
 8005dae:	f7fa fba9 	bl	8000504 <__aeabi_ui2d>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4606      	mov	r6, r0
 8005db6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005dba:	3d01      	subs	r5, #1
 8005dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8005dbe:	e76a      	b.n	8005c96 <_dtoa_r+0x116>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e7b2      	b.n	8005d2a <_dtoa_r+0x1aa>
 8005dc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005dc6:	e7b1      	b.n	8005d2c <_dtoa_r+0x1ac>
 8005dc8:	9b04      	ldr	r3, [sp, #16]
 8005dca:	9a00      	ldr	r2, [sp, #0]
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	4253      	negs	r3, r2
 8005dd2:	9307      	str	r3, [sp, #28]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005dd8:	e7bf      	b.n	8005d5a <_dtoa_r+0x1da>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9308      	str	r3, [sp, #32]
 8005dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc55      	bgt.n	8005e90 <_dtoa_r+0x310>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005dea:	461a      	mov	r2, r3
 8005dec:	9209      	str	r2, [sp, #36]	; 0x24
 8005dee:	e00c      	b.n	8005e0a <_dtoa_r+0x28a>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e7f3      	b.n	8005ddc <_dtoa_r+0x25c>
 8005df4:	2300      	movs	r3, #0
 8005df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005df8:	9308      	str	r3, [sp, #32]
 8005dfa:	9b00      	ldr	r3, [sp, #0]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	9302      	str	r3, [sp, #8]
 8005e00:	3301      	adds	r3, #1
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	9303      	str	r3, [sp, #12]
 8005e06:	bfb8      	it	lt
 8005e08:	2301      	movlt	r3, #1
 8005e0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	6042      	str	r2, [r0, #4]
 8005e10:	2204      	movs	r2, #4
 8005e12:	f102 0614 	add.w	r6, r2, #20
 8005e16:	429e      	cmp	r6, r3
 8005e18:	6841      	ldr	r1, [r0, #4]
 8005e1a:	d93d      	bls.n	8005e98 <_dtoa_r+0x318>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 fecd 	bl	8006bbc <_Balloc>
 8005e22:	9001      	str	r0, [sp, #4]
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d13b      	bne.n	8005ea0 <_dtoa_r+0x320>
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <_dtoa_r+0x2f0>)
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e30:	e6c0      	b.n	8005bb4 <_dtoa_r+0x34>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e7df      	b.n	8005df6 <_dtoa_r+0x276>
 8005e36:	bf00      	nop
 8005e38:	636f4361 	.word	0x636f4361
 8005e3c:	3fd287a7 	.word	0x3fd287a7
 8005e40:	8b60c8b3 	.word	0x8b60c8b3
 8005e44:	3fc68a28 	.word	0x3fc68a28
 8005e48:	509f79fb 	.word	0x509f79fb
 8005e4c:	3fd34413 	.word	0x3fd34413
 8005e50:	08011f4d 	.word	0x08011f4d
 8005e54:	08011f64 	.word	0x08011f64
 8005e58:	7ff00000 	.word	0x7ff00000
 8005e5c:	08011f49 	.word	0x08011f49
 8005e60:	08011f40 	.word	0x08011f40
 8005e64:	08011f1d 	.word	0x08011f1d
 8005e68:	3ff80000 	.word	0x3ff80000
 8005e6c:	080120b8 	.word	0x080120b8
 8005e70:	08011fbf 	.word	0x08011fbf
 8005e74:	2501      	movs	r5, #1
 8005e76:	2300      	movs	r3, #0
 8005e78:	9306      	str	r3, [sp, #24]
 8005e7a:	9508      	str	r5, [sp, #32]
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e84:	2200      	movs	r2, #0
 8005e86:	2312      	movs	r3, #18
 8005e88:	e7b0      	b.n	8005dec <_dtoa_r+0x26c>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	9308      	str	r3, [sp, #32]
 8005e8e:	e7f5      	b.n	8005e7c <_dtoa_r+0x2fc>
 8005e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e96:	e7b8      	b.n	8005e0a <_dtoa_r+0x28a>
 8005e98:	3101      	adds	r1, #1
 8005e9a:	6041      	str	r1, [r0, #4]
 8005e9c:	0052      	lsls	r2, r2, #1
 8005e9e:	e7b8      	b.n	8005e12 <_dtoa_r+0x292>
 8005ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ea2:	9a01      	ldr	r2, [sp, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	9b03      	ldr	r3, [sp, #12]
 8005ea8:	2b0e      	cmp	r3, #14
 8005eaa:	f200 809d 	bhi.w	8005fe8 <_dtoa_r+0x468>
 8005eae:	2d00      	cmp	r5, #0
 8005eb0:	f000 809a 	beq.w	8005fe8 <_dtoa_r+0x468>
 8005eb4:	9b00      	ldr	r3, [sp, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dd32      	ble.n	8005f20 <_dtoa_r+0x3a0>
 8005eba:	4ab7      	ldr	r2, [pc, #732]	; (8006198 <_dtoa_r+0x618>)
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ec8:	9b00      	ldr	r3, [sp, #0]
 8005eca:	05d8      	lsls	r0, r3, #23
 8005ecc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005ed0:	d516      	bpl.n	8005f00 <_dtoa_r+0x380>
 8005ed2:	4bb2      	ldr	r3, [pc, #712]	; (800619c <_dtoa_r+0x61c>)
 8005ed4:	ec51 0b19 	vmov	r0, r1, d9
 8005ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005edc:	f7fa fcb6 	bl	800084c <__aeabi_ddiv>
 8005ee0:	f007 070f 	and.w	r7, r7, #15
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	468b      	mov	fp, r1
 8005ee8:	2503      	movs	r5, #3
 8005eea:	4eac      	ldr	r6, [pc, #688]	; (800619c <_dtoa_r+0x61c>)
 8005eec:	b957      	cbnz	r7, 8005f04 <_dtoa_r+0x384>
 8005eee:	4642      	mov	r2, r8
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	f7fa fca9 	bl	800084c <__aeabi_ddiv>
 8005efa:	4682      	mov	sl, r0
 8005efc:	468b      	mov	fp, r1
 8005efe:	e028      	b.n	8005f52 <_dtoa_r+0x3d2>
 8005f00:	2502      	movs	r5, #2
 8005f02:	e7f2      	b.n	8005eea <_dtoa_r+0x36a>
 8005f04:	07f9      	lsls	r1, r7, #31
 8005f06:	d508      	bpl.n	8005f1a <_dtoa_r+0x39a>
 8005f08:	4640      	mov	r0, r8
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f10:	f7fa fb72 	bl	80005f8 <__aeabi_dmul>
 8005f14:	3501      	adds	r5, #1
 8005f16:	4680      	mov	r8, r0
 8005f18:	4689      	mov	r9, r1
 8005f1a:	107f      	asrs	r7, r7, #1
 8005f1c:	3608      	adds	r6, #8
 8005f1e:	e7e5      	b.n	8005eec <_dtoa_r+0x36c>
 8005f20:	f000 809b 	beq.w	800605a <_dtoa_r+0x4da>
 8005f24:	9b00      	ldr	r3, [sp, #0]
 8005f26:	4f9d      	ldr	r7, [pc, #628]	; (800619c <_dtoa_r+0x61c>)
 8005f28:	425e      	negs	r6, r3
 8005f2a:	4b9b      	ldr	r3, [pc, #620]	; (8006198 <_dtoa_r+0x618>)
 8005f2c:	f006 020f 	and.w	r2, r6, #15
 8005f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	ec51 0b19 	vmov	r0, r1, d9
 8005f3c:	f7fa fb5c 	bl	80005f8 <__aeabi_dmul>
 8005f40:	1136      	asrs	r6, r6, #4
 8005f42:	4682      	mov	sl, r0
 8005f44:	468b      	mov	fp, r1
 8005f46:	2300      	movs	r3, #0
 8005f48:	2502      	movs	r5, #2
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	d17a      	bne.n	8006044 <_dtoa_r+0x4c4>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1d3      	bne.n	8005efa <_dtoa_r+0x37a>
 8005f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8082 	beq.w	800605e <_dtoa_r+0x4de>
 8005f5a:	4b91      	ldr	r3, [pc, #580]	; (80061a0 <_dtoa_r+0x620>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4650      	mov	r0, sl
 8005f60:	4659      	mov	r1, fp
 8005f62:	f7fa fdbb 	bl	8000adc <__aeabi_dcmplt>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d079      	beq.n	800605e <_dtoa_r+0x4de>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d076      	beq.n	800605e <_dtoa_r+0x4de>
 8005f70:	9b02      	ldr	r3, [sp, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	dd36      	ble.n	8005fe4 <_dtoa_r+0x464>
 8005f76:	9b00      	ldr	r3, [sp, #0]
 8005f78:	4650      	mov	r0, sl
 8005f7a:	4659      	mov	r1, fp
 8005f7c:	1e5f      	subs	r7, r3, #1
 8005f7e:	2200      	movs	r2, #0
 8005f80:	4b88      	ldr	r3, [pc, #544]	; (80061a4 <_dtoa_r+0x624>)
 8005f82:	f7fa fb39 	bl	80005f8 <__aeabi_dmul>
 8005f86:	9e02      	ldr	r6, [sp, #8]
 8005f88:	4682      	mov	sl, r0
 8005f8a:	468b      	mov	fp, r1
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f7fa fac8 	bl	8000524 <__aeabi_i2d>
 8005f94:	4652      	mov	r2, sl
 8005f96:	465b      	mov	r3, fp
 8005f98:	f7fa fb2e 	bl	80005f8 <__aeabi_dmul>
 8005f9c:	4b82      	ldr	r3, [pc, #520]	; (80061a8 <_dtoa_r+0x628>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f7fa f974 	bl	800028c <__adddf3>
 8005fa4:	46d0      	mov	r8, sl
 8005fa6:	46d9      	mov	r9, fp
 8005fa8:	4682      	mov	sl, r0
 8005faa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	d158      	bne.n	8006064 <_dtoa_r+0x4e4>
 8005fb2:	4b7e      	ldr	r3, [pc, #504]	; (80061ac <_dtoa_r+0x62c>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	4649      	mov	r1, r9
 8005fba:	f7fa f965 	bl	8000288 <__aeabi_dsub>
 8005fbe:	4652      	mov	r2, sl
 8005fc0:	465b      	mov	r3, fp
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	4689      	mov	r9, r1
 8005fc6:	f7fa fda7 	bl	8000b18 <__aeabi_dcmpgt>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f040 8295 	bne.w	80064fa <_dtoa_r+0x97a>
 8005fd0:	4652      	mov	r2, sl
 8005fd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f7fa fd7f 	bl	8000adc <__aeabi_dcmplt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f040 8289 	bne.w	80064f6 <_dtoa_r+0x976>
 8005fe4:	ec5b ab19 	vmov	sl, fp, d9
 8005fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f2c0 8148 	blt.w	8006280 <_dtoa_r+0x700>
 8005ff0:	9a00      	ldr	r2, [sp, #0]
 8005ff2:	2a0e      	cmp	r2, #14
 8005ff4:	f300 8144 	bgt.w	8006280 <_dtoa_r+0x700>
 8005ff8:	4b67      	ldr	r3, [pc, #412]	; (8006198 <_dtoa_r+0x618>)
 8005ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	f280 80d5 	bge.w	80061b4 <_dtoa_r+0x634>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f300 80d1 	bgt.w	80061b4 <_dtoa_r+0x634>
 8006012:	f040 826f 	bne.w	80064f4 <_dtoa_r+0x974>
 8006016:	4b65      	ldr	r3, [pc, #404]	; (80061ac <_dtoa_r+0x62c>)
 8006018:	2200      	movs	r2, #0
 800601a:	4640      	mov	r0, r8
 800601c:	4649      	mov	r1, r9
 800601e:	f7fa faeb 	bl	80005f8 <__aeabi_dmul>
 8006022:	4652      	mov	r2, sl
 8006024:	465b      	mov	r3, fp
 8006026:	f7fa fd6d 	bl	8000b04 <__aeabi_dcmpge>
 800602a:	9e03      	ldr	r6, [sp, #12]
 800602c:	4637      	mov	r7, r6
 800602e:	2800      	cmp	r0, #0
 8006030:	f040 8245 	bne.w	80064be <_dtoa_r+0x93e>
 8006034:	9d01      	ldr	r5, [sp, #4]
 8006036:	2331      	movs	r3, #49	; 0x31
 8006038:	f805 3b01 	strb.w	r3, [r5], #1
 800603c:	9b00      	ldr	r3, [sp, #0]
 800603e:	3301      	adds	r3, #1
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	e240      	b.n	80064c6 <_dtoa_r+0x946>
 8006044:	07f2      	lsls	r2, r6, #31
 8006046:	d505      	bpl.n	8006054 <_dtoa_r+0x4d4>
 8006048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604c:	f7fa fad4 	bl	80005f8 <__aeabi_dmul>
 8006050:	3501      	adds	r5, #1
 8006052:	2301      	movs	r3, #1
 8006054:	1076      	asrs	r6, r6, #1
 8006056:	3708      	adds	r7, #8
 8006058:	e777      	b.n	8005f4a <_dtoa_r+0x3ca>
 800605a:	2502      	movs	r5, #2
 800605c:	e779      	b.n	8005f52 <_dtoa_r+0x3d2>
 800605e:	9f00      	ldr	r7, [sp, #0]
 8006060:	9e03      	ldr	r6, [sp, #12]
 8006062:	e794      	b.n	8005f8e <_dtoa_r+0x40e>
 8006064:	9901      	ldr	r1, [sp, #4]
 8006066:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <_dtoa_r+0x618>)
 8006068:	4431      	add	r1, r6
 800606a:	910d      	str	r1, [sp, #52]	; 0x34
 800606c:	9908      	ldr	r1, [sp, #32]
 800606e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006072:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006076:	2900      	cmp	r1, #0
 8006078:	d043      	beq.n	8006102 <_dtoa_r+0x582>
 800607a:	494d      	ldr	r1, [pc, #308]	; (80061b0 <_dtoa_r+0x630>)
 800607c:	2000      	movs	r0, #0
 800607e:	f7fa fbe5 	bl	800084c <__aeabi_ddiv>
 8006082:	4652      	mov	r2, sl
 8006084:	465b      	mov	r3, fp
 8006086:	f7fa f8ff 	bl	8000288 <__aeabi_dsub>
 800608a:	9d01      	ldr	r5, [sp, #4]
 800608c:	4682      	mov	sl, r0
 800608e:	468b      	mov	fp, r1
 8006090:	4649      	mov	r1, r9
 8006092:	4640      	mov	r0, r8
 8006094:	f7fa fd60 	bl	8000b58 <__aeabi_d2iz>
 8006098:	4606      	mov	r6, r0
 800609a:	f7fa fa43 	bl	8000524 <__aeabi_i2d>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4640      	mov	r0, r8
 80060a4:	4649      	mov	r1, r9
 80060a6:	f7fa f8ef 	bl	8000288 <__aeabi_dsub>
 80060aa:	3630      	adds	r6, #48	; 0x30
 80060ac:	f805 6b01 	strb.w	r6, [r5], #1
 80060b0:	4652      	mov	r2, sl
 80060b2:	465b      	mov	r3, fp
 80060b4:	4680      	mov	r8, r0
 80060b6:	4689      	mov	r9, r1
 80060b8:	f7fa fd10 	bl	8000adc <__aeabi_dcmplt>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d163      	bne.n	8006188 <_dtoa_r+0x608>
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	4936      	ldr	r1, [pc, #216]	; (80061a0 <_dtoa_r+0x620>)
 80060c6:	2000      	movs	r0, #0
 80060c8:	f7fa f8de 	bl	8000288 <__aeabi_dsub>
 80060cc:	4652      	mov	r2, sl
 80060ce:	465b      	mov	r3, fp
 80060d0:	f7fa fd04 	bl	8000adc <__aeabi_dcmplt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f040 80b5 	bne.w	8006244 <_dtoa_r+0x6c4>
 80060da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060dc:	429d      	cmp	r5, r3
 80060de:	d081      	beq.n	8005fe4 <_dtoa_r+0x464>
 80060e0:	4b30      	ldr	r3, [pc, #192]	; (80061a4 <_dtoa_r+0x624>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	4650      	mov	r0, sl
 80060e6:	4659      	mov	r1, fp
 80060e8:	f7fa fa86 	bl	80005f8 <__aeabi_dmul>
 80060ec:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <_dtoa_r+0x624>)
 80060ee:	4682      	mov	sl, r0
 80060f0:	468b      	mov	fp, r1
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	2200      	movs	r2, #0
 80060f8:	f7fa fa7e 	bl	80005f8 <__aeabi_dmul>
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	e7c6      	b.n	8006090 <_dtoa_r+0x510>
 8006102:	4650      	mov	r0, sl
 8006104:	4659      	mov	r1, fp
 8006106:	f7fa fa77 	bl	80005f8 <__aeabi_dmul>
 800610a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800610c:	9d01      	ldr	r5, [sp, #4]
 800610e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006110:	4682      	mov	sl, r0
 8006112:	468b      	mov	fp, r1
 8006114:	4649      	mov	r1, r9
 8006116:	4640      	mov	r0, r8
 8006118:	f7fa fd1e 	bl	8000b58 <__aeabi_d2iz>
 800611c:	4606      	mov	r6, r0
 800611e:	f7fa fa01 	bl	8000524 <__aeabi_i2d>
 8006122:	3630      	adds	r6, #48	; 0x30
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa f8ac 	bl	8000288 <__aeabi_dsub>
 8006130:	f805 6b01 	strb.w	r6, [r5], #1
 8006134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006136:	429d      	cmp	r5, r3
 8006138:	4680      	mov	r8, r0
 800613a:	4689      	mov	r9, r1
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	d124      	bne.n	800618c <_dtoa_r+0x60c>
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <_dtoa_r+0x630>)
 8006144:	4650      	mov	r0, sl
 8006146:	4659      	mov	r1, fp
 8006148:	f7fa f8a0 	bl	800028c <__adddf3>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f7fa fce0 	bl	8000b18 <__aeabi_dcmpgt>
 8006158:	2800      	cmp	r0, #0
 800615a:	d173      	bne.n	8006244 <_dtoa_r+0x6c4>
 800615c:	4652      	mov	r2, sl
 800615e:	465b      	mov	r3, fp
 8006160:	4913      	ldr	r1, [pc, #76]	; (80061b0 <_dtoa_r+0x630>)
 8006162:	2000      	movs	r0, #0
 8006164:	f7fa f890 	bl	8000288 <__aeabi_dsub>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4640      	mov	r0, r8
 800616e:	4649      	mov	r1, r9
 8006170:	f7fa fcb4 	bl	8000adc <__aeabi_dcmplt>
 8006174:	2800      	cmp	r0, #0
 8006176:	f43f af35 	beq.w	8005fe4 <_dtoa_r+0x464>
 800617a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800617c:	1e6b      	subs	r3, r5, #1
 800617e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006180:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006184:	2b30      	cmp	r3, #48	; 0x30
 8006186:	d0f8      	beq.n	800617a <_dtoa_r+0x5fa>
 8006188:	9700      	str	r7, [sp, #0]
 800618a:	e049      	b.n	8006220 <_dtoa_r+0x6a0>
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <_dtoa_r+0x624>)
 800618e:	f7fa fa33 	bl	80005f8 <__aeabi_dmul>
 8006192:	4680      	mov	r8, r0
 8006194:	4689      	mov	r9, r1
 8006196:	e7bd      	b.n	8006114 <_dtoa_r+0x594>
 8006198:	080120b8 	.word	0x080120b8
 800619c:	08012090 	.word	0x08012090
 80061a0:	3ff00000 	.word	0x3ff00000
 80061a4:	40240000 	.word	0x40240000
 80061a8:	401c0000 	.word	0x401c0000
 80061ac:	40140000 	.word	0x40140000
 80061b0:	3fe00000 	.word	0x3fe00000
 80061b4:	9d01      	ldr	r5, [sp, #4]
 80061b6:	4656      	mov	r6, sl
 80061b8:	465f      	mov	r7, fp
 80061ba:	4642      	mov	r2, r8
 80061bc:	464b      	mov	r3, r9
 80061be:	4630      	mov	r0, r6
 80061c0:	4639      	mov	r1, r7
 80061c2:	f7fa fb43 	bl	800084c <__aeabi_ddiv>
 80061c6:	f7fa fcc7 	bl	8000b58 <__aeabi_d2iz>
 80061ca:	4682      	mov	sl, r0
 80061cc:	f7fa f9aa 	bl	8000524 <__aeabi_i2d>
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	f7fa fa10 	bl	80005f8 <__aeabi_dmul>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4630      	mov	r0, r6
 80061de:	4639      	mov	r1, r7
 80061e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80061e4:	f7fa f850 	bl	8000288 <__aeabi_dsub>
 80061e8:	f805 6b01 	strb.w	r6, [r5], #1
 80061ec:	9e01      	ldr	r6, [sp, #4]
 80061ee:	9f03      	ldr	r7, [sp, #12]
 80061f0:	1bae      	subs	r6, r5, r6
 80061f2:	42b7      	cmp	r7, r6
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	d135      	bne.n	8006266 <_dtoa_r+0x6e6>
 80061fa:	f7fa f847 	bl	800028c <__adddf3>
 80061fe:	4642      	mov	r2, r8
 8006200:	464b      	mov	r3, r9
 8006202:	4606      	mov	r6, r0
 8006204:	460f      	mov	r7, r1
 8006206:	f7fa fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800620a:	b9d0      	cbnz	r0, 8006242 <_dtoa_r+0x6c2>
 800620c:	4642      	mov	r2, r8
 800620e:	464b      	mov	r3, r9
 8006210:	4630      	mov	r0, r6
 8006212:	4639      	mov	r1, r7
 8006214:	f7fa fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8006218:	b110      	cbz	r0, 8006220 <_dtoa_r+0x6a0>
 800621a:	f01a 0f01 	tst.w	sl, #1
 800621e:	d110      	bne.n	8006242 <_dtoa_r+0x6c2>
 8006220:	4620      	mov	r0, r4
 8006222:	ee18 1a10 	vmov	r1, s16
 8006226:	f000 fd09 	bl	8006c3c <_Bfree>
 800622a:	2300      	movs	r3, #0
 800622c:	9800      	ldr	r0, [sp, #0]
 800622e:	702b      	strb	r3, [r5, #0]
 8006230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006232:	3001      	adds	r0, #1
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006238:	2b00      	cmp	r3, #0
 800623a:	f43f acf1 	beq.w	8005c20 <_dtoa_r+0xa0>
 800623e:	601d      	str	r5, [r3, #0]
 8006240:	e4ee      	b.n	8005c20 <_dtoa_r+0xa0>
 8006242:	9f00      	ldr	r7, [sp, #0]
 8006244:	462b      	mov	r3, r5
 8006246:	461d      	mov	r5, r3
 8006248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800624c:	2a39      	cmp	r2, #57	; 0x39
 800624e:	d106      	bne.n	800625e <_dtoa_r+0x6de>
 8006250:	9a01      	ldr	r2, [sp, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d1f7      	bne.n	8006246 <_dtoa_r+0x6c6>
 8006256:	9901      	ldr	r1, [sp, #4]
 8006258:	2230      	movs	r2, #48	; 0x30
 800625a:	3701      	adds	r7, #1
 800625c:	700a      	strb	r2, [r1, #0]
 800625e:	781a      	ldrb	r2, [r3, #0]
 8006260:	3201      	adds	r2, #1
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e790      	b.n	8006188 <_dtoa_r+0x608>
 8006266:	4ba6      	ldr	r3, [pc, #664]	; (8006500 <_dtoa_r+0x980>)
 8006268:	2200      	movs	r2, #0
 800626a:	f7fa f9c5 	bl	80005f8 <__aeabi_dmul>
 800626e:	2200      	movs	r2, #0
 8006270:	2300      	movs	r3, #0
 8006272:	4606      	mov	r6, r0
 8006274:	460f      	mov	r7, r1
 8006276:	f7fa fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800627a:	2800      	cmp	r0, #0
 800627c:	d09d      	beq.n	80061ba <_dtoa_r+0x63a>
 800627e:	e7cf      	b.n	8006220 <_dtoa_r+0x6a0>
 8006280:	9a08      	ldr	r2, [sp, #32]
 8006282:	2a00      	cmp	r2, #0
 8006284:	f000 80d7 	beq.w	8006436 <_dtoa_r+0x8b6>
 8006288:	9a06      	ldr	r2, [sp, #24]
 800628a:	2a01      	cmp	r2, #1
 800628c:	f300 80ba 	bgt.w	8006404 <_dtoa_r+0x884>
 8006290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006292:	2a00      	cmp	r2, #0
 8006294:	f000 80b2 	beq.w	80063fc <_dtoa_r+0x87c>
 8006298:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800629c:	9e07      	ldr	r6, [sp, #28]
 800629e:	9d04      	ldr	r5, [sp, #16]
 80062a0:	9a04      	ldr	r2, [sp, #16]
 80062a2:	441a      	add	r2, r3
 80062a4:	9204      	str	r2, [sp, #16]
 80062a6:	9a05      	ldr	r2, [sp, #20]
 80062a8:	2101      	movs	r1, #1
 80062aa:	441a      	add	r2, r3
 80062ac:	4620      	mov	r0, r4
 80062ae:	9205      	str	r2, [sp, #20]
 80062b0:	f000 fd7c 	bl	8006dac <__i2b>
 80062b4:	4607      	mov	r7, r0
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	dd0c      	ble.n	80062d4 <_dtoa_r+0x754>
 80062ba:	9b05      	ldr	r3, [sp, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dd09      	ble.n	80062d4 <_dtoa_r+0x754>
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	9a04      	ldr	r2, [sp, #16]
 80062c4:	bfa8      	it	ge
 80062c6:	462b      	movge	r3, r5
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	9204      	str	r2, [sp, #16]
 80062cc:	9a05      	ldr	r2, [sp, #20]
 80062ce:	1aed      	subs	r5, r5, r3
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	9b07      	ldr	r3, [sp, #28]
 80062d6:	b31b      	cbz	r3, 8006320 <_dtoa_r+0x7a0>
 80062d8:	9b08      	ldr	r3, [sp, #32]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80af 	beq.w	800643e <_dtoa_r+0x8be>
 80062e0:	2e00      	cmp	r6, #0
 80062e2:	dd13      	ble.n	800630c <_dtoa_r+0x78c>
 80062e4:	4639      	mov	r1, r7
 80062e6:	4632      	mov	r2, r6
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 fe1f 	bl	8006f2c <__pow5mult>
 80062ee:	ee18 2a10 	vmov	r2, s16
 80062f2:	4601      	mov	r1, r0
 80062f4:	4607      	mov	r7, r0
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 fd6e 	bl	8006dd8 <__multiply>
 80062fc:	ee18 1a10 	vmov	r1, s16
 8006300:	4680      	mov	r8, r0
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fc9a 	bl	8006c3c <_Bfree>
 8006308:	ee08 8a10 	vmov	s16, r8
 800630c:	9b07      	ldr	r3, [sp, #28]
 800630e:	1b9a      	subs	r2, r3, r6
 8006310:	d006      	beq.n	8006320 <_dtoa_r+0x7a0>
 8006312:	ee18 1a10 	vmov	r1, s16
 8006316:	4620      	mov	r0, r4
 8006318:	f000 fe08 	bl	8006f2c <__pow5mult>
 800631c:	ee08 0a10 	vmov	s16, r0
 8006320:	2101      	movs	r1, #1
 8006322:	4620      	mov	r0, r4
 8006324:	f000 fd42 	bl	8006dac <__i2b>
 8006328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	4606      	mov	r6, r0
 800632e:	f340 8088 	ble.w	8006442 <_dtoa_r+0x8c2>
 8006332:	461a      	mov	r2, r3
 8006334:	4601      	mov	r1, r0
 8006336:	4620      	mov	r0, r4
 8006338:	f000 fdf8 	bl	8006f2c <__pow5mult>
 800633c:	9b06      	ldr	r3, [sp, #24]
 800633e:	2b01      	cmp	r3, #1
 8006340:	4606      	mov	r6, r0
 8006342:	f340 8081 	ble.w	8006448 <_dtoa_r+0x8c8>
 8006346:	f04f 0800 	mov.w	r8, #0
 800634a:	6933      	ldr	r3, [r6, #16]
 800634c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006350:	6918      	ldr	r0, [r3, #16]
 8006352:	f000 fcdb 	bl	8006d0c <__hi0bits>
 8006356:	f1c0 0020 	rsb	r0, r0, #32
 800635a:	9b05      	ldr	r3, [sp, #20]
 800635c:	4418      	add	r0, r3
 800635e:	f010 001f 	ands.w	r0, r0, #31
 8006362:	f000 8092 	beq.w	800648a <_dtoa_r+0x90a>
 8006366:	f1c0 0320 	rsb	r3, r0, #32
 800636a:	2b04      	cmp	r3, #4
 800636c:	f340 808a 	ble.w	8006484 <_dtoa_r+0x904>
 8006370:	f1c0 001c 	rsb	r0, r0, #28
 8006374:	9b04      	ldr	r3, [sp, #16]
 8006376:	4403      	add	r3, r0
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	9b05      	ldr	r3, [sp, #20]
 800637c:	4403      	add	r3, r0
 800637e:	4405      	add	r5, r0
 8006380:	9305      	str	r3, [sp, #20]
 8006382:	9b04      	ldr	r3, [sp, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	dd07      	ble.n	8006398 <_dtoa_r+0x818>
 8006388:	ee18 1a10 	vmov	r1, s16
 800638c:	461a      	mov	r2, r3
 800638e:	4620      	mov	r0, r4
 8006390:	f000 fe26 	bl	8006fe0 <__lshift>
 8006394:	ee08 0a10 	vmov	s16, r0
 8006398:	9b05      	ldr	r3, [sp, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	dd05      	ble.n	80063aa <_dtoa_r+0x82a>
 800639e:	4631      	mov	r1, r6
 80063a0:	461a      	mov	r2, r3
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 fe1c 	bl	8006fe0 <__lshift>
 80063a8:	4606      	mov	r6, r0
 80063aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d06e      	beq.n	800648e <_dtoa_r+0x90e>
 80063b0:	ee18 0a10 	vmov	r0, s16
 80063b4:	4631      	mov	r1, r6
 80063b6:	f000 fe83 	bl	80070c0 <__mcmp>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	da67      	bge.n	800648e <_dtoa_r+0x90e>
 80063be:	9b00      	ldr	r3, [sp, #0]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	ee18 1a10 	vmov	r1, s16
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	220a      	movs	r2, #10
 80063ca:	2300      	movs	r3, #0
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 fc57 	bl	8006c80 <__multadd>
 80063d2:	9b08      	ldr	r3, [sp, #32]
 80063d4:	ee08 0a10 	vmov	s16, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 81b1 	beq.w	8006740 <_dtoa_r+0xbc0>
 80063de:	2300      	movs	r3, #0
 80063e0:	4639      	mov	r1, r7
 80063e2:	220a      	movs	r2, #10
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 fc4b 	bl	8006c80 <__multadd>
 80063ea:	9b02      	ldr	r3, [sp, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	4607      	mov	r7, r0
 80063f0:	f300 808e 	bgt.w	8006510 <_dtoa_r+0x990>
 80063f4:	9b06      	ldr	r3, [sp, #24]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	dc51      	bgt.n	800649e <_dtoa_r+0x91e>
 80063fa:	e089      	b.n	8006510 <_dtoa_r+0x990>
 80063fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006402:	e74b      	b.n	800629c <_dtoa_r+0x71c>
 8006404:	9b03      	ldr	r3, [sp, #12]
 8006406:	1e5e      	subs	r6, r3, #1
 8006408:	9b07      	ldr	r3, [sp, #28]
 800640a:	42b3      	cmp	r3, r6
 800640c:	bfbf      	itttt	lt
 800640e:	9b07      	ldrlt	r3, [sp, #28]
 8006410:	9607      	strlt	r6, [sp, #28]
 8006412:	1af2      	sublt	r2, r6, r3
 8006414:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006416:	bfb6      	itet	lt
 8006418:	189b      	addlt	r3, r3, r2
 800641a:	1b9e      	subge	r6, r3, r6
 800641c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	bfb8      	it	lt
 8006422:	2600      	movlt	r6, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	bfb7      	itett	lt
 8006428:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800642c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006430:	1a9d      	sublt	r5, r3, r2
 8006432:	2300      	movlt	r3, #0
 8006434:	e734      	b.n	80062a0 <_dtoa_r+0x720>
 8006436:	9e07      	ldr	r6, [sp, #28]
 8006438:	9d04      	ldr	r5, [sp, #16]
 800643a:	9f08      	ldr	r7, [sp, #32]
 800643c:	e73b      	b.n	80062b6 <_dtoa_r+0x736>
 800643e:	9a07      	ldr	r2, [sp, #28]
 8006440:	e767      	b.n	8006312 <_dtoa_r+0x792>
 8006442:	9b06      	ldr	r3, [sp, #24]
 8006444:	2b01      	cmp	r3, #1
 8006446:	dc18      	bgt.n	800647a <_dtoa_r+0x8fa>
 8006448:	f1ba 0f00 	cmp.w	sl, #0
 800644c:	d115      	bne.n	800647a <_dtoa_r+0x8fa>
 800644e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006452:	b993      	cbnz	r3, 800647a <_dtoa_r+0x8fa>
 8006454:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006458:	0d1b      	lsrs	r3, r3, #20
 800645a:	051b      	lsls	r3, r3, #20
 800645c:	b183      	cbz	r3, 8006480 <_dtoa_r+0x900>
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	3301      	adds	r3, #1
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	9b05      	ldr	r3, [sp, #20]
 8006466:	3301      	adds	r3, #1
 8006468:	9305      	str	r3, [sp, #20]
 800646a:	f04f 0801 	mov.w	r8, #1
 800646e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	f47f af6a 	bne.w	800634a <_dtoa_r+0x7ca>
 8006476:	2001      	movs	r0, #1
 8006478:	e76f      	b.n	800635a <_dtoa_r+0x7da>
 800647a:	f04f 0800 	mov.w	r8, #0
 800647e:	e7f6      	b.n	800646e <_dtoa_r+0x8ee>
 8006480:	4698      	mov	r8, r3
 8006482:	e7f4      	b.n	800646e <_dtoa_r+0x8ee>
 8006484:	f43f af7d 	beq.w	8006382 <_dtoa_r+0x802>
 8006488:	4618      	mov	r0, r3
 800648a:	301c      	adds	r0, #28
 800648c:	e772      	b.n	8006374 <_dtoa_r+0x7f4>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	dc37      	bgt.n	8006504 <_dtoa_r+0x984>
 8006494:	9b06      	ldr	r3, [sp, #24]
 8006496:	2b02      	cmp	r3, #2
 8006498:	dd34      	ble.n	8006504 <_dtoa_r+0x984>
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	9302      	str	r3, [sp, #8]
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	b96b      	cbnz	r3, 80064be <_dtoa_r+0x93e>
 80064a2:	4631      	mov	r1, r6
 80064a4:	2205      	movs	r2, #5
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 fbea 	bl	8006c80 <__multadd>
 80064ac:	4601      	mov	r1, r0
 80064ae:	4606      	mov	r6, r0
 80064b0:	ee18 0a10 	vmov	r0, s16
 80064b4:	f000 fe04 	bl	80070c0 <__mcmp>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	f73f adbb 	bgt.w	8006034 <_dtoa_r+0x4b4>
 80064be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c0:	9d01      	ldr	r5, [sp, #4]
 80064c2:	43db      	mvns	r3, r3
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	4631      	mov	r1, r6
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fbb5 	bl	8006c3c <_Bfree>
 80064d2:	2f00      	cmp	r7, #0
 80064d4:	f43f aea4 	beq.w	8006220 <_dtoa_r+0x6a0>
 80064d8:	f1b8 0f00 	cmp.w	r8, #0
 80064dc:	d005      	beq.n	80064ea <_dtoa_r+0x96a>
 80064de:	45b8      	cmp	r8, r7
 80064e0:	d003      	beq.n	80064ea <_dtoa_r+0x96a>
 80064e2:	4641      	mov	r1, r8
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 fba9 	bl	8006c3c <_Bfree>
 80064ea:	4639      	mov	r1, r7
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 fba5 	bl	8006c3c <_Bfree>
 80064f2:	e695      	b.n	8006220 <_dtoa_r+0x6a0>
 80064f4:	2600      	movs	r6, #0
 80064f6:	4637      	mov	r7, r6
 80064f8:	e7e1      	b.n	80064be <_dtoa_r+0x93e>
 80064fa:	9700      	str	r7, [sp, #0]
 80064fc:	4637      	mov	r7, r6
 80064fe:	e599      	b.n	8006034 <_dtoa_r+0x4b4>
 8006500:	40240000 	.word	0x40240000
 8006504:	9b08      	ldr	r3, [sp, #32]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80ca 	beq.w	80066a0 <_dtoa_r+0xb20>
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	9302      	str	r3, [sp, #8]
 8006510:	2d00      	cmp	r5, #0
 8006512:	dd05      	ble.n	8006520 <_dtoa_r+0x9a0>
 8006514:	4639      	mov	r1, r7
 8006516:	462a      	mov	r2, r5
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fd61 	bl	8006fe0 <__lshift>
 800651e:	4607      	mov	r7, r0
 8006520:	f1b8 0f00 	cmp.w	r8, #0
 8006524:	d05b      	beq.n	80065de <_dtoa_r+0xa5e>
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fb47 	bl	8006bbc <_Balloc>
 800652e:	4605      	mov	r5, r0
 8006530:	b928      	cbnz	r0, 800653e <_dtoa_r+0x9be>
 8006532:	4b87      	ldr	r3, [pc, #540]	; (8006750 <_dtoa_r+0xbd0>)
 8006534:	4602      	mov	r2, r0
 8006536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800653a:	f7ff bb3b 	b.w	8005bb4 <_dtoa_r+0x34>
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	3202      	adds	r2, #2
 8006542:	0092      	lsls	r2, r2, #2
 8006544:	f107 010c 	add.w	r1, r7, #12
 8006548:	300c      	adds	r0, #12
 800654a:	f7fe fba5 	bl	8004c98 <memcpy>
 800654e:	2201      	movs	r2, #1
 8006550:	4629      	mov	r1, r5
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fd44 	bl	8006fe0 <__lshift>
 8006558:	9b01      	ldr	r3, [sp, #4]
 800655a:	f103 0901 	add.w	r9, r3, #1
 800655e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006562:	4413      	add	r3, r2
 8006564:	9305      	str	r3, [sp, #20]
 8006566:	f00a 0301 	and.w	r3, sl, #1
 800656a:	46b8      	mov	r8, r7
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	4607      	mov	r7, r0
 8006570:	4631      	mov	r1, r6
 8006572:	ee18 0a10 	vmov	r0, s16
 8006576:	f7ff fa75 	bl	8005a64 <quorem>
 800657a:	4641      	mov	r1, r8
 800657c:	9002      	str	r0, [sp, #8]
 800657e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006582:	ee18 0a10 	vmov	r0, s16
 8006586:	f000 fd9b 	bl	80070c0 <__mcmp>
 800658a:	463a      	mov	r2, r7
 800658c:	9003      	str	r0, [sp, #12]
 800658e:	4631      	mov	r1, r6
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fdb1 	bl	80070f8 <__mdiff>
 8006596:	68c2      	ldr	r2, [r0, #12]
 8006598:	f109 3bff 	add.w	fp, r9, #4294967295
 800659c:	4605      	mov	r5, r0
 800659e:	bb02      	cbnz	r2, 80065e2 <_dtoa_r+0xa62>
 80065a0:	4601      	mov	r1, r0
 80065a2:	ee18 0a10 	vmov	r0, s16
 80065a6:	f000 fd8b 	bl	80070c0 <__mcmp>
 80065aa:	4602      	mov	r2, r0
 80065ac:	4629      	mov	r1, r5
 80065ae:	4620      	mov	r0, r4
 80065b0:	9207      	str	r2, [sp, #28]
 80065b2:	f000 fb43 	bl	8006c3c <_Bfree>
 80065b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80065ba:	ea43 0102 	orr.w	r1, r3, r2
 80065be:	9b04      	ldr	r3, [sp, #16]
 80065c0:	430b      	orrs	r3, r1
 80065c2:	464d      	mov	r5, r9
 80065c4:	d10f      	bne.n	80065e6 <_dtoa_r+0xa66>
 80065c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065ca:	d02a      	beq.n	8006622 <_dtoa_r+0xaa2>
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	dd02      	ble.n	80065d8 <_dtoa_r+0xa58>
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80065d8:	f88b a000 	strb.w	sl, [fp]
 80065dc:	e775      	b.n	80064ca <_dtoa_r+0x94a>
 80065de:	4638      	mov	r0, r7
 80065e0:	e7ba      	b.n	8006558 <_dtoa_r+0x9d8>
 80065e2:	2201      	movs	r2, #1
 80065e4:	e7e2      	b.n	80065ac <_dtoa_r+0xa2c>
 80065e6:	9b03      	ldr	r3, [sp, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db04      	blt.n	80065f6 <_dtoa_r+0xa76>
 80065ec:	9906      	ldr	r1, [sp, #24]
 80065ee:	430b      	orrs	r3, r1
 80065f0:	9904      	ldr	r1, [sp, #16]
 80065f2:	430b      	orrs	r3, r1
 80065f4:	d122      	bne.n	800663c <_dtoa_r+0xabc>
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	ddee      	ble.n	80065d8 <_dtoa_r+0xa58>
 80065fa:	ee18 1a10 	vmov	r1, s16
 80065fe:	2201      	movs	r2, #1
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fced 	bl	8006fe0 <__lshift>
 8006606:	4631      	mov	r1, r6
 8006608:	ee08 0a10 	vmov	s16, r0
 800660c:	f000 fd58 	bl	80070c0 <__mcmp>
 8006610:	2800      	cmp	r0, #0
 8006612:	dc03      	bgt.n	800661c <_dtoa_r+0xa9c>
 8006614:	d1e0      	bne.n	80065d8 <_dtoa_r+0xa58>
 8006616:	f01a 0f01 	tst.w	sl, #1
 800661a:	d0dd      	beq.n	80065d8 <_dtoa_r+0xa58>
 800661c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006620:	d1d7      	bne.n	80065d2 <_dtoa_r+0xa52>
 8006622:	2339      	movs	r3, #57	; 0x39
 8006624:	f88b 3000 	strb.w	r3, [fp]
 8006628:	462b      	mov	r3, r5
 800662a:	461d      	mov	r5, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006632:	2a39      	cmp	r2, #57	; 0x39
 8006634:	d071      	beq.n	800671a <_dtoa_r+0xb9a>
 8006636:	3201      	adds	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	e746      	b.n	80064ca <_dtoa_r+0x94a>
 800663c:	2a00      	cmp	r2, #0
 800663e:	dd07      	ble.n	8006650 <_dtoa_r+0xad0>
 8006640:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006644:	d0ed      	beq.n	8006622 <_dtoa_r+0xaa2>
 8006646:	f10a 0301 	add.w	r3, sl, #1
 800664a:	f88b 3000 	strb.w	r3, [fp]
 800664e:	e73c      	b.n	80064ca <_dtoa_r+0x94a>
 8006650:	9b05      	ldr	r3, [sp, #20]
 8006652:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006656:	4599      	cmp	r9, r3
 8006658:	d047      	beq.n	80066ea <_dtoa_r+0xb6a>
 800665a:	ee18 1a10 	vmov	r1, s16
 800665e:	2300      	movs	r3, #0
 8006660:	220a      	movs	r2, #10
 8006662:	4620      	mov	r0, r4
 8006664:	f000 fb0c 	bl	8006c80 <__multadd>
 8006668:	45b8      	cmp	r8, r7
 800666a:	ee08 0a10 	vmov	s16, r0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	f04f 020a 	mov.w	r2, #10
 8006676:	4641      	mov	r1, r8
 8006678:	4620      	mov	r0, r4
 800667a:	d106      	bne.n	800668a <_dtoa_r+0xb0a>
 800667c:	f000 fb00 	bl	8006c80 <__multadd>
 8006680:	4680      	mov	r8, r0
 8006682:	4607      	mov	r7, r0
 8006684:	f109 0901 	add.w	r9, r9, #1
 8006688:	e772      	b.n	8006570 <_dtoa_r+0x9f0>
 800668a:	f000 faf9 	bl	8006c80 <__multadd>
 800668e:	4639      	mov	r1, r7
 8006690:	4680      	mov	r8, r0
 8006692:	2300      	movs	r3, #0
 8006694:	220a      	movs	r2, #10
 8006696:	4620      	mov	r0, r4
 8006698:	f000 faf2 	bl	8006c80 <__multadd>
 800669c:	4607      	mov	r7, r0
 800669e:	e7f1      	b.n	8006684 <_dtoa_r+0xb04>
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	9302      	str	r3, [sp, #8]
 80066a4:	9d01      	ldr	r5, [sp, #4]
 80066a6:	ee18 0a10 	vmov	r0, s16
 80066aa:	4631      	mov	r1, r6
 80066ac:	f7ff f9da 	bl	8005a64 <quorem>
 80066b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066b4:	9b01      	ldr	r3, [sp, #4]
 80066b6:	f805 ab01 	strb.w	sl, [r5], #1
 80066ba:	1aea      	subs	r2, r5, r3
 80066bc:	9b02      	ldr	r3, [sp, #8]
 80066be:	4293      	cmp	r3, r2
 80066c0:	dd09      	ble.n	80066d6 <_dtoa_r+0xb56>
 80066c2:	ee18 1a10 	vmov	r1, s16
 80066c6:	2300      	movs	r3, #0
 80066c8:	220a      	movs	r2, #10
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fad8 	bl	8006c80 <__multadd>
 80066d0:	ee08 0a10 	vmov	s16, r0
 80066d4:	e7e7      	b.n	80066a6 <_dtoa_r+0xb26>
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bfc8      	it	gt
 80066dc:	461d      	movgt	r5, r3
 80066de:	9b01      	ldr	r3, [sp, #4]
 80066e0:	bfd8      	it	le
 80066e2:	2501      	movle	r5, #1
 80066e4:	441d      	add	r5, r3
 80066e6:	f04f 0800 	mov.w	r8, #0
 80066ea:	ee18 1a10 	vmov	r1, s16
 80066ee:	2201      	movs	r2, #1
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fc75 	bl	8006fe0 <__lshift>
 80066f6:	4631      	mov	r1, r6
 80066f8:	ee08 0a10 	vmov	s16, r0
 80066fc:	f000 fce0 	bl	80070c0 <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	dc91      	bgt.n	8006628 <_dtoa_r+0xaa8>
 8006704:	d102      	bne.n	800670c <_dtoa_r+0xb8c>
 8006706:	f01a 0f01 	tst.w	sl, #1
 800670a:	d18d      	bne.n	8006628 <_dtoa_r+0xaa8>
 800670c:	462b      	mov	r3, r5
 800670e:	461d      	mov	r5, r3
 8006710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006714:	2a30      	cmp	r2, #48	; 0x30
 8006716:	d0fa      	beq.n	800670e <_dtoa_r+0xb8e>
 8006718:	e6d7      	b.n	80064ca <_dtoa_r+0x94a>
 800671a:	9a01      	ldr	r2, [sp, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d184      	bne.n	800662a <_dtoa_r+0xaaa>
 8006720:	9b00      	ldr	r3, [sp, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	2331      	movs	r3, #49	; 0x31
 8006728:	7013      	strb	r3, [r2, #0]
 800672a:	e6ce      	b.n	80064ca <_dtoa_r+0x94a>
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <_dtoa_r+0xbd4>)
 800672e:	f7ff ba95 	b.w	8005c5c <_dtoa_r+0xdc>
 8006732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006734:	2b00      	cmp	r3, #0
 8006736:	f47f aa6e 	bne.w	8005c16 <_dtoa_r+0x96>
 800673a:	4b07      	ldr	r3, [pc, #28]	; (8006758 <_dtoa_r+0xbd8>)
 800673c:	f7ff ba8e 	b.w	8005c5c <_dtoa_r+0xdc>
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	dcae      	bgt.n	80066a4 <_dtoa_r+0xb24>
 8006746:	9b06      	ldr	r3, [sp, #24]
 8006748:	2b02      	cmp	r3, #2
 800674a:	f73f aea8 	bgt.w	800649e <_dtoa_r+0x91e>
 800674e:	e7a9      	b.n	80066a4 <_dtoa_r+0xb24>
 8006750:	08011fbf 	.word	0x08011fbf
 8006754:	08011f1c 	.word	0x08011f1c
 8006758:	08011f40 	.word	0x08011f40

0800675c <__sflush_r>:
 800675c:	898a      	ldrh	r2, [r1, #12]
 800675e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006762:	4605      	mov	r5, r0
 8006764:	0710      	lsls	r0, r2, #28
 8006766:	460c      	mov	r4, r1
 8006768:	d458      	bmi.n	800681c <__sflush_r+0xc0>
 800676a:	684b      	ldr	r3, [r1, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	dc05      	bgt.n	800677c <__sflush_r+0x20>
 8006770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	dc02      	bgt.n	800677c <__sflush_r+0x20>
 8006776:	2000      	movs	r0, #0
 8006778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800677c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800677e:	2e00      	cmp	r6, #0
 8006780:	d0f9      	beq.n	8006776 <__sflush_r+0x1a>
 8006782:	2300      	movs	r3, #0
 8006784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006788:	682f      	ldr	r7, [r5, #0]
 800678a:	602b      	str	r3, [r5, #0]
 800678c:	d032      	beq.n	80067f4 <__sflush_r+0x98>
 800678e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	075a      	lsls	r2, r3, #29
 8006794:	d505      	bpl.n	80067a2 <__sflush_r+0x46>
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	1ac0      	subs	r0, r0, r3
 800679a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800679c:	b10b      	cbz	r3, 80067a2 <__sflush_r+0x46>
 800679e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067a0:	1ac0      	subs	r0, r0, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	4602      	mov	r2, r0
 80067a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067a8:	6a21      	ldr	r1, [r4, #32]
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b0      	blx	r6
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	d106      	bne.n	80067c2 <__sflush_r+0x66>
 80067b4:	6829      	ldr	r1, [r5, #0]
 80067b6:	291d      	cmp	r1, #29
 80067b8:	d82c      	bhi.n	8006814 <__sflush_r+0xb8>
 80067ba:	4a2a      	ldr	r2, [pc, #168]	; (8006864 <__sflush_r+0x108>)
 80067bc:	40ca      	lsrs	r2, r1
 80067be:	07d6      	lsls	r6, r2, #31
 80067c0:	d528      	bpl.n	8006814 <__sflush_r+0xb8>
 80067c2:	2200      	movs	r2, #0
 80067c4:	6062      	str	r2, [r4, #4]
 80067c6:	04d9      	lsls	r1, r3, #19
 80067c8:	6922      	ldr	r2, [r4, #16]
 80067ca:	6022      	str	r2, [r4, #0]
 80067cc:	d504      	bpl.n	80067d8 <__sflush_r+0x7c>
 80067ce:	1c42      	adds	r2, r0, #1
 80067d0:	d101      	bne.n	80067d6 <__sflush_r+0x7a>
 80067d2:	682b      	ldr	r3, [r5, #0]
 80067d4:	b903      	cbnz	r3, 80067d8 <__sflush_r+0x7c>
 80067d6:	6560      	str	r0, [r4, #84]	; 0x54
 80067d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067da:	602f      	str	r7, [r5, #0]
 80067dc:	2900      	cmp	r1, #0
 80067de:	d0ca      	beq.n	8006776 <__sflush_r+0x1a>
 80067e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067e4:	4299      	cmp	r1, r3
 80067e6:	d002      	beq.n	80067ee <__sflush_r+0x92>
 80067e8:	4628      	mov	r0, r5
 80067ea:	f7fe fa6b 	bl	8004cc4 <_free_r>
 80067ee:	2000      	movs	r0, #0
 80067f0:	6360      	str	r0, [r4, #52]	; 0x34
 80067f2:	e7c1      	b.n	8006778 <__sflush_r+0x1c>
 80067f4:	6a21      	ldr	r1, [r4, #32]
 80067f6:	2301      	movs	r3, #1
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b0      	blx	r6
 80067fc:	1c41      	adds	r1, r0, #1
 80067fe:	d1c7      	bne.n	8006790 <__sflush_r+0x34>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0c4      	beq.n	8006790 <__sflush_r+0x34>
 8006806:	2b1d      	cmp	r3, #29
 8006808:	d001      	beq.n	800680e <__sflush_r+0xb2>
 800680a:	2b16      	cmp	r3, #22
 800680c:	d101      	bne.n	8006812 <__sflush_r+0xb6>
 800680e:	602f      	str	r7, [r5, #0]
 8006810:	e7b1      	b.n	8006776 <__sflush_r+0x1a>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	e7ad      	b.n	8006778 <__sflush_r+0x1c>
 800681c:	690f      	ldr	r7, [r1, #16]
 800681e:	2f00      	cmp	r7, #0
 8006820:	d0a9      	beq.n	8006776 <__sflush_r+0x1a>
 8006822:	0793      	lsls	r3, r2, #30
 8006824:	680e      	ldr	r6, [r1, #0]
 8006826:	bf08      	it	eq
 8006828:	694b      	ldreq	r3, [r1, #20]
 800682a:	600f      	str	r7, [r1, #0]
 800682c:	bf18      	it	ne
 800682e:	2300      	movne	r3, #0
 8006830:	eba6 0807 	sub.w	r8, r6, r7
 8006834:	608b      	str	r3, [r1, #8]
 8006836:	f1b8 0f00 	cmp.w	r8, #0
 800683a:	dd9c      	ble.n	8006776 <__sflush_r+0x1a>
 800683c:	6a21      	ldr	r1, [r4, #32]
 800683e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006840:	4643      	mov	r3, r8
 8006842:	463a      	mov	r2, r7
 8006844:	4628      	mov	r0, r5
 8006846:	47b0      	blx	r6
 8006848:	2800      	cmp	r0, #0
 800684a:	dc06      	bgt.n	800685a <__sflush_r+0xfe>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	e78e      	b.n	8006778 <__sflush_r+0x1c>
 800685a:	4407      	add	r7, r0
 800685c:	eba8 0800 	sub.w	r8, r8, r0
 8006860:	e7e9      	b.n	8006836 <__sflush_r+0xda>
 8006862:	bf00      	nop
 8006864:	20400001 	.word	0x20400001

08006868 <_fflush_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	690b      	ldr	r3, [r1, #16]
 800686c:	4605      	mov	r5, r0
 800686e:	460c      	mov	r4, r1
 8006870:	b913      	cbnz	r3, 8006878 <_fflush_r+0x10>
 8006872:	2500      	movs	r5, #0
 8006874:	4628      	mov	r0, r5
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	b118      	cbz	r0, 8006882 <_fflush_r+0x1a>
 800687a:	6983      	ldr	r3, [r0, #24]
 800687c:	b90b      	cbnz	r3, 8006882 <_fflush_r+0x1a>
 800687e:	f000 f887 	bl	8006990 <__sinit>
 8006882:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <_fflush_r+0x6c>)
 8006884:	429c      	cmp	r4, r3
 8006886:	d11b      	bne.n	80068c0 <_fflush_r+0x58>
 8006888:	686c      	ldr	r4, [r5, #4]
 800688a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0ef      	beq.n	8006872 <_fflush_r+0xa>
 8006892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006894:	07d0      	lsls	r0, r2, #31
 8006896:	d404      	bmi.n	80068a2 <_fflush_r+0x3a>
 8006898:	0599      	lsls	r1, r3, #22
 800689a:	d402      	bmi.n	80068a2 <_fflush_r+0x3a>
 800689c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800689e:	f000 f91a 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 80068a2:	4628      	mov	r0, r5
 80068a4:	4621      	mov	r1, r4
 80068a6:	f7ff ff59 	bl	800675c <__sflush_r>
 80068aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ac:	07da      	lsls	r2, r3, #31
 80068ae:	4605      	mov	r5, r0
 80068b0:	d4e0      	bmi.n	8006874 <_fflush_r+0xc>
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	059b      	lsls	r3, r3, #22
 80068b6:	d4dd      	bmi.n	8006874 <_fflush_r+0xc>
 80068b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ba:	f000 f90d 	bl	8006ad8 <__retarget_lock_release_recursive>
 80068be:	e7d9      	b.n	8006874 <_fflush_r+0xc>
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <_fflush_r+0x70>)
 80068c2:	429c      	cmp	r4, r3
 80068c4:	d101      	bne.n	80068ca <_fflush_r+0x62>
 80068c6:	68ac      	ldr	r4, [r5, #8]
 80068c8:	e7df      	b.n	800688a <_fflush_r+0x22>
 80068ca:	4b04      	ldr	r3, [pc, #16]	; (80068dc <_fflush_r+0x74>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	bf08      	it	eq
 80068d0:	68ec      	ldreq	r4, [r5, #12]
 80068d2:	e7da      	b.n	800688a <_fflush_r+0x22>
 80068d4:	08011ff0 	.word	0x08011ff0
 80068d8:	08012010 	.word	0x08012010
 80068dc:	08011fd0 	.word	0x08011fd0

080068e0 <std>:
 80068e0:	2300      	movs	r3, #0
 80068e2:	b510      	push	{r4, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ee:	6083      	str	r3, [r0, #8]
 80068f0:	8181      	strh	r1, [r0, #12]
 80068f2:	6643      	str	r3, [r0, #100]	; 0x64
 80068f4:	81c2      	strh	r2, [r0, #14]
 80068f6:	6183      	str	r3, [r0, #24]
 80068f8:	4619      	mov	r1, r3
 80068fa:	2208      	movs	r2, #8
 80068fc:	305c      	adds	r0, #92	; 0x5c
 80068fe:	f7fe f9d9 	bl	8004cb4 <memset>
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <std+0x38>)
 8006904:	6263      	str	r3, [r4, #36]	; 0x24
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <std+0x3c>)
 8006908:	62a3      	str	r3, [r4, #40]	; 0x28
 800690a:	4b05      	ldr	r3, [pc, #20]	; (8006920 <std+0x40>)
 800690c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800690e:	4b05      	ldr	r3, [pc, #20]	; (8006924 <std+0x44>)
 8006910:	6224      	str	r4, [r4, #32]
 8006912:	6323      	str	r3, [r4, #48]	; 0x30
 8006914:	bd10      	pop	{r4, pc}
 8006916:	bf00      	nop
 8006918:	080078b9 	.word	0x080078b9
 800691c:	080078db 	.word	0x080078db
 8006920:	08007913 	.word	0x08007913
 8006924:	08007937 	.word	0x08007937

08006928 <_cleanup_r>:
 8006928:	4901      	ldr	r1, [pc, #4]	; (8006930 <_cleanup_r+0x8>)
 800692a:	f000 b8af 	b.w	8006a8c <_fwalk_reent>
 800692e:	bf00      	nop
 8006930:	08006869 	.word	0x08006869

08006934 <__sfmoreglue>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	2268      	movs	r2, #104	; 0x68
 8006938:	1e4d      	subs	r5, r1, #1
 800693a:	4355      	muls	r5, r2
 800693c:	460e      	mov	r6, r1
 800693e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006942:	f7fe fa2b 	bl	8004d9c <_malloc_r>
 8006946:	4604      	mov	r4, r0
 8006948:	b140      	cbz	r0, 800695c <__sfmoreglue+0x28>
 800694a:	2100      	movs	r1, #0
 800694c:	e9c0 1600 	strd	r1, r6, [r0]
 8006950:	300c      	adds	r0, #12
 8006952:	60a0      	str	r0, [r4, #8]
 8006954:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006958:	f7fe f9ac 	bl	8004cb4 <memset>
 800695c:	4620      	mov	r0, r4
 800695e:	bd70      	pop	{r4, r5, r6, pc}

08006960 <__sfp_lock_acquire>:
 8006960:	4801      	ldr	r0, [pc, #4]	; (8006968 <__sfp_lock_acquire+0x8>)
 8006962:	f000 b8b8 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 8006966:	bf00      	nop
 8006968:	20001515 	.word	0x20001515

0800696c <__sfp_lock_release>:
 800696c:	4801      	ldr	r0, [pc, #4]	; (8006974 <__sfp_lock_release+0x8>)
 800696e:	f000 b8b3 	b.w	8006ad8 <__retarget_lock_release_recursive>
 8006972:	bf00      	nop
 8006974:	20001515 	.word	0x20001515

08006978 <__sinit_lock_acquire>:
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <__sinit_lock_acquire+0x8>)
 800697a:	f000 b8ac 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 800697e:	bf00      	nop
 8006980:	20001516 	.word	0x20001516

08006984 <__sinit_lock_release>:
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <__sinit_lock_release+0x8>)
 8006986:	f000 b8a7 	b.w	8006ad8 <__retarget_lock_release_recursive>
 800698a:	bf00      	nop
 800698c:	20001516 	.word	0x20001516

08006990 <__sinit>:
 8006990:	b510      	push	{r4, lr}
 8006992:	4604      	mov	r4, r0
 8006994:	f7ff fff0 	bl	8006978 <__sinit_lock_acquire>
 8006998:	69a3      	ldr	r3, [r4, #24]
 800699a:	b11b      	cbz	r3, 80069a4 <__sinit+0x14>
 800699c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a0:	f7ff bff0 	b.w	8006984 <__sinit_lock_release>
 80069a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069a8:	6523      	str	r3, [r4, #80]	; 0x50
 80069aa:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <__sinit+0x68>)
 80069ac:	4a13      	ldr	r2, [pc, #76]	; (80069fc <__sinit+0x6c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80069b2:	42a3      	cmp	r3, r4
 80069b4:	bf04      	itt	eq
 80069b6:	2301      	moveq	r3, #1
 80069b8:	61a3      	streq	r3, [r4, #24]
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 f820 	bl	8006a00 <__sfp>
 80069c0:	6060      	str	r0, [r4, #4]
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 f81c 	bl	8006a00 <__sfp>
 80069c8:	60a0      	str	r0, [r4, #8]
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 f818 	bl	8006a00 <__sfp>
 80069d0:	2200      	movs	r2, #0
 80069d2:	60e0      	str	r0, [r4, #12]
 80069d4:	2104      	movs	r1, #4
 80069d6:	6860      	ldr	r0, [r4, #4]
 80069d8:	f7ff ff82 	bl	80068e0 <std>
 80069dc:	68a0      	ldr	r0, [r4, #8]
 80069de:	2201      	movs	r2, #1
 80069e0:	2109      	movs	r1, #9
 80069e2:	f7ff ff7d 	bl	80068e0 <std>
 80069e6:	68e0      	ldr	r0, [r4, #12]
 80069e8:	2202      	movs	r2, #2
 80069ea:	2112      	movs	r1, #18
 80069ec:	f7ff ff78 	bl	80068e0 <std>
 80069f0:	2301      	movs	r3, #1
 80069f2:	61a3      	str	r3, [r4, #24]
 80069f4:	e7d2      	b.n	800699c <__sinit+0xc>
 80069f6:	bf00      	nop
 80069f8:	08011f08 	.word	0x08011f08
 80069fc:	08006929 	.word	0x08006929

08006a00 <__sfp>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	4607      	mov	r7, r0
 8006a04:	f7ff ffac 	bl	8006960 <__sfp_lock_acquire>
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <__sfp+0x84>)
 8006a0a:	681e      	ldr	r6, [r3, #0]
 8006a0c:	69b3      	ldr	r3, [r6, #24]
 8006a0e:	b913      	cbnz	r3, 8006a16 <__sfp+0x16>
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7ff ffbd 	bl	8006990 <__sinit>
 8006a16:	3648      	adds	r6, #72	; 0x48
 8006a18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	d503      	bpl.n	8006a28 <__sfp+0x28>
 8006a20:	6833      	ldr	r3, [r6, #0]
 8006a22:	b30b      	cbz	r3, 8006a68 <__sfp+0x68>
 8006a24:	6836      	ldr	r6, [r6, #0]
 8006a26:	e7f7      	b.n	8006a18 <__sfp+0x18>
 8006a28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a2c:	b9d5      	cbnz	r5, 8006a64 <__sfp+0x64>
 8006a2e:	4b16      	ldr	r3, [pc, #88]	; (8006a88 <__sfp+0x88>)
 8006a30:	60e3      	str	r3, [r4, #12]
 8006a32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a36:	6665      	str	r5, [r4, #100]	; 0x64
 8006a38:	f000 f84c 	bl	8006ad4 <__retarget_lock_init_recursive>
 8006a3c:	f7ff ff96 	bl	800696c <__sfp_lock_release>
 8006a40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a48:	6025      	str	r5, [r4, #0]
 8006a4a:	61a5      	str	r5, [r4, #24]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a54:	f7fe f92e 	bl	8004cb4 <memset>
 8006a58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a60:	4620      	mov	r0, r4
 8006a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a64:	3468      	adds	r4, #104	; 0x68
 8006a66:	e7d9      	b.n	8006a1c <__sfp+0x1c>
 8006a68:	2104      	movs	r1, #4
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f7ff ff62 	bl	8006934 <__sfmoreglue>
 8006a70:	4604      	mov	r4, r0
 8006a72:	6030      	str	r0, [r6, #0]
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d1d5      	bne.n	8006a24 <__sfp+0x24>
 8006a78:	f7ff ff78 	bl	800696c <__sfp_lock_release>
 8006a7c:	230c      	movs	r3, #12
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	e7ee      	b.n	8006a60 <__sfp+0x60>
 8006a82:	bf00      	nop
 8006a84:	08011f08 	.word	0x08011f08
 8006a88:	ffff0001 	.word	0xffff0001

08006a8c <_fwalk_reent>:
 8006a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a90:	4606      	mov	r6, r0
 8006a92:	4688      	mov	r8, r1
 8006a94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a98:	2700      	movs	r7, #0
 8006a9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a9e:	f1b9 0901 	subs.w	r9, r9, #1
 8006aa2:	d505      	bpl.n	8006ab0 <_fwalk_reent+0x24>
 8006aa4:	6824      	ldr	r4, [r4, #0]
 8006aa6:	2c00      	cmp	r4, #0
 8006aa8:	d1f7      	bne.n	8006a9a <_fwalk_reent+0xe>
 8006aaa:	4638      	mov	r0, r7
 8006aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab0:	89ab      	ldrh	r3, [r5, #12]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d907      	bls.n	8006ac6 <_fwalk_reent+0x3a>
 8006ab6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aba:	3301      	adds	r3, #1
 8006abc:	d003      	beq.n	8006ac6 <_fwalk_reent+0x3a>
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	47c0      	blx	r8
 8006ac4:	4307      	orrs	r7, r0
 8006ac6:	3568      	adds	r5, #104	; 0x68
 8006ac8:	e7e9      	b.n	8006a9e <_fwalk_reent+0x12>
	...

08006acc <_localeconv_r>:
 8006acc:	4800      	ldr	r0, [pc, #0]	; (8006ad0 <_localeconv_r+0x4>)
 8006ace:	4770      	bx	lr
 8006ad0:	20000894 	.word	0x20000894

08006ad4 <__retarget_lock_init_recursive>:
 8006ad4:	4770      	bx	lr

08006ad6 <__retarget_lock_acquire_recursive>:
 8006ad6:	4770      	bx	lr

08006ad8 <__retarget_lock_release_recursive>:
 8006ad8:	4770      	bx	lr

08006ada <__swhatbuf_r>:
 8006ada:	b570      	push	{r4, r5, r6, lr}
 8006adc:	460e      	mov	r6, r1
 8006ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	b096      	sub	sp, #88	; 0x58
 8006ae6:	4614      	mov	r4, r2
 8006ae8:	461d      	mov	r5, r3
 8006aea:	da08      	bge.n	8006afe <__swhatbuf_r+0x24>
 8006aec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	602a      	str	r2, [r5, #0]
 8006af4:	061a      	lsls	r2, r3, #24
 8006af6:	d410      	bmi.n	8006b1a <__swhatbuf_r+0x40>
 8006af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006afc:	e00e      	b.n	8006b1c <__swhatbuf_r+0x42>
 8006afe:	466a      	mov	r2, sp
 8006b00:	f000 ff70 	bl	80079e4 <_fstat_r>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	dbf1      	blt.n	8006aec <__swhatbuf_r+0x12>
 8006b08:	9a01      	ldr	r2, [sp, #4]
 8006b0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b12:	425a      	negs	r2, r3
 8006b14:	415a      	adcs	r2, r3
 8006b16:	602a      	str	r2, [r5, #0]
 8006b18:	e7ee      	b.n	8006af8 <__swhatbuf_r+0x1e>
 8006b1a:	2340      	movs	r3, #64	; 0x40
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	b016      	add	sp, #88	; 0x58
 8006b22:	bd70      	pop	{r4, r5, r6, pc}

08006b24 <__smakebuf_r>:
 8006b24:	898b      	ldrh	r3, [r1, #12]
 8006b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b28:	079d      	lsls	r5, r3, #30
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	d507      	bpl.n	8006b40 <__smakebuf_r+0x1c>
 8006b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	6163      	str	r3, [r4, #20]
 8006b3c:	b002      	add	sp, #8
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	ab01      	add	r3, sp, #4
 8006b42:	466a      	mov	r2, sp
 8006b44:	f7ff ffc9 	bl	8006ada <__swhatbuf_r>
 8006b48:	9900      	ldr	r1, [sp, #0]
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7fe f925 	bl	8004d9c <_malloc_r>
 8006b52:	b948      	cbnz	r0, 8006b68 <__smakebuf_r+0x44>
 8006b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b58:	059a      	lsls	r2, r3, #22
 8006b5a:	d4ef      	bmi.n	8006b3c <__smakebuf_r+0x18>
 8006b5c:	f023 0303 	bic.w	r3, r3, #3
 8006b60:	f043 0302 	orr.w	r3, r3, #2
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	e7e3      	b.n	8006b30 <__smakebuf_r+0xc>
 8006b68:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <__smakebuf_r+0x7c>)
 8006b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	6020      	str	r0, [r4, #0]
 8006b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	9b00      	ldr	r3, [sp, #0]
 8006b78:	6163      	str	r3, [r4, #20]
 8006b7a:	9b01      	ldr	r3, [sp, #4]
 8006b7c:	6120      	str	r0, [r4, #16]
 8006b7e:	b15b      	cbz	r3, 8006b98 <__smakebuf_r+0x74>
 8006b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b84:	4630      	mov	r0, r6
 8006b86:	f000 ff3f 	bl	8007a08 <_isatty_r>
 8006b8a:	b128      	cbz	r0, 8006b98 <__smakebuf_r+0x74>
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	f023 0303 	bic.w	r3, r3, #3
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	81a3      	strh	r3, [r4, #12]
 8006b98:	89a0      	ldrh	r0, [r4, #12]
 8006b9a:	4305      	orrs	r5, r0
 8006b9c:	81a5      	strh	r5, [r4, #12]
 8006b9e:	e7cd      	b.n	8006b3c <__smakebuf_r+0x18>
 8006ba0:	08006929 	.word	0x08006929

08006ba4 <__malloc_lock>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	; (8006bac <__malloc_lock+0x8>)
 8006ba6:	f7ff bf96 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 8006baa:	bf00      	nop
 8006bac:	20001514 	.word	0x20001514

08006bb0 <__malloc_unlock>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	; (8006bb8 <__malloc_unlock+0x8>)
 8006bb2:	f7ff bf91 	b.w	8006ad8 <__retarget_lock_release_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	20001514 	.word	0x20001514

08006bbc <_Balloc>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	b976      	cbnz	r6, 8006be4 <_Balloc+0x28>
 8006bc6:	2010      	movs	r0, #16
 8006bc8:	f7fe f85e 	bl	8004c88 <malloc>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6260      	str	r0, [r4, #36]	; 0x24
 8006bd0:	b920      	cbnz	r0, 8006bdc <_Balloc+0x20>
 8006bd2:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <_Balloc+0x78>)
 8006bd4:	4818      	ldr	r0, [pc, #96]	; (8006c38 <_Balloc+0x7c>)
 8006bd6:	2166      	movs	r1, #102	; 0x66
 8006bd8:	f000 fec4 	bl	8007964 <__assert_func>
 8006bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006be0:	6006      	str	r6, [r0, #0]
 8006be2:	60c6      	str	r6, [r0, #12]
 8006be4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006be6:	68f3      	ldr	r3, [r6, #12]
 8006be8:	b183      	cbz	r3, 8006c0c <_Balloc+0x50>
 8006bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bf2:	b9b8      	cbnz	r0, 8006c24 <_Balloc+0x68>
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8006bfa:	1d72      	adds	r2, r6, #5
 8006bfc:	0092      	lsls	r2, r2, #2
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 fb60 	bl	80072c4 <_calloc_r>
 8006c04:	b160      	cbz	r0, 8006c20 <_Balloc+0x64>
 8006c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c0a:	e00e      	b.n	8006c2a <_Balloc+0x6e>
 8006c0c:	2221      	movs	r2, #33	; 0x21
 8006c0e:	2104      	movs	r1, #4
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fb57 	bl	80072c4 <_calloc_r>
 8006c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c18:	60f0      	str	r0, [r6, #12]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e4      	bne.n	8006bea <_Balloc+0x2e>
 8006c20:	2000      	movs	r0, #0
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	6802      	ldr	r2, [r0, #0]
 8006c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c30:	e7f7      	b.n	8006c22 <_Balloc+0x66>
 8006c32:	bf00      	nop
 8006c34:	08011f4d 	.word	0x08011f4d
 8006c38:	08012030 	.word	0x08012030

08006c3c <_Bfree>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c40:	4605      	mov	r5, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	b976      	cbnz	r6, 8006c64 <_Bfree+0x28>
 8006c46:	2010      	movs	r0, #16
 8006c48:	f7fe f81e 	bl	8004c88 <malloc>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6268      	str	r0, [r5, #36]	; 0x24
 8006c50:	b920      	cbnz	r0, 8006c5c <_Bfree+0x20>
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <_Bfree+0x3c>)
 8006c54:	4809      	ldr	r0, [pc, #36]	; (8006c7c <_Bfree+0x40>)
 8006c56:	218a      	movs	r1, #138	; 0x8a
 8006c58:	f000 fe84 	bl	8007964 <__assert_func>
 8006c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c60:	6006      	str	r6, [r0, #0]
 8006c62:	60c6      	str	r6, [r0, #12]
 8006c64:	b13c      	cbz	r4, 8006c76 <_Bfree+0x3a>
 8006c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c68:	6862      	ldr	r2, [r4, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c70:	6021      	str	r1, [r4, #0]
 8006c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	08011f4d 	.word	0x08011f4d
 8006c7c:	08012030 	.word	0x08012030

08006c80 <__multadd>:
 8006c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c84:	690d      	ldr	r5, [r1, #16]
 8006c86:	4607      	mov	r7, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	461e      	mov	r6, r3
 8006c8c:	f101 0c14 	add.w	ip, r1, #20
 8006c90:	2000      	movs	r0, #0
 8006c92:	f8dc 3000 	ldr.w	r3, [ip]
 8006c96:	b299      	uxth	r1, r3
 8006c98:	fb02 6101 	mla	r1, r2, r1, r6
 8006c9c:	0c1e      	lsrs	r6, r3, #16
 8006c9e:	0c0b      	lsrs	r3, r1, #16
 8006ca0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ca4:	b289      	uxth	r1, r1
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cac:	4285      	cmp	r5, r0
 8006cae:	f84c 1b04 	str.w	r1, [ip], #4
 8006cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cb6:	dcec      	bgt.n	8006c92 <__multadd+0x12>
 8006cb8:	b30e      	cbz	r6, 8006cfe <__multadd+0x7e>
 8006cba:	68a3      	ldr	r3, [r4, #8]
 8006cbc:	42ab      	cmp	r3, r5
 8006cbe:	dc19      	bgt.n	8006cf4 <__multadd+0x74>
 8006cc0:	6861      	ldr	r1, [r4, #4]
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	3101      	adds	r1, #1
 8006cc6:	f7ff ff79 	bl	8006bbc <_Balloc>
 8006cca:	4680      	mov	r8, r0
 8006ccc:	b928      	cbnz	r0, 8006cda <__multadd+0x5a>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <__multadd+0x84>)
 8006cd2:	480d      	ldr	r0, [pc, #52]	; (8006d08 <__multadd+0x88>)
 8006cd4:	21b5      	movs	r1, #181	; 0xb5
 8006cd6:	f000 fe45 	bl	8007964 <__assert_func>
 8006cda:	6922      	ldr	r2, [r4, #16]
 8006cdc:	3202      	adds	r2, #2
 8006cde:	f104 010c 	add.w	r1, r4, #12
 8006ce2:	0092      	lsls	r2, r2, #2
 8006ce4:	300c      	adds	r0, #12
 8006ce6:	f7fd ffd7 	bl	8004c98 <memcpy>
 8006cea:	4621      	mov	r1, r4
 8006cec:	4638      	mov	r0, r7
 8006cee:	f7ff ffa5 	bl	8006c3c <_Bfree>
 8006cf2:	4644      	mov	r4, r8
 8006cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cf8:	3501      	adds	r5, #1
 8006cfa:	615e      	str	r6, [r3, #20]
 8006cfc:	6125      	str	r5, [r4, #16]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d04:	08011fbf 	.word	0x08011fbf
 8006d08:	08012030 	.word	0x08012030

08006d0c <__hi0bits>:
 8006d0c:	0c03      	lsrs	r3, r0, #16
 8006d0e:	041b      	lsls	r3, r3, #16
 8006d10:	b9d3      	cbnz	r3, 8006d48 <__hi0bits+0x3c>
 8006d12:	0400      	lsls	r0, r0, #16
 8006d14:	2310      	movs	r3, #16
 8006d16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d1a:	bf04      	itt	eq
 8006d1c:	0200      	lsleq	r0, r0, #8
 8006d1e:	3308      	addeq	r3, #8
 8006d20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d24:	bf04      	itt	eq
 8006d26:	0100      	lsleq	r0, r0, #4
 8006d28:	3304      	addeq	r3, #4
 8006d2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d2e:	bf04      	itt	eq
 8006d30:	0080      	lsleq	r0, r0, #2
 8006d32:	3302      	addeq	r3, #2
 8006d34:	2800      	cmp	r0, #0
 8006d36:	db05      	blt.n	8006d44 <__hi0bits+0x38>
 8006d38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d3c:	f103 0301 	add.w	r3, r3, #1
 8006d40:	bf08      	it	eq
 8006d42:	2320      	moveq	r3, #32
 8006d44:	4618      	mov	r0, r3
 8006d46:	4770      	bx	lr
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e7e4      	b.n	8006d16 <__hi0bits+0xa>

08006d4c <__lo0bits>:
 8006d4c:	6803      	ldr	r3, [r0, #0]
 8006d4e:	f013 0207 	ands.w	r2, r3, #7
 8006d52:	4601      	mov	r1, r0
 8006d54:	d00b      	beq.n	8006d6e <__lo0bits+0x22>
 8006d56:	07da      	lsls	r2, r3, #31
 8006d58:	d423      	bmi.n	8006da2 <__lo0bits+0x56>
 8006d5a:	0798      	lsls	r0, r3, #30
 8006d5c:	bf49      	itett	mi
 8006d5e:	085b      	lsrmi	r3, r3, #1
 8006d60:	089b      	lsrpl	r3, r3, #2
 8006d62:	2001      	movmi	r0, #1
 8006d64:	600b      	strmi	r3, [r1, #0]
 8006d66:	bf5c      	itt	pl
 8006d68:	600b      	strpl	r3, [r1, #0]
 8006d6a:	2002      	movpl	r0, #2
 8006d6c:	4770      	bx	lr
 8006d6e:	b298      	uxth	r0, r3
 8006d70:	b9a8      	cbnz	r0, 8006d9e <__lo0bits+0x52>
 8006d72:	0c1b      	lsrs	r3, r3, #16
 8006d74:	2010      	movs	r0, #16
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	b90a      	cbnz	r2, 8006d7e <__lo0bits+0x32>
 8006d7a:	3008      	adds	r0, #8
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	071a      	lsls	r2, r3, #28
 8006d80:	bf04      	itt	eq
 8006d82:	091b      	lsreq	r3, r3, #4
 8006d84:	3004      	addeq	r0, #4
 8006d86:	079a      	lsls	r2, r3, #30
 8006d88:	bf04      	itt	eq
 8006d8a:	089b      	lsreq	r3, r3, #2
 8006d8c:	3002      	addeq	r0, #2
 8006d8e:	07da      	lsls	r2, r3, #31
 8006d90:	d403      	bmi.n	8006d9a <__lo0bits+0x4e>
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	f100 0001 	add.w	r0, r0, #1
 8006d98:	d005      	beq.n	8006da6 <__lo0bits+0x5a>
 8006d9a:	600b      	str	r3, [r1, #0]
 8006d9c:	4770      	bx	lr
 8006d9e:	4610      	mov	r0, r2
 8006da0:	e7e9      	b.n	8006d76 <__lo0bits+0x2a>
 8006da2:	2000      	movs	r0, #0
 8006da4:	4770      	bx	lr
 8006da6:	2020      	movs	r0, #32
 8006da8:	4770      	bx	lr
	...

08006dac <__i2b>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	460c      	mov	r4, r1
 8006db0:	2101      	movs	r1, #1
 8006db2:	f7ff ff03 	bl	8006bbc <_Balloc>
 8006db6:	4602      	mov	r2, r0
 8006db8:	b928      	cbnz	r0, 8006dc6 <__i2b+0x1a>
 8006dba:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <__i2b+0x24>)
 8006dbc:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <__i2b+0x28>)
 8006dbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dc2:	f000 fdcf 	bl	8007964 <__assert_func>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	6144      	str	r4, [r0, #20]
 8006dca:	6103      	str	r3, [r0, #16]
 8006dcc:	bd10      	pop	{r4, pc}
 8006dce:	bf00      	nop
 8006dd0:	08011fbf 	.word	0x08011fbf
 8006dd4:	08012030 	.word	0x08012030

08006dd8 <__multiply>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	4691      	mov	r9, r2
 8006dde:	690a      	ldr	r2, [r1, #16]
 8006de0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	bfb8      	it	lt
 8006de8:	460b      	movlt	r3, r1
 8006dea:	460c      	mov	r4, r1
 8006dec:	bfbc      	itt	lt
 8006dee:	464c      	movlt	r4, r9
 8006df0:	4699      	movlt	r9, r3
 8006df2:	6927      	ldr	r7, [r4, #16]
 8006df4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006df8:	68a3      	ldr	r3, [r4, #8]
 8006dfa:	6861      	ldr	r1, [r4, #4]
 8006dfc:	eb07 060a 	add.w	r6, r7, sl
 8006e00:	42b3      	cmp	r3, r6
 8006e02:	b085      	sub	sp, #20
 8006e04:	bfb8      	it	lt
 8006e06:	3101      	addlt	r1, #1
 8006e08:	f7ff fed8 	bl	8006bbc <_Balloc>
 8006e0c:	b930      	cbnz	r0, 8006e1c <__multiply+0x44>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	4b44      	ldr	r3, [pc, #272]	; (8006f24 <__multiply+0x14c>)
 8006e12:	4845      	ldr	r0, [pc, #276]	; (8006f28 <__multiply+0x150>)
 8006e14:	f240 115d 	movw	r1, #349	; 0x15d
 8006e18:	f000 fda4 	bl	8007964 <__assert_func>
 8006e1c:	f100 0514 	add.w	r5, r0, #20
 8006e20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e24:	462b      	mov	r3, r5
 8006e26:	2200      	movs	r2, #0
 8006e28:	4543      	cmp	r3, r8
 8006e2a:	d321      	bcc.n	8006e70 <__multiply+0x98>
 8006e2c:	f104 0314 	add.w	r3, r4, #20
 8006e30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e34:	f109 0314 	add.w	r3, r9, #20
 8006e38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e3c:	9202      	str	r2, [sp, #8]
 8006e3e:	1b3a      	subs	r2, r7, r4
 8006e40:	3a15      	subs	r2, #21
 8006e42:	f022 0203 	bic.w	r2, r2, #3
 8006e46:	3204      	adds	r2, #4
 8006e48:	f104 0115 	add.w	r1, r4, #21
 8006e4c:	428f      	cmp	r7, r1
 8006e4e:	bf38      	it	cc
 8006e50:	2204      	movcc	r2, #4
 8006e52:	9201      	str	r2, [sp, #4]
 8006e54:	9a02      	ldr	r2, [sp, #8]
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d80c      	bhi.n	8006e76 <__multiply+0x9e>
 8006e5c:	2e00      	cmp	r6, #0
 8006e5e:	dd03      	ble.n	8006e68 <__multiply+0x90>
 8006e60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d05a      	beq.n	8006f1e <__multiply+0x146>
 8006e68:	6106      	str	r6, [r0, #16]
 8006e6a:	b005      	add	sp, #20
 8006e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	f843 2b04 	str.w	r2, [r3], #4
 8006e74:	e7d8      	b.n	8006e28 <__multiply+0x50>
 8006e76:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e7a:	f1ba 0f00 	cmp.w	sl, #0
 8006e7e:	d024      	beq.n	8006eca <__multiply+0xf2>
 8006e80:	f104 0e14 	add.w	lr, r4, #20
 8006e84:	46a9      	mov	r9, r5
 8006e86:	f04f 0c00 	mov.w	ip, #0
 8006e8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e8e:	f8d9 1000 	ldr.w	r1, [r9]
 8006e92:	fa1f fb82 	uxth.w	fp, r2
 8006e96:	b289      	uxth	r1, r1
 8006e98:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ea4:	4461      	add	r1, ip
 8006ea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eaa:	fb0a c20b 	mla	r2, sl, fp, ip
 8006eae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006eb2:	b289      	uxth	r1, r1
 8006eb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006eb8:	4577      	cmp	r7, lr
 8006eba:	f849 1b04 	str.w	r1, [r9], #4
 8006ebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ec2:	d8e2      	bhi.n	8006e8a <__multiply+0xb2>
 8006ec4:	9a01      	ldr	r2, [sp, #4]
 8006ec6:	f845 c002 	str.w	ip, [r5, r2]
 8006eca:	9a03      	ldr	r2, [sp, #12]
 8006ecc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	f1b9 0f00 	cmp.w	r9, #0
 8006ed6:	d020      	beq.n	8006f1a <__multiply+0x142>
 8006ed8:	6829      	ldr	r1, [r5, #0]
 8006eda:	f104 0c14 	add.w	ip, r4, #20
 8006ede:	46ae      	mov	lr, r5
 8006ee0:	f04f 0a00 	mov.w	sl, #0
 8006ee4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ee8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006eec:	fb09 220b 	mla	r2, r9, fp, r2
 8006ef0:	4492      	add	sl, r2
 8006ef2:	b289      	uxth	r1, r1
 8006ef4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ef8:	f84e 1b04 	str.w	r1, [lr], #4
 8006efc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f00:	f8be 1000 	ldrh.w	r1, [lr]
 8006f04:	0c12      	lsrs	r2, r2, #16
 8006f06:	fb09 1102 	mla	r1, r9, r2, r1
 8006f0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f0e:	4567      	cmp	r7, ip
 8006f10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f14:	d8e6      	bhi.n	8006ee4 <__multiply+0x10c>
 8006f16:	9a01      	ldr	r2, [sp, #4]
 8006f18:	50a9      	str	r1, [r5, r2]
 8006f1a:	3504      	adds	r5, #4
 8006f1c:	e79a      	b.n	8006e54 <__multiply+0x7c>
 8006f1e:	3e01      	subs	r6, #1
 8006f20:	e79c      	b.n	8006e5c <__multiply+0x84>
 8006f22:	bf00      	nop
 8006f24:	08011fbf 	.word	0x08011fbf
 8006f28:	08012030 	.word	0x08012030

08006f2c <__pow5mult>:
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	4615      	mov	r5, r2
 8006f32:	f012 0203 	ands.w	r2, r2, #3
 8006f36:	4606      	mov	r6, r0
 8006f38:	460f      	mov	r7, r1
 8006f3a:	d007      	beq.n	8006f4c <__pow5mult+0x20>
 8006f3c:	4c25      	ldr	r4, [pc, #148]	; (8006fd4 <__pow5mult+0xa8>)
 8006f3e:	3a01      	subs	r2, #1
 8006f40:	2300      	movs	r3, #0
 8006f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f46:	f7ff fe9b 	bl	8006c80 <__multadd>
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	10ad      	asrs	r5, r5, #2
 8006f4e:	d03d      	beq.n	8006fcc <__pow5mult+0xa0>
 8006f50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f52:	b97c      	cbnz	r4, 8006f74 <__pow5mult+0x48>
 8006f54:	2010      	movs	r0, #16
 8006f56:	f7fd fe97 	bl	8004c88 <malloc>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6270      	str	r0, [r6, #36]	; 0x24
 8006f5e:	b928      	cbnz	r0, 8006f6c <__pow5mult+0x40>
 8006f60:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <__pow5mult+0xac>)
 8006f62:	481e      	ldr	r0, [pc, #120]	; (8006fdc <__pow5mult+0xb0>)
 8006f64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f68:	f000 fcfc 	bl	8007964 <__assert_func>
 8006f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f70:	6004      	str	r4, [r0, #0]
 8006f72:	60c4      	str	r4, [r0, #12]
 8006f74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f7c:	b94c      	cbnz	r4, 8006f92 <__pow5mult+0x66>
 8006f7e:	f240 2171 	movw	r1, #625	; 0x271
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7ff ff12 	bl	8006dac <__i2b>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f8e:	4604      	mov	r4, r0
 8006f90:	6003      	str	r3, [r0, #0]
 8006f92:	f04f 0900 	mov.w	r9, #0
 8006f96:	07eb      	lsls	r3, r5, #31
 8006f98:	d50a      	bpl.n	8006fb0 <__pow5mult+0x84>
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff ff1a 	bl	8006dd8 <__multiply>
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff fe47 	bl	8006c3c <_Bfree>
 8006fae:	4647      	mov	r7, r8
 8006fb0:	106d      	asrs	r5, r5, #1
 8006fb2:	d00b      	beq.n	8006fcc <__pow5mult+0xa0>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	b938      	cbnz	r0, 8006fc8 <__pow5mult+0x9c>
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff ff0b 	bl	8006dd8 <__multiply>
 8006fc2:	6020      	str	r0, [r4, #0]
 8006fc4:	f8c0 9000 	str.w	r9, [r0]
 8006fc8:	4604      	mov	r4, r0
 8006fca:	e7e4      	b.n	8006f96 <__pow5mult+0x6a>
 8006fcc:	4638      	mov	r0, r7
 8006fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd2:	bf00      	nop
 8006fd4:	08012180 	.word	0x08012180
 8006fd8:	08011f4d 	.word	0x08011f4d
 8006fdc:	08012030 	.word	0x08012030

08006fe0 <__lshift>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	6849      	ldr	r1, [r1, #4]
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	4691      	mov	r9, r2
 8006ff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ff8:	f108 0601 	add.w	r6, r8, #1
 8006ffc:	42b3      	cmp	r3, r6
 8006ffe:	db0b      	blt.n	8007018 <__lshift+0x38>
 8007000:	4638      	mov	r0, r7
 8007002:	f7ff fddb 	bl	8006bbc <_Balloc>
 8007006:	4605      	mov	r5, r0
 8007008:	b948      	cbnz	r0, 800701e <__lshift+0x3e>
 800700a:	4602      	mov	r2, r0
 800700c:	4b2a      	ldr	r3, [pc, #168]	; (80070b8 <__lshift+0xd8>)
 800700e:	482b      	ldr	r0, [pc, #172]	; (80070bc <__lshift+0xdc>)
 8007010:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007014:	f000 fca6 	bl	8007964 <__assert_func>
 8007018:	3101      	adds	r1, #1
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	e7ee      	b.n	8006ffc <__lshift+0x1c>
 800701e:	2300      	movs	r3, #0
 8007020:	f100 0114 	add.w	r1, r0, #20
 8007024:	f100 0210 	add.w	r2, r0, #16
 8007028:	4618      	mov	r0, r3
 800702a:	4553      	cmp	r3, sl
 800702c:	db37      	blt.n	800709e <__lshift+0xbe>
 800702e:	6920      	ldr	r0, [r4, #16]
 8007030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007034:	f104 0314 	add.w	r3, r4, #20
 8007038:	f019 091f 	ands.w	r9, r9, #31
 800703c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007044:	d02f      	beq.n	80070a6 <__lshift+0xc6>
 8007046:	f1c9 0e20 	rsb	lr, r9, #32
 800704a:	468a      	mov	sl, r1
 800704c:	f04f 0c00 	mov.w	ip, #0
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	fa02 f209 	lsl.w	r2, r2, r9
 8007056:	ea42 020c 	orr.w	r2, r2, ip
 800705a:	f84a 2b04 	str.w	r2, [sl], #4
 800705e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007062:	4298      	cmp	r0, r3
 8007064:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007068:	d8f2      	bhi.n	8007050 <__lshift+0x70>
 800706a:	1b03      	subs	r3, r0, r4
 800706c:	3b15      	subs	r3, #21
 800706e:	f023 0303 	bic.w	r3, r3, #3
 8007072:	3304      	adds	r3, #4
 8007074:	f104 0215 	add.w	r2, r4, #21
 8007078:	4290      	cmp	r0, r2
 800707a:	bf38      	it	cc
 800707c:	2304      	movcc	r3, #4
 800707e:	f841 c003 	str.w	ip, [r1, r3]
 8007082:	f1bc 0f00 	cmp.w	ip, #0
 8007086:	d001      	beq.n	800708c <__lshift+0xac>
 8007088:	f108 0602 	add.w	r6, r8, #2
 800708c:	3e01      	subs	r6, #1
 800708e:	4638      	mov	r0, r7
 8007090:	612e      	str	r6, [r5, #16]
 8007092:	4621      	mov	r1, r4
 8007094:	f7ff fdd2 	bl	8006c3c <_Bfree>
 8007098:	4628      	mov	r0, r5
 800709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709e:	f842 0f04 	str.w	r0, [r2, #4]!
 80070a2:	3301      	adds	r3, #1
 80070a4:	e7c1      	b.n	800702a <__lshift+0x4a>
 80070a6:	3904      	subs	r1, #4
 80070a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80070b0:	4298      	cmp	r0, r3
 80070b2:	d8f9      	bhi.n	80070a8 <__lshift+0xc8>
 80070b4:	e7ea      	b.n	800708c <__lshift+0xac>
 80070b6:	bf00      	nop
 80070b8:	08011fbf 	.word	0x08011fbf
 80070bc:	08012030 	.word	0x08012030

080070c0 <__mcmp>:
 80070c0:	b530      	push	{r4, r5, lr}
 80070c2:	6902      	ldr	r2, [r0, #16]
 80070c4:	690c      	ldr	r4, [r1, #16]
 80070c6:	1b12      	subs	r2, r2, r4
 80070c8:	d10e      	bne.n	80070e8 <__mcmp+0x28>
 80070ca:	f100 0314 	add.w	r3, r0, #20
 80070ce:	3114      	adds	r1, #20
 80070d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070e0:	42a5      	cmp	r5, r4
 80070e2:	d003      	beq.n	80070ec <__mcmp+0x2c>
 80070e4:	d305      	bcc.n	80070f2 <__mcmp+0x32>
 80070e6:	2201      	movs	r2, #1
 80070e8:	4610      	mov	r0, r2
 80070ea:	bd30      	pop	{r4, r5, pc}
 80070ec:	4283      	cmp	r3, r0
 80070ee:	d3f3      	bcc.n	80070d8 <__mcmp+0x18>
 80070f0:	e7fa      	b.n	80070e8 <__mcmp+0x28>
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295
 80070f6:	e7f7      	b.n	80070e8 <__mcmp+0x28>

080070f8 <__mdiff>:
 80070f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	460c      	mov	r4, r1
 80070fe:	4606      	mov	r6, r0
 8007100:	4611      	mov	r1, r2
 8007102:	4620      	mov	r0, r4
 8007104:	4690      	mov	r8, r2
 8007106:	f7ff ffdb 	bl	80070c0 <__mcmp>
 800710a:	1e05      	subs	r5, r0, #0
 800710c:	d110      	bne.n	8007130 <__mdiff+0x38>
 800710e:	4629      	mov	r1, r5
 8007110:	4630      	mov	r0, r6
 8007112:	f7ff fd53 	bl	8006bbc <_Balloc>
 8007116:	b930      	cbnz	r0, 8007126 <__mdiff+0x2e>
 8007118:	4b3a      	ldr	r3, [pc, #232]	; (8007204 <__mdiff+0x10c>)
 800711a:	4602      	mov	r2, r0
 800711c:	f240 2132 	movw	r1, #562	; 0x232
 8007120:	4839      	ldr	r0, [pc, #228]	; (8007208 <__mdiff+0x110>)
 8007122:	f000 fc1f 	bl	8007964 <__assert_func>
 8007126:	2301      	movs	r3, #1
 8007128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800712c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	bfa4      	itt	ge
 8007132:	4643      	movge	r3, r8
 8007134:	46a0      	movge	r8, r4
 8007136:	4630      	mov	r0, r6
 8007138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800713c:	bfa6      	itte	ge
 800713e:	461c      	movge	r4, r3
 8007140:	2500      	movge	r5, #0
 8007142:	2501      	movlt	r5, #1
 8007144:	f7ff fd3a 	bl	8006bbc <_Balloc>
 8007148:	b920      	cbnz	r0, 8007154 <__mdiff+0x5c>
 800714a:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <__mdiff+0x10c>)
 800714c:	4602      	mov	r2, r0
 800714e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007152:	e7e5      	b.n	8007120 <__mdiff+0x28>
 8007154:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007158:	6926      	ldr	r6, [r4, #16]
 800715a:	60c5      	str	r5, [r0, #12]
 800715c:	f104 0914 	add.w	r9, r4, #20
 8007160:	f108 0514 	add.w	r5, r8, #20
 8007164:	f100 0e14 	add.w	lr, r0, #20
 8007168:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800716c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007170:	f108 0210 	add.w	r2, r8, #16
 8007174:	46f2      	mov	sl, lr
 8007176:	2100      	movs	r1, #0
 8007178:	f859 3b04 	ldr.w	r3, [r9], #4
 800717c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007180:	fa1f f883 	uxth.w	r8, r3
 8007184:	fa11 f18b 	uxtah	r1, r1, fp
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	eba1 0808 	sub.w	r8, r1, r8
 800718e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007192:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007196:	fa1f f888 	uxth.w	r8, r8
 800719a:	1419      	asrs	r1, r3, #16
 800719c:	454e      	cmp	r6, r9
 800719e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071a2:	f84a 3b04 	str.w	r3, [sl], #4
 80071a6:	d8e7      	bhi.n	8007178 <__mdiff+0x80>
 80071a8:	1b33      	subs	r3, r6, r4
 80071aa:	3b15      	subs	r3, #21
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	3304      	adds	r3, #4
 80071b2:	3415      	adds	r4, #21
 80071b4:	42a6      	cmp	r6, r4
 80071b6:	bf38      	it	cc
 80071b8:	2304      	movcc	r3, #4
 80071ba:	441d      	add	r5, r3
 80071bc:	4473      	add	r3, lr
 80071be:	469e      	mov	lr, r3
 80071c0:	462e      	mov	r6, r5
 80071c2:	4566      	cmp	r6, ip
 80071c4:	d30e      	bcc.n	80071e4 <__mdiff+0xec>
 80071c6:	f10c 0203 	add.w	r2, ip, #3
 80071ca:	1b52      	subs	r2, r2, r5
 80071cc:	f022 0203 	bic.w	r2, r2, #3
 80071d0:	3d03      	subs	r5, #3
 80071d2:	45ac      	cmp	ip, r5
 80071d4:	bf38      	it	cc
 80071d6:	2200      	movcc	r2, #0
 80071d8:	441a      	add	r2, r3
 80071da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071de:	b17b      	cbz	r3, 8007200 <__mdiff+0x108>
 80071e0:	6107      	str	r7, [r0, #16]
 80071e2:	e7a3      	b.n	800712c <__mdiff+0x34>
 80071e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80071e8:	fa11 f288 	uxtah	r2, r1, r8
 80071ec:	1414      	asrs	r4, r2, #16
 80071ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071f2:	b292      	uxth	r2, r2
 80071f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071f8:	f84e 2b04 	str.w	r2, [lr], #4
 80071fc:	1421      	asrs	r1, r4, #16
 80071fe:	e7e0      	b.n	80071c2 <__mdiff+0xca>
 8007200:	3f01      	subs	r7, #1
 8007202:	e7ea      	b.n	80071da <__mdiff+0xe2>
 8007204:	08011fbf 	.word	0x08011fbf
 8007208:	08012030 	.word	0x08012030

0800720c <__d2b>:
 800720c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007210:	4689      	mov	r9, r1
 8007212:	2101      	movs	r1, #1
 8007214:	ec57 6b10 	vmov	r6, r7, d0
 8007218:	4690      	mov	r8, r2
 800721a:	f7ff fccf 	bl	8006bbc <_Balloc>
 800721e:	4604      	mov	r4, r0
 8007220:	b930      	cbnz	r0, 8007230 <__d2b+0x24>
 8007222:	4602      	mov	r2, r0
 8007224:	4b25      	ldr	r3, [pc, #148]	; (80072bc <__d2b+0xb0>)
 8007226:	4826      	ldr	r0, [pc, #152]	; (80072c0 <__d2b+0xb4>)
 8007228:	f240 310a 	movw	r1, #778	; 0x30a
 800722c:	f000 fb9a 	bl	8007964 <__assert_func>
 8007230:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007234:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007238:	bb35      	cbnz	r5, 8007288 <__d2b+0x7c>
 800723a:	2e00      	cmp	r6, #0
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	d028      	beq.n	8007292 <__d2b+0x86>
 8007240:	4668      	mov	r0, sp
 8007242:	9600      	str	r6, [sp, #0]
 8007244:	f7ff fd82 	bl	8006d4c <__lo0bits>
 8007248:	9900      	ldr	r1, [sp, #0]
 800724a:	b300      	cbz	r0, 800728e <__d2b+0x82>
 800724c:	9a01      	ldr	r2, [sp, #4]
 800724e:	f1c0 0320 	rsb	r3, r0, #32
 8007252:	fa02 f303 	lsl.w	r3, r2, r3
 8007256:	430b      	orrs	r3, r1
 8007258:	40c2      	lsrs	r2, r0
 800725a:	6163      	str	r3, [r4, #20]
 800725c:	9201      	str	r2, [sp, #4]
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	61a3      	str	r3, [r4, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	bf14      	ite	ne
 8007266:	2202      	movne	r2, #2
 8007268:	2201      	moveq	r2, #1
 800726a:	6122      	str	r2, [r4, #16]
 800726c:	b1d5      	cbz	r5, 80072a4 <__d2b+0x98>
 800726e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007272:	4405      	add	r5, r0
 8007274:	f8c9 5000 	str.w	r5, [r9]
 8007278:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800727c:	f8c8 0000 	str.w	r0, [r8]
 8007280:	4620      	mov	r0, r4
 8007282:	b003      	add	sp, #12
 8007284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800728c:	e7d5      	b.n	800723a <__d2b+0x2e>
 800728e:	6161      	str	r1, [r4, #20]
 8007290:	e7e5      	b.n	800725e <__d2b+0x52>
 8007292:	a801      	add	r0, sp, #4
 8007294:	f7ff fd5a 	bl	8006d4c <__lo0bits>
 8007298:	9b01      	ldr	r3, [sp, #4]
 800729a:	6163      	str	r3, [r4, #20]
 800729c:	2201      	movs	r2, #1
 800729e:	6122      	str	r2, [r4, #16]
 80072a0:	3020      	adds	r0, #32
 80072a2:	e7e3      	b.n	800726c <__d2b+0x60>
 80072a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072ac:	f8c9 0000 	str.w	r0, [r9]
 80072b0:	6918      	ldr	r0, [r3, #16]
 80072b2:	f7ff fd2b 	bl	8006d0c <__hi0bits>
 80072b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072ba:	e7df      	b.n	800727c <__d2b+0x70>
 80072bc:	08011fbf 	.word	0x08011fbf
 80072c0:	08012030 	.word	0x08012030

080072c4 <_calloc_r>:
 80072c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072c6:	fba1 2402 	umull	r2, r4, r1, r2
 80072ca:	b94c      	cbnz	r4, 80072e0 <_calloc_r+0x1c>
 80072cc:	4611      	mov	r1, r2
 80072ce:	9201      	str	r2, [sp, #4]
 80072d0:	f7fd fd64 	bl	8004d9c <_malloc_r>
 80072d4:	9a01      	ldr	r2, [sp, #4]
 80072d6:	4605      	mov	r5, r0
 80072d8:	b930      	cbnz	r0, 80072e8 <_calloc_r+0x24>
 80072da:	4628      	mov	r0, r5
 80072dc:	b003      	add	sp, #12
 80072de:	bd30      	pop	{r4, r5, pc}
 80072e0:	220c      	movs	r2, #12
 80072e2:	6002      	str	r2, [r0, #0]
 80072e4:	2500      	movs	r5, #0
 80072e6:	e7f8      	b.n	80072da <_calloc_r+0x16>
 80072e8:	4621      	mov	r1, r4
 80072ea:	f7fd fce3 	bl	8004cb4 <memset>
 80072ee:	e7f4      	b.n	80072da <_calloc_r+0x16>

080072f0 <_realloc_r>:
 80072f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f4:	4680      	mov	r8, r0
 80072f6:	4614      	mov	r4, r2
 80072f8:	460e      	mov	r6, r1
 80072fa:	b921      	cbnz	r1, 8007306 <_realloc_r+0x16>
 80072fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007300:	4611      	mov	r1, r2
 8007302:	f7fd bd4b 	b.w	8004d9c <_malloc_r>
 8007306:	b92a      	cbnz	r2, 8007314 <_realloc_r+0x24>
 8007308:	f7fd fcdc 	bl	8004cc4 <_free_r>
 800730c:	4625      	mov	r5, r4
 800730e:	4628      	mov	r0, r5
 8007310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007314:	f000 fbc6 	bl	8007aa4 <_malloc_usable_size_r>
 8007318:	4284      	cmp	r4, r0
 800731a:	4607      	mov	r7, r0
 800731c:	d802      	bhi.n	8007324 <_realloc_r+0x34>
 800731e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007322:	d812      	bhi.n	800734a <_realloc_r+0x5a>
 8007324:	4621      	mov	r1, r4
 8007326:	4640      	mov	r0, r8
 8007328:	f7fd fd38 	bl	8004d9c <_malloc_r>
 800732c:	4605      	mov	r5, r0
 800732e:	2800      	cmp	r0, #0
 8007330:	d0ed      	beq.n	800730e <_realloc_r+0x1e>
 8007332:	42bc      	cmp	r4, r7
 8007334:	4622      	mov	r2, r4
 8007336:	4631      	mov	r1, r6
 8007338:	bf28      	it	cs
 800733a:	463a      	movcs	r2, r7
 800733c:	f7fd fcac 	bl	8004c98 <memcpy>
 8007340:	4631      	mov	r1, r6
 8007342:	4640      	mov	r0, r8
 8007344:	f7fd fcbe 	bl	8004cc4 <_free_r>
 8007348:	e7e1      	b.n	800730e <_realloc_r+0x1e>
 800734a:	4635      	mov	r5, r6
 800734c:	e7df      	b.n	800730e <_realloc_r+0x1e>

0800734e <__ssputs_r>:
 800734e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007352:	688e      	ldr	r6, [r1, #8]
 8007354:	429e      	cmp	r6, r3
 8007356:	4682      	mov	sl, r0
 8007358:	460c      	mov	r4, r1
 800735a:	4690      	mov	r8, r2
 800735c:	461f      	mov	r7, r3
 800735e:	d838      	bhi.n	80073d2 <__ssputs_r+0x84>
 8007360:	898a      	ldrh	r2, [r1, #12]
 8007362:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007366:	d032      	beq.n	80073ce <__ssputs_r+0x80>
 8007368:	6825      	ldr	r5, [r4, #0]
 800736a:	6909      	ldr	r1, [r1, #16]
 800736c:	eba5 0901 	sub.w	r9, r5, r1
 8007370:	6965      	ldr	r5, [r4, #20]
 8007372:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800737a:	3301      	adds	r3, #1
 800737c:	444b      	add	r3, r9
 800737e:	106d      	asrs	r5, r5, #1
 8007380:	429d      	cmp	r5, r3
 8007382:	bf38      	it	cc
 8007384:	461d      	movcc	r5, r3
 8007386:	0553      	lsls	r3, r2, #21
 8007388:	d531      	bpl.n	80073ee <__ssputs_r+0xa0>
 800738a:	4629      	mov	r1, r5
 800738c:	f7fd fd06 	bl	8004d9c <_malloc_r>
 8007390:	4606      	mov	r6, r0
 8007392:	b950      	cbnz	r0, 80073aa <__ssputs_r+0x5c>
 8007394:	230c      	movs	r3, #12
 8007396:	f8ca 3000 	str.w	r3, [sl]
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	f04f 30ff 	mov.w	r0, #4294967295
 80073a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073aa:	6921      	ldr	r1, [r4, #16]
 80073ac:	464a      	mov	r2, r9
 80073ae:	f7fd fc73 	bl	8004c98 <memcpy>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	6126      	str	r6, [r4, #16]
 80073c0:	6165      	str	r5, [r4, #20]
 80073c2:	444e      	add	r6, r9
 80073c4:	eba5 0509 	sub.w	r5, r5, r9
 80073c8:	6026      	str	r6, [r4, #0]
 80073ca:	60a5      	str	r5, [r4, #8]
 80073cc:	463e      	mov	r6, r7
 80073ce:	42be      	cmp	r6, r7
 80073d0:	d900      	bls.n	80073d4 <__ssputs_r+0x86>
 80073d2:	463e      	mov	r6, r7
 80073d4:	6820      	ldr	r0, [r4, #0]
 80073d6:	4632      	mov	r2, r6
 80073d8:	4641      	mov	r1, r8
 80073da:	f000 fb49 	bl	8007a70 <memmove>
 80073de:	68a3      	ldr	r3, [r4, #8]
 80073e0:	1b9b      	subs	r3, r3, r6
 80073e2:	60a3      	str	r3, [r4, #8]
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	4433      	add	r3, r6
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	2000      	movs	r0, #0
 80073ec:	e7db      	b.n	80073a6 <__ssputs_r+0x58>
 80073ee:	462a      	mov	r2, r5
 80073f0:	f7ff ff7e 	bl	80072f0 <_realloc_r>
 80073f4:	4606      	mov	r6, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d1e1      	bne.n	80073be <__ssputs_r+0x70>
 80073fa:	6921      	ldr	r1, [r4, #16]
 80073fc:	4650      	mov	r0, sl
 80073fe:	f7fd fc61 	bl	8004cc4 <_free_r>
 8007402:	e7c7      	b.n	8007394 <__ssputs_r+0x46>

08007404 <_svfiprintf_r>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	4698      	mov	r8, r3
 800740a:	898b      	ldrh	r3, [r1, #12]
 800740c:	061b      	lsls	r3, r3, #24
 800740e:	b09d      	sub	sp, #116	; 0x74
 8007410:	4607      	mov	r7, r0
 8007412:	460d      	mov	r5, r1
 8007414:	4614      	mov	r4, r2
 8007416:	d50e      	bpl.n	8007436 <_svfiprintf_r+0x32>
 8007418:	690b      	ldr	r3, [r1, #16]
 800741a:	b963      	cbnz	r3, 8007436 <_svfiprintf_r+0x32>
 800741c:	2140      	movs	r1, #64	; 0x40
 800741e:	f7fd fcbd 	bl	8004d9c <_malloc_r>
 8007422:	6028      	str	r0, [r5, #0]
 8007424:	6128      	str	r0, [r5, #16]
 8007426:	b920      	cbnz	r0, 8007432 <_svfiprintf_r+0x2e>
 8007428:	230c      	movs	r3, #12
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	e0d1      	b.n	80075d6 <_svfiprintf_r+0x1d2>
 8007432:	2340      	movs	r3, #64	; 0x40
 8007434:	616b      	str	r3, [r5, #20]
 8007436:	2300      	movs	r3, #0
 8007438:	9309      	str	r3, [sp, #36]	; 0x24
 800743a:	2320      	movs	r3, #32
 800743c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007440:	f8cd 800c 	str.w	r8, [sp, #12]
 8007444:	2330      	movs	r3, #48	; 0x30
 8007446:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075f0 <_svfiprintf_r+0x1ec>
 800744a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800744e:	f04f 0901 	mov.w	r9, #1
 8007452:	4623      	mov	r3, r4
 8007454:	469a      	mov	sl, r3
 8007456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800745a:	b10a      	cbz	r2, 8007460 <_svfiprintf_r+0x5c>
 800745c:	2a25      	cmp	r2, #37	; 0x25
 800745e:	d1f9      	bne.n	8007454 <_svfiprintf_r+0x50>
 8007460:	ebba 0b04 	subs.w	fp, sl, r4
 8007464:	d00b      	beq.n	800747e <_svfiprintf_r+0x7a>
 8007466:	465b      	mov	r3, fp
 8007468:	4622      	mov	r2, r4
 800746a:	4629      	mov	r1, r5
 800746c:	4638      	mov	r0, r7
 800746e:	f7ff ff6e 	bl	800734e <__ssputs_r>
 8007472:	3001      	adds	r0, #1
 8007474:	f000 80aa 	beq.w	80075cc <_svfiprintf_r+0x1c8>
 8007478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800747a:	445a      	add	r2, fp
 800747c:	9209      	str	r2, [sp, #36]	; 0x24
 800747e:	f89a 3000 	ldrb.w	r3, [sl]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 80a2 	beq.w	80075cc <_svfiprintf_r+0x1c8>
 8007488:	2300      	movs	r3, #0
 800748a:	f04f 32ff 	mov.w	r2, #4294967295
 800748e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007492:	f10a 0a01 	add.w	sl, sl, #1
 8007496:	9304      	str	r3, [sp, #16]
 8007498:	9307      	str	r3, [sp, #28]
 800749a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800749e:	931a      	str	r3, [sp, #104]	; 0x68
 80074a0:	4654      	mov	r4, sl
 80074a2:	2205      	movs	r2, #5
 80074a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a8:	4851      	ldr	r0, [pc, #324]	; (80075f0 <_svfiprintf_r+0x1ec>)
 80074aa:	f7f8 fe99 	bl	80001e0 <memchr>
 80074ae:	9a04      	ldr	r2, [sp, #16]
 80074b0:	b9d8      	cbnz	r0, 80074ea <_svfiprintf_r+0xe6>
 80074b2:	06d0      	lsls	r0, r2, #27
 80074b4:	bf44      	itt	mi
 80074b6:	2320      	movmi	r3, #32
 80074b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074bc:	0711      	lsls	r1, r2, #28
 80074be:	bf44      	itt	mi
 80074c0:	232b      	movmi	r3, #43	; 0x2b
 80074c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c6:	f89a 3000 	ldrb.w	r3, [sl]
 80074ca:	2b2a      	cmp	r3, #42	; 0x2a
 80074cc:	d015      	beq.n	80074fa <_svfiprintf_r+0xf6>
 80074ce:	9a07      	ldr	r2, [sp, #28]
 80074d0:	4654      	mov	r4, sl
 80074d2:	2000      	movs	r0, #0
 80074d4:	f04f 0c0a 	mov.w	ip, #10
 80074d8:	4621      	mov	r1, r4
 80074da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074de:	3b30      	subs	r3, #48	; 0x30
 80074e0:	2b09      	cmp	r3, #9
 80074e2:	d94e      	bls.n	8007582 <_svfiprintf_r+0x17e>
 80074e4:	b1b0      	cbz	r0, 8007514 <_svfiprintf_r+0x110>
 80074e6:	9207      	str	r2, [sp, #28]
 80074e8:	e014      	b.n	8007514 <_svfiprintf_r+0x110>
 80074ea:	eba0 0308 	sub.w	r3, r0, r8
 80074ee:	fa09 f303 	lsl.w	r3, r9, r3
 80074f2:	4313      	orrs	r3, r2
 80074f4:	9304      	str	r3, [sp, #16]
 80074f6:	46a2      	mov	sl, r4
 80074f8:	e7d2      	b.n	80074a0 <_svfiprintf_r+0x9c>
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	1d19      	adds	r1, r3, #4
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	9103      	str	r1, [sp, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	bfbb      	ittet	lt
 8007506:	425b      	neglt	r3, r3
 8007508:	f042 0202 	orrlt.w	r2, r2, #2
 800750c:	9307      	strge	r3, [sp, #28]
 800750e:	9307      	strlt	r3, [sp, #28]
 8007510:	bfb8      	it	lt
 8007512:	9204      	strlt	r2, [sp, #16]
 8007514:	7823      	ldrb	r3, [r4, #0]
 8007516:	2b2e      	cmp	r3, #46	; 0x2e
 8007518:	d10c      	bne.n	8007534 <_svfiprintf_r+0x130>
 800751a:	7863      	ldrb	r3, [r4, #1]
 800751c:	2b2a      	cmp	r3, #42	; 0x2a
 800751e:	d135      	bne.n	800758c <_svfiprintf_r+0x188>
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	1d1a      	adds	r2, r3, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	9203      	str	r2, [sp, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	bfb8      	it	lt
 800752c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007530:	3402      	adds	r4, #2
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007600 <_svfiprintf_r+0x1fc>
 8007538:	7821      	ldrb	r1, [r4, #0]
 800753a:	2203      	movs	r2, #3
 800753c:	4650      	mov	r0, sl
 800753e:	f7f8 fe4f 	bl	80001e0 <memchr>
 8007542:	b140      	cbz	r0, 8007556 <_svfiprintf_r+0x152>
 8007544:	2340      	movs	r3, #64	; 0x40
 8007546:	eba0 000a 	sub.w	r0, r0, sl
 800754a:	fa03 f000 	lsl.w	r0, r3, r0
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	4303      	orrs	r3, r0
 8007552:	3401      	adds	r4, #1
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755a:	4826      	ldr	r0, [pc, #152]	; (80075f4 <_svfiprintf_r+0x1f0>)
 800755c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007560:	2206      	movs	r2, #6
 8007562:	f7f8 fe3d 	bl	80001e0 <memchr>
 8007566:	2800      	cmp	r0, #0
 8007568:	d038      	beq.n	80075dc <_svfiprintf_r+0x1d8>
 800756a:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <_svfiprintf_r+0x1f4>)
 800756c:	bb1b      	cbnz	r3, 80075b6 <_svfiprintf_r+0x1b2>
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	3307      	adds	r3, #7
 8007572:	f023 0307 	bic.w	r3, r3, #7
 8007576:	3308      	adds	r3, #8
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757c:	4433      	add	r3, r6
 800757e:	9309      	str	r3, [sp, #36]	; 0x24
 8007580:	e767      	b.n	8007452 <_svfiprintf_r+0x4e>
 8007582:	fb0c 3202 	mla	r2, ip, r2, r3
 8007586:	460c      	mov	r4, r1
 8007588:	2001      	movs	r0, #1
 800758a:	e7a5      	b.n	80074d8 <_svfiprintf_r+0xd4>
 800758c:	2300      	movs	r3, #0
 800758e:	3401      	adds	r4, #1
 8007590:	9305      	str	r3, [sp, #20]
 8007592:	4619      	mov	r1, r3
 8007594:	f04f 0c0a 	mov.w	ip, #10
 8007598:	4620      	mov	r0, r4
 800759a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800759e:	3a30      	subs	r2, #48	; 0x30
 80075a0:	2a09      	cmp	r2, #9
 80075a2:	d903      	bls.n	80075ac <_svfiprintf_r+0x1a8>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0c5      	beq.n	8007534 <_svfiprintf_r+0x130>
 80075a8:	9105      	str	r1, [sp, #20]
 80075aa:	e7c3      	b.n	8007534 <_svfiprintf_r+0x130>
 80075ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b0:	4604      	mov	r4, r0
 80075b2:	2301      	movs	r3, #1
 80075b4:	e7f0      	b.n	8007598 <_svfiprintf_r+0x194>
 80075b6:	ab03      	add	r3, sp, #12
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	462a      	mov	r2, r5
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <_svfiprintf_r+0x1f8>)
 80075be:	a904      	add	r1, sp, #16
 80075c0:	4638      	mov	r0, r7
 80075c2:	f7fd fcff 	bl	8004fc4 <_printf_float>
 80075c6:	1c42      	adds	r2, r0, #1
 80075c8:	4606      	mov	r6, r0
 80075ca:	d1d6      	bne.n	800757a <_svfiprintf_r+0x176>
 80075cc:	89ab      	ldrh	r3, [r5, #12]
 80075ce:	065b      	lsls	r3, r3, #25
 80075d0:	f53f af2c 	bmi.w	800742c <_svfiprintf_r+0x28>
 80075d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075d6:	b01d      	add	sp, #116	; 0x74
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	462a      	mov	r2, r5
 80075e2:	4b06      	ldr	r3, [pc, #24]	; (80075fc <_svfiprintf_r+0x1f8>)
 80075e4:	a904      	add	r1, sp, #16
 80075e6:	4638      	mov	r0, r7
 80075e8:	f7fd ff90 	bl	800550c <_printf_i>
 80075ec:	e7eb      	b.n	80075c6 <_svfiprintf_r+0x1c2>
 80075ee:	bf00      	nop
 80075f0:	0801218c 	.word	0x0801218c
 80075f4:	08012196 	.word	0x08012196
 80075f8:	08004fc5 	.word	0x08004fc5
 80075fc:	0800734f 	.word	0x0800734f
 8007600:	08012192 	.word	0x08012192

08007604 <__sfputc_r>:
 8007604:	6893      	ldr	r3, [r2, #8]
 8007606:	3b01      	subs	r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	b410      	push	{r4}
 800760c:	6093      	str	r3, [r2, #8]
 800760e:	da08      	bge.n	8007622 <__sfputc_r+0x1e>
 8007610:	6994      	ldr	r4, [r2, #24]
 8007612:	42a3      	cmp	r3, r4
 8007614:	db01      	blt.n	800761a <__sfputc_r+0x16>
 8007616:	290a      	cmp	r1, #10
 8007618:	d103      	bne.n	8007622 <__sfputc_r+0x1e>
 800761a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800761e:	f7fe b961 	b.w	80058e4 <__swbuf_r>
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	1c58      	adds	r0, r3, #1
 8007626:	6010      	str	r0, [r2, #0]
 8007628:	7019      	strb	r1, [r3, #0]
 800762a:	4608      	mov	r0, r1
 800762c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007630:	4770      	bx	lr

08007632 <__sfputs_r>:
 8007632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007634:	4606      	mov	r6, r0
 8007636:	460f      	mov	r7, r1
 8007638:	4614      	mov	r4, r2
 800763a:	18d5      	adds	r5, r2, r3
 800763c:	42ac      	cmp	r4, r5
 800763e:	d101      	bne.n	8007644 <__sfputs_r+0x12>
 8007640:	2000      	movs	r0, #0
 8007642:	e007      	b.n	8007654 <__sfputs_r+0x22>
 8007644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007648:	463a      	mov	r2, r7
 800764a:	4630      	mov	r0, r6
 800764c:	f7ff ffda 	bl	8007604 <__sfputc_r>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d1f3      	bne.n	800763c <__sfputs_r+0xa>
 8007654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007658 <_vfiprintf_r>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460d      	mov	r5, r1
 800765e:	b09d      	sub	sp, #116	; 0x74
 8007660:	4614      	mov	r4, r2
 8007662:	4698      	mov	r8, r3
 8007664:	4606      	mov	r6, r0
 8007666:	b118      	cbz	r0, 8007670 <_vfiprintf_r+0x18>
 8007668:	6983      	ldr	r3, [r0, #24]
 800766a:	b90b      	cbnz	r3, 8007670 <_vfiprintf_r+0x18>
 800766c:	f7ff f990 	bl	8006990 <__sinit>
 8007670:	4b89      	ldr	r3, [pc, #548]	; (8007898 <_vfiprintf_r+0x240>)
 8007672:	429d      	cmp	r5, r3
 8007674:	d11b      	bne.n	80076ae <_vfiprintf_r+0x56>
 8007676:	6875      	ldr	r5, [r6, #4]
 8007678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800767a:	07d9      	lsls	r1, r3, #31
 800767c:	d405      	bmi.n	800768a <_vfiprintf_r+0x32>
 800767e:	89ab      	ldrh	r3, [r5, #12]
 8007680:	059a      	lsls	r2, r3, #22
 8007682:	d402      	bmi.n	800768a <_vfiprintf_r+0x32>
 8007684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007686:	f7ff fa26 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 800768a:	89ab      	ldrh	r3, [r5, #12]
 800768c:	071b      	lsls	r3, r3, #28
 800768e:	d501      	bpl.n	8007694 <_vfiprintf_r+0x3c>
 8007690:	692b      	ldr	r3, [r5, #16]
 8007692:	b9eb      	cbnz	r3, 80076d0 <_vfiprintf_r+0x78>
 8007694:	4629      	mov	r1, r5
 8007696:	4630      	mov	r0, r6
 8007698:	f7fe f976 	bl	8005988 <__swsetup_r>
 800769c:	b1c0      	cbz	r0, 80076d0 <_vfiprintf_r+0x78>
 800769e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076a0:	07dc      	lsls	r4, r3, #31
 80076a2:	d50e      	bpl.n	80076c2 <_vfiprintf_r+0x6a>
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	b01d      	add	sp, #116	; 0x74
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	4b7b      	ldr	r3, [pc, #492]	; (800789c <_vfiprintf_r+0x244>)
 80076b0:	429d      	cmp	r5, r3
 80076b2:	d101      	bne.n	80076b8 <_vfiprintf_r+0x60>
 80076b4:	68b5      	ldr	r5, [r6, #8]
 80076b6:	e7df      	b.n	8007678 <_vfiprintf_r+0x20>
 80076b8:	4b79      	ldr	r3, [pc, #484]	; (80078a0 <_vfiprintf_r+0x248>)
 80076ba:	429d      	cmp	r5, r3
 80076bc:	bf08      	it	eq
 80076be:	68f5      	ldreq	r5, [r6, #12]
 80076c0:	e7da      	b.n	8007678 <_vfiprintf_r+0x20>
 80076c2:	89ab      	ldrh	r3, [r5, #12]
 80076c4:	0598      	lsls	r0, r3, #22
 80076c6:	d4ed      	bmi.n	80076a4 <_vfiprintf_r+0x4c>
 80076c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ca:	f7ff fa05 	bl	8006ad8 <__retarget_lock_release_recursive>
 80076ce:	e7e9      	b.n	80076a4 <_vfiprintf_r+0x4c>
 80076d0:	2300      	movs	r3, #0
 80076d2:	9309      	str	r3, [sp, #36]	; 0x24
 80076d4:	2320      	movs	r3, #32
 80076d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076da:	f8cd 800c 	str.w	r8, [sp, #12]
 80076de:	2330      	movs	r3, #48	; 0x30
 80076e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078a4 <_vfiprintf_r+0x24c>
 80076e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076e8:	f04f 0901 	mov.w	r9, #1
 80076ec:	4623      	mov	r3, r4
 80076ee:	469a      	mov	sl, r3
 80076f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076f4:	b10a      	cbz	r2, 80076fa <_vfiprintf_r+0xa2>
 80076f6:	2a25      	cmp	r2, #37	; 0x25
 80076f8:	d1f9      	bne.n	80076ee <_vfiprintf_r+0x96>
 80076fa:	ebba 0b04 	subs.w	fp, sl, r4
 80076fe:	d00b      	beq.n	8007718 <_vfiprintf_r+0xc0>
 8007700:	465b      	mov	r3, fp
 8007702:	4622      	mov	r2, r4
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f7ff ff93 	bl	8007632 <__sfputs_r>
 800770c:	3001      	adds	r0, #1
 800770e:	f000 80aa 	beq.w	8007866 <_vfiprintf_r+0x20e>
 8007712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007714:	445a      	add	r2, fp
 8007716:	9209      	str	r2, [sp, #36]	; 0x24
 8007718:	f89a 3000 	ldrb.w	r3, [sl]
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80a2 	beq.w	8007866 <_vfiprintf_r+0x20e>
 8007722:	2300      	movs	r3, #0
 8007724:	f04f 32ff 	mov.w	r2, #4294967295
 8007728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800772c:	f10a 0a01 	add.w	sl, sl, #1
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	9307      	str	r3, [sp, #28]
 8007734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007738:	931a      	str	r3, [sp, #104]	; 0x68
 800773a:	4654      	mov	r4, sl
 800773c:	2205      	movs	r2, #5
 800773e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007742:	4858      	ldr	r0, [pc, #352]	; (80078a4 <_vfiprintf_r+0x24c>)
 8007744:	f7f8 fd4c 	bl	80001e0 <memchr>
 8007748:	9a04      	ldr	r2, [sp, #16]
 800774a:	b9d8      	cbnz	r0, 8007784 <_vfiprintf_r+0x12c>
 800774c:	06d1      	lsls	r1, r2, #27
 800774e:	bf44      	itt	mi
 8007750:	2320      	movmi	r3, #32
 8007752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007756:	0713      	lsls	r3, r2, #28
 8007758:	bf44      	itt	mi
 800775a:	232b      	movmi	r3, #43	; 0x2b
 800775c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007760:	f89a 3000 	ldrb.w	r3, [sl]
 8007764:	2b2a      	cmp	r3, #42	; 0x2a
 8007766:	d015      	beq.n	8007794 <_vfiprintf_r+0x13c>
 8007768:	9a07      	ldr	r2, [sp, #28]
 800776a:	4654      	mov	r4, sl
 800776c:	2000      	movs	r0, #0
 800776e:	f04f 0c0a 	mov.w	ip, #10
 8007772:	4621      	mov	r1, r4
 8007774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007778:	3b30      	subs	r3, #48	; 0x30
 800777a:	2b09      	cmp	r3, #9
 800777c:	d94e      	bls.n	800781c <_vfiprintf_r+0x1c4>
 800777e:	b1b0      	cbz	r0, 80077ae <_vfiprintf_r+0x156>
 8007780:	9207      	str	r2, [sp, #28]
 8007782:	e014      	b.n	80077ae <_vfiprintf_r+0x156>
 8007784:	eba0 0308 	sub.w	r3, r0, r8
 8007788:	fa09 f303 	lsl.w	r3, r9, r3
 800778c:	4313      	orrs	r3, r2
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	46a2      	mov	sl, r4
 8007792:	e7d2      	b.n	800773a <_vfiprintf_r+0xe2>
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	1d19      	adds	r1, r3, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	9103      	str	r1, [sp, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	bfbb      	ittet	lt
 80077a0:	425b      	neglt	r3, r3
 80077a2:	f042 0202 	orrlt.w	r2, r2, #2
 80077a6:	9307      	strge	r3, [sp, #28]
 80077a8:	9307      	strlt	r3, [sp, #28]
 80077aa:	bfb8      	it	lt
 80077ac:	9204      	strlt	r2, [sp, #16]
 80077ae:	7823      	ldrb	r3, [r4, #0]
 80077b0:	2b2e      	cmp	r3, #46	; 0x2e
 80077b2:	d10c      	bne.n	80077ce <_vfiprintf_r+0x176>
 80077b4:	7863      	ldrb	r3, [r4, #1]
 80077b6:	2b2a      	cmp	r3, #42	; 0x2a
 80077b8:	d135      	bne.n	8007826 <_vfiprintf_r+0x1ce>
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	1d1a      	adds	r2, r3, #4
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	9203      	str	r2, [sp, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfb8      	it	lt
 80077c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80077ca:	3402      	adds	r4, #2
 80077cc:	9305      	str	r3, [sp, #20]
 80077ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078b4 <_vfiprintf_r+0x25c>
 80077d2:	7821      	ldrb	r1, [r4, #0]
 80077d4:	2203      	movs	r2, #3
 80077d6:	4650      	mov	r0, sl
 80077d8:	f7f8 fd02 	bl	80001e0 <memchr>
 80077dc:	b140      	cbz	r0, 80077f0 <_vfiprintf_r+0x198>
 80077de:	2340      	movs	r3, #64	; 0x40
 80077e0:	eba0 000a 	sub.w	r0, r0, sl
 80077e4:	fa03 f000 	lsl.w	r0, r3, r0
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	4303      	orrs	r3, r0
 80077ec:	3401      	adds	r4, #1
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f4:	482c      	ldr	r0, [pc, #176]	; (80078a8 <_vfiprintf_r+0x250>)
 80077f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077fa:	2206      	movs	r2, #6
 80077fc:	f7f8 fcf0 	bl	80001e0 <memchr>
 8007800:	2800      	cmp	r0, #0
 8007802:	d03f      	beq.n	8007884 <_vfiprintf_r+0x22c>
 8007804:	4b29      	ldr	r3, [pc, #164]	; (80078ac <_vfiprintf_r+0x254>)
 8007806:	bb1b      	cbnz	r3, 8007850 <_vfiprintf_r+0x1f8>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	3307      	adds	r3, #7
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	3308      	adds	r3, #8
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007816:	443b      	add	r3, r7
 8007818:	9309      	str	r3, [sp, #36]	; 0x24
 800781a:	e767      	b.n	80076ec <_vfiprintf_r+0x94>
 800781c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007820:	460c      	mov	r4, r1
 8007822:	2001      	movs	r0, #1
 8007824:	e7a5      	b.n	8007772 <_vfiprintf_r+0x11a>
 8007826:	2300      	movs	r3, #0
 8007828:	3401      	adds	r4, #1
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	4619      	mov	r1, r3
 800782e:	f04f 0c0a 	mov.w	ip, #10
 8007832:	4620      	mov	r0, r4
 8007834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007838:	3a30      	subs	r2, #48	; 0x30
 800783a:	2a09      	cmp	r2, #9
 800783c:	d903      	bls.n	8007846 <_vfiprintf_r+0x1ee>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0c5      	beq.n	80077ce <_vfiprintf_r+0x176>
 8007842:	9105      	str	r1, [sp, #20]
 8007844:	e7c3      	b.n	80077ce <_vfiprintf_r+0x176>
 8007846:	fb0c 2101 	mla	r1, ip, r1, r2
 800784a:	4604      	mov	r4, r0
 800784c:	2301      	movs	r3, #1
 800784e:	e7f0      	b.n	8007832 <_vfiprintf_r+0x1da>
 8007850:	ab03      	add	r3, sp, #12
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462a      	mov	r2, r5
 8007856:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <_vfiprintf_r+0x258>)
 8007858:	a904      	add	r1, sp, #16
 800785a:	4630      	mov	r0, r6
 800785c:	f7fd fbb2 	bl	8004fc4 <_printf_float>
 8007860:	4607      	mov	r7, r0
 8007862:	1c78      	adds	r0, r7, #1
 8007864:	d1d6      	bne.n	8007814 <_vfiprintf_r+0x1bc>
 8007866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007868:	07d9      	lsls	r1, r3, #31
 800786a:	d405      	bmi.n	8007878 <_vfiprintf_r+0x220>
 800786c:	89ab      	ldrh	r3, [r5, #12]
 800786e:	059a      	lsls	r2, r3, #22
 8007870:	d402      	bmi.n	8007878 <_vfiprintf_r+0x220>
 8007872:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007874:	f7ff f930 	bl	8006ad8 <__retarget_lock_release_recursive>
 8007878:	89ab      	ldrh	r3, [r5, #12]
 800787a:	065b      	lsls	r3, r3, #25
 800787c:	f53f af12 	bmi.w	80076a4 <_vfiprintf_r+0x4c>
 8007880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007882:	e711      	b.n	80076a8 <_vfiprintf_r+0x50>
 8007884:	ab03      	add	r3, sp, #12
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	462a      	mov	r2, r5
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <_vfiprintf_r+0x258>)
 800788c:	a904      	add	r1, sp, #16
 800788e:	4630      	mov	r0, r6
 8007890:	f7fd fe3c 	bl	800550c <_printf_i>
 8007894:	e7e4      	b.n	8007860 <_vfiprintf_r+0x208>
 8007896:	bf00      	nop
 8007898:	08011ff0 	.word	0x08011ff0
 800789c:	08012010 	.word	0x08012010
 80078a0:	08011fd0 	.word	0x08011fd0
 80078a4:	0801218c 	.word	0x0801218c
 80078a8:	08012196 	.word	0x08012196
 80078ac:	08004fc5 	.word	0x08004fc5
 80078b0:	08007633 	.word	0x08007633
 80078b4:	08012192 	.word	0x08012192

080078b8 <__sread>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	460c      	mov	r4, r1
 80078bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c0:	f000 f8f8 	bl	8007ab4 <_read_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	bfab      	itete	ge
 80078c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078ca:	89a3      	ldrhlt	r3, [r4, #12]
 80078cc:	181b      	addge	r3, r3, r0
 80078ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078d2:	bfac      	ite	ge
 80078d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078d6:	81a3      	strhlt	r3, [r4, #12]
 80078d8:	bd10      	pop	{r4, pc}

080078da <__swrite>:
 80078da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078de:	461f      	mov	r7, r3
 80078e0:	898b      	ldrh	r3, [r1, #12]
 80078e2:	05db      	lsls	r3, r3, #23
 80078e4:	4605      	mov	r5, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	4616      	mov	r6, r2
 80078ea:	d505      	bpl.n	80078f8 <__swrite+0x1e>
 80078ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f0:	2302      	movs	r3, #2
 80078f2:	2200      	movs	r2, #0
 80078f4:	f000 f898 	bl	8007a28 <_lseek_r>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007902:	81a3      	strh	r3, [r4, #12]
 8007904:	4632      	mov	r2, r6
 8007906:	463b      	mov	r3, r7
 8007908:	4628      	mov	r0, r5
 800790a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800790e:	f000 b817 	b.w	8007940 <_write_r>

08007912 <__sseek>:
 8007912:	b510      	push	{r4, lr}
 8007914:	460c      	mov	r4, r1
 8007916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791a:	f000 f885 	bl	8007a28 <_lseek_r>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	bf15      	itete	ne
 8007924:	6560      	strne	r0, [r4, #84]	; 0x54
 8007926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800792a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800792e:	81a3      	strheq	r3, [r4, #12]
 8007930:	bf18      	it	ne
 8007932:	81a3      	strhne	r3, [r4, #12]
 8007934:	bd10      	pop	{r4, pc}

08007936 <__sclose>:
 8007936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793a:	f000 b831 	b.w	80079a0 <_close_r>
	...

08007940 <_write_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d07      	ldr	r5, [pc, #28]	; (8007960 <_write_r+0x20>)
 8007944:	4604      	mov	r4, r0
 8007946:	4608      	mov	r0, r1
 8007948:	4611      	mov	r1, r2
 800794a:	2200      	movs	r2, #0
 800794c:	602a      	str	r2, [r5, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f000 fa86 	bl	8007e60 <_write>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_write_r+0x1e>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_write_r+0x1e>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20001518 	.word	0x20001518

08007964 <__assert_func>:
 8007964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007966:	4614      	mov	r4, r2
 8007968:	461a      	mov	r2, r3
 800796a:	4b09      	ldr	r3, [pc, #36]	; (8007990 <__assert_func+0x2c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4605      	mov	r5, r0
 8007970:	68d8      	ldr	r0, [r3, #12]
 8007972:	b14c      	cbz	r4, 8007988 <__assert_func+0x24>
 8007974:	4b07      	ldr	r3, [pc, #28]	; (8007994 <__assert_func+0x30>)
 8007976:	9100      	str	r1, [sp, #0]
 8007978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800797c:	4906      	ldr	r1, [pc, #24]	; (8007998 <__assert_func+0x34>)
 800797e:	462b      	mov	r3, r5
 8007980:	f000 f81e 	bl	80079c0 <fiprintf>
 8007984:	f000 f8b5 	bl	8007af2 <abort>
 8007988:	4b04      	ldr	r3, [pc, #16]	; (800799c <__assert_func+0x38>)
 800798a:	461c      	mov	r4, r3
 800798c:	e7f3      	b.n	8007976 <__assert_func+0x12>
 800798e:	bf00      	nop
 8007990:	20000740 	.word	0x20000740
 8007994:	0801219d 	.word	0x0801219d
 8007998:	080121aa 	.word	0x080121aa
 800799c:	08007f81 	.word	0x08007f81

080079a0 <_close_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d06      	ldr	r5, [pc, #24]	; (80079bc <_close_r+0x1c>)
 80079a4:	2300      	movs	r3, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	f000 fa20 	bl	8007df0 <_close>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_close_r+0x1a>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_close_r+0x1a>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	20001518 	.word	0x20001518

080079c0 <fiprintf>:
 80079c0:	b40e      	push	{r1, r2, r3}
 80079c2:	b503      	push	{r0, r1, lr}
 80079c4:	4601      	mov	r1, r0
 80079c6:	ab03      	add	r3, sp, #12
 80079c8:	4805      	ldr	r0, [pc, #20]	; (80079e0 <fiprintf+0x20>)
 80079ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ce:	6800      	ldr	r0, [r0, #0]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	f7ff fe41 	bl	8007658 <_vfiprintf_r>
 80079d6:	b002      	add	sp, #8
 80079d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079dc:	b003      	add	sp, #12
 80079de:	4770      	bx	lr
 80079e0:	20000740 	.word	0x20000740

080079e4 <_fstat_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d07      	ldr	r5, [pc, #28]	; (8007a04 <_fstat_r+0x20>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	4611      	mov	r1, r2
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	f000 fa05 	bl	8007e00 <_fstat>
 80079f6:	1c43      	adds	r3, r0, #1
 80079f8:	d102      	bne.n	8007a00 <_fstat_r+0x1c>
 80079fa:	682b      	ldr	r3, [r5, #0]
 80079fc:	b103      	cbz	r3, 8007a00 <_fstat_r+0x1c>
 80079fe:	6023      	str	r3, [r4, #0]
 8007a00:	bd38      	pop	{r3, r4, r5, pc}
 8007a02:	bf00      	nop
 8007a04:	20001518 	.word	0x20001518

08007a08 <_isatty_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4d06      	ldr	r5, [pc, #24]	; (8007a24 <_isatty_r+0x1c>)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4604      	mov	r4, r0
 8007a10:	4608      	mov	r0, r1
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	f000 fa04 	bl	8007e20 <_isatty>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_isatty_r+0x1a>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_isatty_r+0x1a>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20001518 	.word	0x20001518

08007a28 <_lseek_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	; (8007a48 <_lseek_r+0x20>)
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4611      	mov	r1, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	f000 fa02 	bl	8007e40 <_lseek>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_lseek_r+0x1e>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_lseek_r+0x1e>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	20001518 	.word	0x20001518

08007a4c <__ascii_mbtowc>:
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	b901      	cbnz	r1, 8007a52 <__ascii_mbtowc+0x6>
 8007a50:	a901      	add	r1, sp, #4
 8007a52:	b142      	cbz	r2, 8007a66 <__ascii_mbtowc+0x1a>
 8007a54:	b14b      	cbz	r3, 8007a6a <__ascii_mbtowc+0x1e>
 8007a56:	7813      	ldrb	r3, [r2, #0]
 8007a58:	600b      	str	r3, [r1, #0]
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	1e10      	subs	r0, r2, #0
 8007a5e:	bf18      	it	ne
 8007a60:	2001      	movne	r0, #1
 8007a62:	b002      	add	sp, #8
 8007a64:	4770      	bx	lr
 8007a66:	4610      	mov	r0, r2
 8007a68:	e7fb      	b.n	8007a62 <__ascii_mbtowc+0x16>
 8007a6a:	f06f 0001 	mvn.w	r0, #1
 8007a6e:	e7f8      	b.n	8007a62 <__ascii_mbtowc+0x16>

08007a70 <memmove>:
 8007a70:	4288      	cmp	r0, r1
 8007a72:	b510      	push	{r4, lr}
 8007a74:	eb01 0402 	add.w	r4, r1, r2
 8007a78:	d902      	bls.n	8007a80 <memmove+0x10>
 8007a7a:	4284      	cmp	r4, r0
 8007a7c:	4623      	mov	r3, r4
 8007a7e:	d807      	bhi.n	8007a90 <memmove+0x20>
 8007a80:	1e43      	subs	r3, r0, #1
 8007a82:	42a1      	cmp	r1, r4
 8007a84:	d008      	beq.n	8007a98 <memmove+0x28>
 8007a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a8e:	e7f8      	b.n	8007a82 <memmove+0x12>
 8007a90:	4402      	add	r2, r0
 8007a92:	4601      	mov	r1, r0
 8007a94:	428a      	cmp	r2, r1
 8007a96:	d100      	bne.n	8007a9a <memmove+0x2a>
 8007a98:	bd10      	pop	{r4, pc}
 8007a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aa2:	e7f7      	b.n	8007a94 <memmove+0x24>

08007aa4 <_malloc_usable_size_r>:
 8007aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa8:	1f18      	subs	r0, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfbc      	itt	lt
 8007aae:	580b      	ldrlt	r3, [r1, r0]
 8007ab0:	18c0      	addlt	r0, r0, r3
 8007ab2:	4770      	bx	lr

08007ab4 <_read_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d07      	ldr	r5, [pc, #28]	; (8007ad4 <_read_r+0x20>)
 8007ab8:	4604      	mov	r4, r0
 8007aba:	4608      	mov	r0, r1
 8007abc:	4611      	mov	r1, r2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	602a      	str	r2, [r5, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f000 f9c4 	bl	8007e50 <_read>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_read_r+0x1e>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_read_r+0x1e>
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	20001518 	.word	0x20001518

08007ad8 <__ascii_wctomb>:
 8007ad8:	b149      	cbz	r1, 8007aee <__ascii_wctomb+0x16>
 8007ada:	2aff      	cmp	r2, #255	; 0xff
 8007adc:	bf85      	ittet	hi
 8007ade:	238a      	movhi	r3, #138	; 0x8a
 8007ae0:	6003      	strhi	r3, [r0, #0]
 8007ae2:	700a      	strbls	r2, [r1, #0]
 8007ae4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ae8:	bf98      	it	ls
 8007aea:	2001      	movls	r0, #1
 8007aec:	4770      	bx	lr
 8007aee:	4608      	mov	r0, r1
 8007af0:	4770      	bx	lr

08007af2 <abort>:
 8007af2:	b508      	push	{r3, lr}
 8007af4:	2006      	movs	r0, #6
 8007af6:	f000 f82b 	bl	8007b50 <raise>
 8007afa:	2001      	movs	r0, #1
 8007afc:	f000 f9b8 	bl	8007e70 <_exit>

08007b00 <_raise_r>:
 8007b00:	291f      	cmp	r1, #31
 8007b02:	b538      	push	{r3, r4, r5, lr}
 8007b04:	4604      	mov	r4, r0
 8007b06:	460d      	mov	r5, r1
 8007b08:	d904      	bls.n	8007b14 <_raise_r+0x14>
 8007b0a:	2316      	movs	r3, #22
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b16:	b112      	cbz	r2, 8007b1e <_raise_r+0x1e>
 8007b18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b1c:	b94b      	cbnz	r3, 8007b32 <_raise_r+0x32>
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 f830 	bl	8007b84 <_getpid_r>
 8007b24:	462a      	mov	r2, r5
 8007b26:	4601      	mov	r1, r0
 8007b28:	4620      	mov	r0, r4
 8007b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b2e:	f000 b817 	b.w	8007b60 <_kill_r>
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d00a      	beq.n	8007b4c <_raise_r+0x4c>
 8007b36:	1c59      	adds	r1, r3, #1
 8007b38:	d103      	bne.n	8007b42 <_raise_r+0x42>
 8007b3a:	2316      	movs	r3, #22
 8007b3c:	6003      	str	r3, [r0, #0]
 8007b3e:	2001      	movs	r0, #1
 8007b40:	e7e7      	b.n	8007b12 <_raise_r+0x12>
 8007b42:	2400      	movs	r4, #0
 8007b44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b48:	4628      	mov	r0, r5
 8007b4a:	4798      	blx	r3
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e7e0      	b.n	8007b12 <_raise_r+0x12>

08007b50 <raise>:
 8007b50:	4b02      	ldr	r3, [pc, #8]	; (8007b5c <raise+0xc>)
 8007b52:	4601      	mov	r1, r0
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	f7ff bfd3 	b.w	8007b00 <_raise_r>
 8007b5a:	bf00      	nop
 8007b5c:	20000740 	.word	0x20000740

08007b60 <_kill_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	; (8007b80 <_kill_r+0x20>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	602b      	str	r3, [r5, #0]
 8007b6e:	f000 f95f 	bl	8007e30 <_kill>
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	d102      	bne.n	8007b7c <_kill_r+0x1c>
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	b103      	cbz	r3, 8007b7c <_kill_r+0x1c>
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	bd38      	pop	{r3, r4, r5, pc}
 8007b7e:	bf00      	nop
 8007b80:	20001518 	.word	0x20001518

08007b84 <_getpid_r>:
 8007b84:	f000 b944 	b.w	8007e10 <_getpid>

08007b88 <expf>:
 8007b88:	b508      	push	{r3, lr}
 8007b8a:	ed2d 8b02 	vpush	{d8}
 8007b8e:	eef0 8a40 	vmov.f32	s17, s0
 8007b92:	f000 f82f 	bl	8007bf4 <__ieee754_expf>
 8007b96:	eeb0 8a40 	vmov.f32	s16, s0
 8007b9a:	eeb0 0a68 	vmov.f32	s0, s17
 8007b9e:	f000 f919 	bl	8007dd4 <finitef>
 8007ba2:	b160      	cbz	r0, 8007bbe <expf+0x36>
 8007ba4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007be4 <expf+0x5c>
 8007ba8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb0:	dd0a      	ble.n	8007bc8 <expf+0x40>
 8007bb2:	f7fd f83f 	bl	8004c34 <__errno>
 8007bb6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007be8 <expf+0x60>
 8007bba:	2322      	movs	r3, #34	; 0x22
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	eeb0 0a48 	vmov.f32	s0, s16
 8007bc2:	ecbd 8b02 	vpop	{d8}
 8007bc6:	bd08      	pop	{r3, pc}
 8007bc8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007bec <expf+0x64>
 8007bcc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd4:	d5f3      	bpl.n	8007bbe <expf+0x36>
 8007bd6:	f7fd f82d 	bl	8004c34 <__errno>
 8007bda:	2322      	movs	r3, #34	; 0x22
 8007bdc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007bf0 <expf+0x68>
 8007be0:	6003      	str	r3, [r0, #0]
 8007be2:	e7ec      	b.n	8007bbe <expf+0x36>
 8007be4:	42b17180 	.word	0x42b17180
 8007be8:	7f800000 	.word	0x7f800000
 8007bec:	c2cff1b5 	.word	0xc2cff1b5
 8007bf0:	00000000 	.word	0x00000000

08007bf4 <__ieee754_expf>:
 8007bf4:	ee10 2a10 	vmov	r2, s0
 8007bf8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007bfc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007c00:	d902      	bls.n	8007c08 <__ieee754_expf+0x14>
 8007c02:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c06:	4770      	bx	lr
 8007c08:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007c0c:	d106      	bne.n	8007c1c <__ieee754_expf+0x28>
 8007c0e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007d48 <__ieee754_expf+0x154>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf18      	it	ne
 8007c16:	eeb0 0a67 	vmovne.f32	s0, s15
 8007c1a:	4770      	bx	lr
 8007c1c:	484b      	ldr	r0, [pc, #300]	; (8007d4c <__ieee754_expf+0x158>)
 8007c1e:	4282      	cmp	r2, r0
 8007c20:	dd02      	ble.n	8007c28 <__ieee754_expf+0x34>
 8007c22:	2000      	movs	r0, #0
 8007c24:	f000 b8d0 	b.w	8007dc8 <__math_oflowf>
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	da05      	bge.n	8007c38 <__ieee754_expf+0x44>
 8007c2c:	4a48      	ldr	r2, [pc, #288]	; (8007d50 <__ieee754_expf+0x15c>)
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	d902      	bls.n	8007c38 <__ieee754_expf+0x44>
 8007c32:	2000      	movs	r0, #0
 8007c34:	f000 b8c2 	b.w	8007dbc <__math_uflowf>
 8007c38:	4a46      	ldr	r2, [pc, #280]	; (8007d54 <__ieee754_expf+0x160>)
 8007c3a:	4291      	cmp	r1, r2
 8007c3c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007c40:	d952      	bls.n	8007ce8 <__ieee754_expf+0xf4>
 8007c42:	4a45      	ldr	r2, [pc, #276]	; (8007d58 <__ieee754_expf+0x164>)
 8007c44:	4291      	cmp	r1, r2
 8007c46:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007c4a:	d834      	bhi.n	8007cb6 <__ieee754_expf+0xc2>
 8007c4c:	4943      	ldr	r1, [pc, #268]	; (8007d5c <__ieee754_expf+0x168>)
 8007c4e:	4411      	add	r1, r2
 8007c50:	ed91 7a00 	vldr	s14, [r1]
 8007c54:	4942      	ldr	r1, [pc, #264]	; (8007d60 <__ieee754_expf+0x16c>)
 8007c56:	440a      	add	r2, r1
 8007c58:	edd2 7a00 	vldr	s15, [r2]
 8007c5c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007c60:	f1c3 0201 	rsb	r2, r3, #1
 8007c64:	1ad2      	subs	r2, r2, r3
 8007c66:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007c6a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007c6e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007d64 <__ieee754_expf+0x170>
 8007c72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d68 <__ieee754_expf+0x174>
 8007c76:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007c7a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007d6c <__ieee754_expf+0x178>
 8007c7e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007c82:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007d70 <__ieee754_expf+0x17c>
 8007c86:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007c8a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007d74 <__ieee754_expf+0x180>
 8007c8e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007c92:	eef0 6a40 	vmov.f32	s13, s0
 8007c96:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007c9a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007c9e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007ca2:	bb92      	cbnz	r2, 8007d0a <__ieee754_expf+0x116>
 8007ca4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007ca8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007cac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007cb0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007cb4:	4770      	bx	lr
 8007cb6:	4b30      	ldr	r3, [pc, #192]	; (8007d78 <__ieee754_expf+0x184>)
 8007cb8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007d7c <__ieee754_expf+0x188>
 8007cbc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007d80 <__ieee754_expf+0x18c>
 8007cc0:	4413      	add	r3, r2
 8007cc2:	edd3 7a00 	vldr	s15, [r3]
 8007cc6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007cca:	eeb0 7a40 	vmov.f32	s14, s0
 8007cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cd2:	ee17 2a90 	vmov	r2, s15
 8007cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cda:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007cde:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007d84 <__ieee754_expf+0x190>
 8007ce2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ce6:	e7be      	b.n	8007c66 <__ieee754_expf+0x72>
 8007ce8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8007cec:	d20b      	bcs.n	8007d06 <__ieee754_expf+0x112>
 8007cee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007d88 <__ieee754_expf+0x194>
 8007cf2:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007cf6:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cfe:	dd02      	ble.n	8007d06 <__ieee754_expf+0x112>
 8007d00:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007d04:	4770      	bx	lr
 8007d06:	2200      	movs	r2, #0
 8007d08:	e7af      	b.n	8007c6a <__ieee754_expf+0x76>
 8007d0a:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007d0e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007d12:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8007d16:	bfb8      	it	lt
 8007d18:	3264      	addlt	r2, #100	; 0x64
 8007d1a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007d1e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007d22:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8007d26:	ee17 3a90 	vmov	r3, s15
 8007d2a:	bfab      	itete	ge
 8007d2c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007d30:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007d34:	ee00 3a10 	vmovge	s0, r3
 8007d38:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007d8c <__ieee754_expf+0x198>
 8007d3c:	bfbc      	itt	lt
 8007d3e:	ee00 3a10 	vmovlt	s0, r3
 8007d42:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007d46:	4770      	bx	lr
 8007d48:	00000000 	.word	0x00000000
 8007d4c:	42b17217 	.word	0x42b17217
 8007d50:	42cff1b5 	.word	0x42cff1b5
 8007d54:	3eb17218 	.word	0x3eb17218
 8007d58:	3f851591 	.word	0x3f851591
 8007d5c:	080122ec 	.word	0x080122ec
 8007d60:	080122f4 	.word	0x080122f4
 8007d64:	3331bb4c 	.word	0x3331bb4c
 8007d68:	b5ddea0e 	.word	0xb5ddea0e
 8007d6c:	388ab355 	.word	0x388ab355
 8007d70:	bb360b61 	.word	0xbb360b61
 8007d74:	3e2aaaab 	.word	0x3e2aaaab
 8007d78:	080122e4 	.word	0x080122e4
 8007d7c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007d80:	3f317180 	.word	0x3f317180
 8007d84:	3717f7d1 	.word	0x3717f7d1
 8007d88:	7149f2ca 	.word	0x7149f2ca
 8007d8c:	0d800000 	.word	0x0d800000

08007d90 <with_errnof>:
 8007d90:	b513      	push	{r0, r1, r4, lr}
 8007d92:	4604      	mov	r4, r0
 8007d94:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007d98:	f7fc ff4c 	bl	8004c34 <__errno>
 8007d9c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007da0:	6004      	str	r4, [r0, #0]
 8007da2:	b002      	add	sp, #8
 8007da4:	bd10      	pop	{r4, pc}

08007da6 <xflowf>:
 8007da6:	b130      	cbz	r0, 8007db6 <xflowf+0x10>
 8007da8:	eef1 7a40 	vneg.f32	s15, s0
 8007dac:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007db0:	2022      	movs	r0, #34	; 0x22
 8007db2:	f7ff bfed 	b.w	8007d90 <with_errnof>
 8007db6:	eef0 7a40 	vmov.f32	s15, s0
 8007dba:	e7f7      	b.n	8007dac <xflowf+0x6>

08007dbc <__math_uflowf>:
 8007dbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007dc4 <__math_uflowf+0x8>
 8007dc0:	f7ff bff1 	b.w	8007da6 <xflowf>
 8007dc4:	10000000 	.word	0x10000000

08007dc8 <__math_oflowf>:
 8007dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007dd0 <__math_oflowf+0x8>
 8007dcc:	f7ff bfeb 	b.w	8007da6 <xflowf>
 8007dd0:	70000000 	.word	0x70000000

08007dd4 <finitef>:
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007dda:	9801      	ldr	r0, [sp, #4]
 8007ddc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007de0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007de4:	bfac      	ite	ge
 8007de6:	2000      	movge	r0, #0
 8007de8:	2001      	movlt	r0, #1
 8007dea:	b002      	add	sp, #8
 8007dec:	4770      	bx	lr
	...

08007df0 <_close>:
 8007df0:	4b02      	ldr	r3, [pc, #8]	; (8007dfc <_close+0xc>)
 8007df2:	2258      	movs	r2, #88	; 0x58
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	4770      	bx	lr
 8007dfc:	20001518 	.word	0x20001518

08007e00 <_fstat>:
 8007e00:	4b02      	ldr	r3, [pc, #8]	; (8007e0c <_fstat+0xc>)
 8007e02:	2258      	movs	r2, #88	; 0x58
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0a:	4770      	bx	lr
 8007e0c:	20001518 	.word	0x20001518

08007e10 <_getpid>:
 8007e10:	4b02      	ldr	r3, [pc, #8]	; (8007e1c <_getpid+0xc>)
 8007e12:	2258      	movs	r2, #88	; 0x58
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1a:	4770      	bx	lr
 8007e1c:	20001518 	.word	0x20001518

08007e20 <_isatty>:
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <_isatty+0xc>)
 8007e22:	2258      	movs	r2, #88	; 0x58
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	2000      	movs	r0, #0
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20001518 	.word	0x20001518

08007e30 <_kill>:
 8007e30:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <_kill+0xc>)
 8007e32:	2258      	movs	r2, #88	; 0x58
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	4770      	bx	lr
 8007e3c:	20001518 	.word	0x20001518

08007e40 <_lseek>:
 8007e40:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <_lseek+0xc>)
 8007e42:	2258      	movs	r2, #88	; 0x58
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	4770      	bx	lr
 8007e4c:	20001518 	.word	0x20001518

08007e50 <_read>:
 8007e50:	4b02      	ldr	r3, [pc, #8]	; (8007e5c <_read+0xc>)
 8007e52:	2258      	movs	r2, #88	; 0x58
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5a:	4770      	bx	lr
 8007e5c:	20001518 	.word	0x20001518

08007e60 <_write>:
 8007e60:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <_write+0xc>)
 8007e62:	2258      	movs	r2, #88	; 0x58
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6a:	4770      	bx	lr
 8007e6c:	20001518 	.word	0x20001518

08007e70 <_exit>:
 8007e70:	e7fe      	b.n	8007e70 <_exit>
	...

08007e74 <_init>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	bf00      	nop
 8007e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7a:	bc08      	pop	{r3}
 8007e7c:	469e      	mov	lr, r3
 8007e7e:	4770      	bx	lr

08007e80 <_fini>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr
