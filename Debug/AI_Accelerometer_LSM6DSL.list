
AI_Accelerometer_LSM6DSL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a45c  08008420  08008420  00018420  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801287c  0801287c  00030910  2**0
                  CONTENTS
  4 .ARM          00000008  0801287c  0801287c  0002287c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012884  08012884  00030910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012884  08012884  00022884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012888  08012888  00022888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000910  20000000  0801288c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bfc  20000920  0801319c  00030920  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000151c  0801319c  0003151c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030910  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a41  00000000  00000000  00030940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000382f  00000000  00000000  00045381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009c17  00000000  00000000  00048bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  000527c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00053460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002991a  00000000  00000000  000542f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016651  00000000  00000000  0007dc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f741a  00000000  00000000  00094263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  0018b67d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003590  00000000  00000000  0018b748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0018ecd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0018eda4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000920 	.word	0x20000920
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008404 	.word	0x08008404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000924 	.word	0x20000924
 80001cc:	08008404 	.word	0x08008404

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <ai_gesture_detect>:
		}
	}
}

void ai_gesture_detect(void)
{
 8000f4c:	b510      	push	{r4, lr}
	static uint32_t time_cnt = 0;

	if(time_cnt == 0)
 8000f4e:	4c0a      	ldr	r4, [pc, #40]	; (8000f78 <ai_gesture_detect+0x2c>)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	b913      	cbnz	r3, 8000f5a <ai_gesture_detect+0xe>
		time_cnt = HAL_GetTick();
 8000f54:	f000 fb0a 	bl	800156c <HAL_GetTick>
 8000f58:	6020      	str	r0, [r4, #0]

	if((HAL_GetTick() - time_cnt) > TASK_TIME_MS)
 8000f5a:	f000 fb07 	bl	800156c <HAL_GetTick>
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	1ac0      	subs	r0, r0, r3
 8000f62:	280a      	cmp	r0, #10
 8000f64:	d906      	bls.n	8000f74 <ai_gesture_detect+0x28>
	{
		time_cnt = HAL_GetTick();
 8000f66:	f000 fb01 	bl	800156c <HAL_GetTick>
 8000f6a:	6020      	str	r0, [r4, #0]
		MX_X_CUBE_AI_Process();
	}
}
 8000f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		MX_X_CUBE_AI_Process();
 8000f70:	f002 b9e2 	b.w	8003338 <MX_X_CUBE_AI_Process>
}
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	bf00      	nop
 8000f78:	20000940 	.word	0x20000940

08000f7c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == B1_Pin)
 8000f7c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
	{
		button_is_pushed = true;
 8000f80:	bf02      	ittt	eq
 8000f82:	4b02      	ldreq	r3, [pc, #8]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x10>)
 8000f84:	2201      	moveq	r2, #1
 8000f86:	701a      	strbeq	r2, [r3, #0]
	}
}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000093c 	.word	0x2000093c

08000f90 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <MX_CRC_Init+0x24>)
{
 8000f92:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_CRC_Init+0x28>)
 8000f96:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f98:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f9a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f9e:	8083      	strh	r3, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fa4:	f000 fb4e 	bl	8001644 <HAL_CRC_Init>
 8000fa8:	b118      	cbz	r0, 8000fb2 <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000fae:	f000 b9b1 	b.w	8001314 <Error_Handler>
}
 8000fb2:	bd08      	pop	{r3, pc}
 8000fb4:	20000944 	.word	0x20000944
 8000fb8:	40023000 	.word	0x40023000

08000fbc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000fbc:	6802      	ldr	r2, [r0, #0]
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_CRC_MspInit+0x24>)
 8000fc0:	429a      	cmp	r2, r3
{
 8000fc2:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000fc4:	d10a      	bne.n	8000fdc <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fc6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fd0:	649a      	str	r2, [r3, #72]	; 0x48
 8000fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fdc:	b002      	add	sp, #8
 8000fde:	4770      	bx	lr
 8000fe0:	40023000 	.word	0x40023000

08000fe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	2214      	movs	r2, #20
{
 8000fe8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	eb0d 0002 	add.w	r0, sp, r2
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f004 faf6 	bl	80055e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <MX_GPIO_Init+0xa8>)
 8000ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff8:	f042 0204 	orr.w	r2, r2, #4
 8000ffc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001000:	f002 0204 	and.w	r2, r2, #4
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800100a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800100e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001012:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001016:	9202      	str	r2, [sp, #8]
 8001018:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	64da      	str	r2, [r3, #76]	; 0x4c
 8001022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001024:	f002 0201 	and.w	r2, r2, #1
 8001028:	9203      	str	r2, [sp, #12]
 800102a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800102e:	f042 0202 	orr.w	r2, r2, #2
 8001032:	64da      	str	r2, [r3, #76]	; 0x4c
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2120      	movs	r1, #32
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001046:	f000 fc39 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_GPIO_Init+0xac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <MX_GPIO_Init+0xb0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001050:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001054:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001056:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105c:	f000 fb50 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	2120      	movs	r1, #32
 8001064:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001072:	f000 fb45 	bl	8001700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001076:	4622      	mov	r2, r4
 8001078:	4621      	mov	r1, r4
 800107a:	2028      	movs	r0, #40	; 0x28
 800107c:	f000 fa8e 	bl	800159c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001080:	2028      	movs	r0, #40	; 0x28
 8001082:	f000 fabd 	bl	8001600 <HAL_NVIC_EnableIRQ>

}
 8001086:	b00a      	add	sp, #40	; 0x28
 8001088:	bd10      	pop	{r4, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	10210000 	.word	0x10210000
 8001094:	48000800 	.word	0x48000800

08001098 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001098:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109a:	4812      	ldr	r0, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	2201      	movs	r2, #1
 80010a8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80010ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b6:	f000 fd5a 	bl	8001b6e <HAL_I2C_Init>
 80010ba:	b108      	cbz	r0, 80010c0 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80010bc:	f000 f92a 	bl	8001314 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <MX_I2C1_Init+0x4c>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	f000 ff16 	bl	8001ef4 <HAL_I2CEx_ConfigAnalogFilter>
 80010c8:	b108      	cbz	r0, 80010ce <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80010ca:	f000 f923 	bl	8001314 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_I2C1_Init+0x4c>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	f000 ff35 	bl	8001f40 <HAL_I2CEx_ConfigDigitalFilter>
 80010d6:	b118      	cbz	r0, 80010e0 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80010dc:	f000 b91a 	b.w	8001314 <Error_Handler>
}
 80010e0:	bd08      	pop	{r3, pc}
 80010e2:	bf00      	nop
 80010e4:	20000968 	.word	0x20000968
 80010e8:	40005400 	.word	0x40005400
 80010ec:	10909cec 	.word	0x10909cec

080010f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f0:	b510      	push	{r4, lr}
 80010f2:	4604      	mov	r4, r0
 80010f4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	2214      	movs	r2, #20
 80010f8:	2100      	movs	r1, #0
 80010fa:	a803      	add	r0, sp, #12
 80010fc:	f004 fa70 	bl	80055e0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001100:	6822      	ldr	r2, [r4, #0]
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_I2C_MspInit+0x60>)
 8001104:	429a      	cmp	r2, r3
 8001106:	d121      	bne.n	800114c <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4c12      	ldr	r4, [pc, #72]	; (8001154 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	4813      	ldr	r0, [pc, #76]	; (8001158 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001114:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001122:	2312      	movs	r3, #18
 8001124:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2101      	movs	r1, #1
 800112a:	2303      	movs	r3, #3
 800112c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001130:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001134:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f000 fae3 	bl	8001700 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800113a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800113c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001140:	65a3      	str	r3, [r4, #88]	; 0x58
 8001142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800114c:	b008      	add	sp, #32
 800114e:	bd10      	pop	{r4, pc}
 8001150:	40005400 	.word	0x40005400
 8001154:	40021000 	.word	0x40021000
 8001158:	48000400 	.word	0x48000400

0800115c <lsm6dsl_write>:
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_GYRO_SENSITIVITY_FS_125DPS);
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_GYRO_SENSITIVITY_FS_125DPS);
}

void lsm6dsl_write(uint8_t reg, uint8_t *data, uint32_t size)
{
 800115c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(I2C_INTERFACE, LSM6DSL_I2C_ADDR, reg, 1, data, size, I2C_TIMEOUT);
 800115e:	2301      	movs	r3, #1
 8001160:	b292      	uxth	r2, r2
 8001162:	e9cd 1200 	strd	r1, r2, [sp]
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	4602      	mov	r2, r0
 800116a:	21d6      	movs	r1, #214	; 0xd6
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <lsm6dsl_write+0x1c>)
 800116e:	f000 fd4f 	bl	8001c10 <HAL_I2C_Mem_Write>
}
 8001172:	b005      	add	sp, #20
 8001174:	f85d fb04 	ldr.w	pc, [sp], #4
 8001178:	20000968 	.word	0x20000968

0800117c <lsm6dsl_read>:

void lsm6dsl_read(uint8_t reg, uint8_t *data, uint32_t size)
{
 800117c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(I2C_INTERFACE, LSM6DSL_I2C_ADDR, reg, 1, data, size, I2C_TIMEOUT);
 800117e:	2301      	movs	r3, #1
 8001180:	b292      	uxth	r2, r2
 8001182:	e9cd 1200 	strd	r1, r2, [sp]
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	4602      	mov	r2, r0
 800118a:	21d6      	movs	r1, #214	; 0xd6
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <lsm6dsl_read+0x1c>)
 800118e:	f000 fdf5 	bl	8001d7c <HAL_I2C_Mem_Read>
}
 8001192:	b005      	add	sp, #20
 8001194:	f85d fb04 	ldr.w	pc, [sp], #4
 8001198:	20000968 	.word	0x20000968

0800119c <lsm6dsl_init>:
{
 800119c:	b507      	push	{r0, r1, r2, lr}
	uint8_t data = 0;
 800119e:	2300      	movs	r3, #0
	lsm6dsl_read(LSM6DSL_WHO_AM_I, &data, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f10d 0107 	add.w	r1, sp, #7
 80011a6:	200f      	movs	r0, #15
	uint8_t data = 0;
 80011a8:	f88d 3007 	strb.w	r3, [sp, #7]
	lsm6dsl_read(LSM6DSL_WHO_AM_I, &data, 1);
 80011ac:	f7ff ffe6 	bl	800117c <lsm6dsl_read>
	if(LSM6DSL_ID != data)
 80011b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011b4:	2b6a      	cmp	r3, #106	; 0x6a
 80011b6:	d11a      	bne.n	80011ee <lsm6dsl_init+0x52>
	data = LSM6DSL_SET_ODR_XL(LSM6DSL_XL_ODR_208Hz) | LSM6DSL_SET_FS_XL(LSM6DSL_2g);
 80011b8:	2350      	movs	r3, #80	; 0x50
	lsm6dsl_write(LSM6DSL_CTRL1_XL, &data, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f10d 0107 	add.w	r1, sp, #7
 80011c0:	2010      	movs	r0, #16
	data = LSM6DSL_SET_ODR_XL(LSM6DSL_XL_ODR_208Hz) | LSM6DSL_SET_FS_XL(LSM6DSL_2g);
 80011c2:	f88d 3007 	strb.w	r3, [sp, #7]
	lsm6dsl_write(LSM6DSL_CTRL1_XL, &data, 1);
 80011c6:	f7ff ffc9 	bl	800115c <lsm6dsl_write>
	data = LSM6DSL_SET_ODR_G(LSM6DSL_GY_ODR_208Hz) | LSM6DSL_SET_FS_G(LSM6DSL_125dps);
 80011ca:	2352      	movs	r3, #82	; 0x52
	lsm6dsl_write(LSM6DSL_CTRL2_G, &data, 1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f10d 0107 	add.w	r1, sp, #7
 80011d2:	2011      	movs	r0, #17
	data = LSM6DSL_SET_ODR_G(LSM6DSL_GY_ODR_208Hz) | LSM6DSL_SET_FS_G(LSM6DSL_125dps);
 80011d4:	f88d 3007 	strb.w	r3, [sp, #7]
	lsm6dsl_write(LSM6DSL_CTRL2_G, &data, 1);
 80011d8:	f7ff ffc0 	bl	800115c <lsm6dsl_write>
	data = LSM6DSL_SET_AUTO_INC;
 80011dc:	2304      	movs	r3, #4
	lsm6dsl_write(LSM6DSL_CTRL3_C, &data, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	f10d 0107 	add.w	r1, sp, #7
 80011e4:	2012      	movs	r0, #18
	data = LSM6DSL_SET_AUTO_INC;
 80011e6:	f88d 3007 	strb.w	r3, [sp, #7]
	lsm6dsl_write(LSM6DSL_CTRL3_C, &data, 1);
 80011ea:	f7ff ffb7 	bl	800115c <lsm6dsl_write>
}
 80011ee:	b003      	add	sp, #12
 80011f0:	f85d fb04 	ldr.w	pc, [sp], #4

080011f4 <lsm6dsl_get_accel_axis>:
{
 80011f4:	b513      	push	{r0, r1, r4, lr}
	lsm6dsl_read(LSM6DSL_OUTX_L_XL, axes_raw.bytes, LSM6DSL_ACCE_DATA_SIZE);
 80011f6:	2206      	movs	r2, #6
{
 80011f8:	4604      	mov	r4, r0
	lsm6dsl_read(LSM6DSL_OUTX_L_XL, axes_raw.bytes, LSM6DSL_ACCE_DATA_SIZE);
 80011fa:	4669      	mov	r1, sp
 80011fc:	2028      	movs	r0, #40	; 0x28
 80011fe:	f7ff ffbd 	bl	800117c <lsm6dsl_read>
	axes->x = (int32_t)((float)axes_raw.x * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001202:	f9bd 3000 	ldrsh.w	r3, [sp]
 8001206:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001254 <lsm6dsl_get_accel_axis+0x60>
 800120a:	ee07 3a10 	vmov	s14, r3
 800120e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001212:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
	axes->x = (int32_t)((float)axes_raw.x * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001216:	ee27 7a26 	vmul.f32	s14, s14, s13
 800121a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800121e:	ed84 7a00 	vstr	s14, [r4]
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001222:	ee07 3a10 	vmov	s14, r3
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001226:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800122a:	ee07 3a90 	vmov	s15, r3
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 800122e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001236:	ee27 7a26 	vmul.f32	s14, s14, s13
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 800123a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 800123e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	axes->y = (int32_t)((float)axes_raw.y * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 8001246:	ed84 7a01 	vstr	s14, [r4, #4]
	axes->z = (int32_t)((float)axes_raw.z * LSM6DSL_ACC_SENSITIVITY_FS_2G);
 800124a:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800124e:	b002      	add	sp, #8
 8001250:	bd10      	pop	{r4, pc}
 8001252:	bf00      	nop
 8001254:	3d79db23 	.word	0x3d79db23

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b500      	push	{lr}
 800125a:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125c:	2224      	movs	r2, #36	; 0x24
 800125e:	2100      	movs	r1, #0
 8001260:	a806      	add	r0, sp, #24
 8001262:	f004 f9bd 	bl	80055e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001266:	2214      	movs	r2, #20
 8001268:	2100      	movs	r1, #0
 800126a:	4668      	mov	r0, sp
 800126c:	f004 f9b8 	bl	80055e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	2288      	movs	r2, #136	; 0x88
 8001272:	2100      	movs	r1, #0
 8001274:	a816      	add	r0, sp, #88	; 0x58
 8001276:	f004 f9b3 	bl	80055e0 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127a:	2210      	movs	r2, #16
 800127c:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001280:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001282:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001286:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 800128a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800128e:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001292:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001296:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800129c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f000 ff43 	bl	8002128 <HAL_RCC_OscConfig>
 80012a2:	b108      	cbz	r0, 80012a8 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a8:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	220f      	movs	r2, #15
 80012ae:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b2:	2104      	movs	r1, #4
 80012b4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ba:	f001 f9bb 	bl	8002634 <HAL_RCC_ClockConfig>
 80012be:	b108      	cbz	r0, 80012c4 <SystemClock_Config+0x6c>
 80012c0:	b672      	cpsid	i
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80012c4:	2342      	movs	r3, #66	; 0x42
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012c6:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012c8:	902a      	str	r0, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ca:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80012cc:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ce:	f001 fb6f 	bl	80029b0 <HAL_RCCEx_PeriphCLKConfig>
 80012d2:	b108      	cbz	r0, 80012d8 <SystemClock_Config+0x80>
 80012d4:	b672      	cpsid	i
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <SystemClock_Config+0x7e>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012dc:	f000 fe5e 	bl	8001f9c <HAL_PWREx_ControlVoltageScaling>
 80012e0:	b108      	cbz	r0, 80012e6 <SystemClock_Config+0x8e>
 80012e2:	b672      	cpsid	i
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <SystemClock_Config+0x8c>
}
 80012e6:	b039      	add	sp, #228	; 0xe4
 80012e8:	f85d fb04 	ldr.w	pc, [sp], #4

080012ec <main>:
{
 80012ec:	b508      	push	{r3, lr}
  HAL_Init();
 80012ee:	f000 f91b 	bl	8001528 <HAL_Init>
  SystemClock_Config();
 80012f2:	f7ff ffb1 	bl	8001258 <SystemClock_Config>
  MX_GPIO_Init();
 80012f6:	f7ff fe75 	bl	8000fe4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012fa:	f000 f875 	bl	80013e8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012fe:	f7ff fecb 	bl	8001098 <MX_I2C1_Init>
  MX_CRC_Init();
 8001302:	f7ff fe45 	bl	8000f90 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8001306:	f001 ffd9 	bl	80032bc <MX_X_CUBE_AI_Init>
  lsm6dsl_init();
 800130a:	f7ff ff47 	bl	800119c <lsm6dsl_init>
	  ai_gesture_detect();
 800130e:	f7ff fe1d 	bl	8000f4c <ai_gesture_detect>
  while (1)
 8001312:	e7fc      	b.n	800130e <main+0x22>

08001314 <Error_Handler>:
 8001314:	b672      	cpsid	i
  while (1)
 8001316:	e7fe      	b.n	8001316 <Error_Handler+0x2>

08001318 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_MspInit+0x2c>)
 800131a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800131c:	f042 0201 	orr.w	r2, r2, #1
 8001320:	661a      	str	r2, [r3, #96]	; 0x60
 8001322:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001324:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	f002 0201 	and.w	r2, r2, #1
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001330:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001334:	659a      	str	r2, [r3, #88]	; 0x58
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	b002      	add	sp, #8
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000

08001348 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler>

0800134a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler>

0800134c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler>

0800134e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler>

08001350 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler>

08001352 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 b8fc 	b.w	8001554 <HAL_IncTick>

0800135c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800135c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001360:	f000 bab2 	b.w	80018c8 <HAL_GPIO_EXTI_IRQHandler>

08001364 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <_sbrk+0x30>)
 8001366:	6811      	ldr	r1, [r2, #0]
{
 8001368:	b510      	push	{r4, lr}
 800136a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800136c:	b909      	cbnz	r1, 8001372 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800136e:	490a      	ldr	r1, [pc, #40]	; (8001398 <_sbrk+0x34>)
 8001370:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	4909      	ldr	r1, [pc, #36]	; (800139c <_sbrk+0x38>)
 8001376:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <_sbrk+0x3c>)
 8001378:	4403      	add	r3, r0
 800137a:	1b09      	subs	r1, r1, r4
 800137c:	428b      	cmp	r3, r1
 800137e:	d906      	bls.n	800138e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001380:	f004 f8ee 	bl	8005560 <__errno>
 8001384:	230c      	movs	r3, #12
 8001386:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001388:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800138c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800138e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001390:	e7fc      	b.n	800138c <_sbrk+0x28>
 8001392:	bf00      	nop
 8001394:	200009b4 	.word	0x200009b4
 8001398:	20001520 	.word	0x20001520
 800139c:	20018000 	.word	0x20018000
 80013a0:	00000800 	.word	0x00000800

080013a4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <SystemInit+0x3c>)
 80013a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <SystemInit+0x40>)
 80013b4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013b6:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 80013b8:	f042 0201 	orr.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80013be:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80013c6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80013ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013d8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013da:	6199      	str	r1, [r3, #24]
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	40021000 	.word	0x40021000

080013e8 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 80013ea:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <MX_USART2_UART_Init+0x38>)
{
 80013ec:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 80013ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013f2:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001408:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140a:	f001 ff28 	bl	800325e <HAL_UART_Init>
 800140e:	b118      	cbz	r0, 8001418 <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001414:	f7ff bf7e 	b.w	8001314 <Error_Handler>
}
 8001418:	bd08      	pop	{r3, pc}
 800141a:	bf00      	nop
 800141c:	200009b8 	.word	0x200009b8
 8001420:	40004400 	.word	0x40004400

08001424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001424:	b510      	push	{r4, lr}
 8001426:	4604      	mov	r4, r0
 8001428:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	2214      	movs	r2, #20
 800142c:	2100      	movs	r1, #0
 800142e:	a803      	add	r0, sp, #12
 8001430:	f004 f8d6 	bl	80055e0 <memset>
  if(uartHandle->Instance==USART2)
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_UART_MspInit+0x60>)
 8001438:	429a      	cmp	r2, r3
 800143a:	d120      	bne.n	800147e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001440:	2103      	movs	r1, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8001442:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001444:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001448:	659a      	str	r2, [r3, #88]	; 0x58
 800144a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800144c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001450:	9201      	str	r2, [sp, #4]
 8001452:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	64da      	str	r2, [r3, #76]	; 0x4c
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	220c      	movs	r2, #12
 8001468:	2302      	movs	r3, #2
 800146a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800146e:	2307      	movs	r3, #7
 8001470:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	a903      	add	r1, sp, #12
 800147a:	f000 f941 	bl	8001700 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800147e:	b008      	add	sp, #32
 8001480:	bd10      	pop	{r4, pc}
 8001482:	bf00      	nop
 8001484:	40004400 	.word	0x40004400

08001488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148c:	f7ff ff8a 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001490:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001492:	e003      	b.n	800149c <LoopCopyDataInit>

08001494 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001496:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001498:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800149a:	3104      	adds	r1, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80014a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014a4:	d3f6      	bcc.n	8001494 <CopyDataInit>
	ldr	r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014a8:	e002      	b.n	80014b0 <LoopFillZerobss>

080014aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014ac:	f842 3b04 	str.w	r3, [r2], #4

080014b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <LoopForever+0x16>)
	cmp	r2, r3
 80014b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014b4:	d3f9      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f004 f859 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ba:	f7ff ff17 	bl	80012ec <main>

080014be <LoopForever>:

LoopForever:
    b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014c4:	0801288c 	.word	0x0801288c
	ldr	r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014cc:	20000910 	.word	0x20000910
	ldr	r2, =_sbss
 80014d0:	20000920 	.word	0x20000920
	ldr	r3, = _ebss
 80014d4:	2000151c 	.word	0x2000151c

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>
	...

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_InitTick+0x40>)
{
 80014e0:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80014e2:	7818      	ldrb	r0, [r3, #0]
 80014e4:	b908      	cbnz	r0, 80014ea <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80014e8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014ea:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_InitTick+0x44>)
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80014f4:	6810      	ldr	r0, [r2, #0]
 80014f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80014fa:	f000 f88f 	bl	800161c <HAL_SYSTICK_Config>
 80014fe:	4604      	mov	r4, r0
 8001500:	2800      	cmp	r0, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001504:	2d0f      	cmp	r5, #15
 8001506:	d8ee      	bhi.n	80014e6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	4602      	mov	r2, r0
 800150a:	4629      	mov	r1, r5
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f844 	bl	800159c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_InitTick+0x48>)
 8001516:	4620      	mov	r0, r4
 8001518:	601d      	str	r5, [r3, #0]
  return status;
 800151a:	e7e5      	b.n	80014e8 <HAL_InitTick+0xc>
 800151c:	20000004 	.word	0x20000004
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008

08001528 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001528:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_Init+0x28>)
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001530:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001536:	f000 f81f 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff ffce 	bl	80014dc <HAL_InitTick>
 8001540:	4604      	mov	r4, r0
 8001542:	b918      	cbnz	r0, 800154c <HAL_Init+0x24>
    HAL_MspInit();
 8001544:	f7ff fee8 	bl	8001318 <HAL_MspInit>
}
 8001548:	4620      	mov	r0, r4
 800154a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800154c:	2401      	movs	r4, #1
 800154e:	e7fb      	b.n	8001548 <HAL_Init+0x20>
 8001550:	40022000 	.word	0x40022000

08001554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x10>)
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_IncTick+0x14>)
 8001558:	6811      	ldr	r1, [r2, #0]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	440b      	add	r3, r1
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000a3c 	.word	0x20000a3c
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800156c:	4b01      	ldr	r3, [pc, #4]	; (8001574 <HAL_GetTick+0x8>)
 800156e:	6818      	ldr	r0, [r3, #0]
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000a3c 	.word	0x20000a3c

08001578 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800157a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001588:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001594:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159e:	b530      	push	{r4, r5, lr}
 80015a0:	68dc      	ldr	r4, [r3, #12]
 80015a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	2d04      	cmp	r5, #4
 80015ae:	bf28      	it	cs
 80015b0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b8:	bf8c      	ite	hi
 80015ba:	3c03      	subhi	r4, #3
 80015bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015be:	fa03 f505 	lsl.w	r5, r3, r5
 80015c2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c6:	40a3      	lsls	r3, r4
 80015c8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80015ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	bfac      	ite	ge
 80015d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	4a08      	ldrlt	r2, [pc, #32]	; (80015fc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	bfb8      	it	lt
 80015e2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	bfaa      	itet	ge
 80015ea:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015f4:	bd30      	pop	{r4, r5, pc}
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	e000ed14 	.word	0xe000ed14

08001600 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001600:	2800      	cmp	r0, #0
 8001602:	db08      	blt.n	8001616 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001604:	2301      	movs	r3, #1
 8001606:	0942      	lsrs	r2, r0, #5
 8001608:	f000 001f 	and.w	r0, r0, #31
 800160c:	fa03 f000 	lsl.w	r0, r3, r0
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <HAL_NVIC_EnableIRQ+0x18>)
 8001612:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100

0800161c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	3801      	subs	r0, #1
 800161e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001622:	d20b      	bcs.n	800163c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001624:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	4a05      	ldr	r2, [pc, #20]	; (8001640 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	21f0      	movs	r1, #240	; 0xf0
 800162e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001632:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001634:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001636:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001638:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800163c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001644:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001646:	4604      	mov	r4, r0
 8001648:	b908      	cbnz	r0, 800164e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800164a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800164c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800164e:	7f43      	ldrb	r3, [r0, #29]
 8001650:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001654:	b913      	cbnz	r3, 800165c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001656:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001658:	f7ff fcb0 	bl	8000fbc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800165c:	2302      	movs	r3, #2
 800165e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001660:	7923      	ldrb	r3, [r4, #4]
 8001662:	b9e3      	cbnz	r3, 800169e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <HAL_CRC_Init+0x70>)
 8001668:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	f022 0218 	bic.w	r2, r2, #24
 8001670:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001672:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001674:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001676:	b9d2      	cbnz	r2, 80016ae <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800167c:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	6961      	ldr	r1, [r4, #20]
 8001682:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	69a1      	ldr	r1, [r4, #24]
 800168e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001696:	2301      	movs	r3, #1
 8001698:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800169a:	2000      	movs	r0, #0
 800169c:	e7d6      	b.n	800164c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800169e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80016a2:	4620      	mov	r0, r4
 80016a4:	f000 f808 	bl	80016b8 <HAL_CRCEx_Polynomial_Set>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d0e2      	beq.n	8001672 <HAL_CRC_Init+0x2e>
 80016ac:	e7cd      	b.n	800164a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016ae:	6922      	ldr	r2, [r4, #16]
 80016b0:	e7e4      	b.n	800167c <HAL_CRC_Init+0x38>
 80016b2:	bf00      	nop
 80016b4:	04c11db7 	.word	0x04c11db7

080016b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80016b8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80016ba:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80016bc:	3b01      	subs	r3, #1
 80016be:	d31c      	bcc.n	80016fa <HAL_CRCEx_Polynomial_Set+0x42>
 80016c0:	fa21 f403 	lsr.w	r4, r1, r3
 80016c4:	07e4      	lsls	r4, r4, #31
 80016c6:	d5f9      	bpl.n	80016bc <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80016c8:	2a10      	cmp	r2, #16
 80016ca:	d012      	beq.n	80016f2 <HAL_CRCEx_Polynomial_Set+0x3a>
 80016cc:	d804      	bhi.n	80016d8 <HAL_CRCEx_Polynomial_Set+0x20>
 80016ce:	b13a      	cbz	r2, 80016e0 <HAL_CRCEx_Polynomial_Set+0x28>
 80016d0:	2a08      	cmp	r2, #8
 80016d2:	d010      	beq.n	80016f6 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80016d4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80016d6:	e00b      	b.n	80016f0 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80016d8:	2a18      	cmp	r2, #24
 80016da:	d1fb      	bne.n	80016d4 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80016dc:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80016de:	d8f9      	bhi.n	80016d4 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016e0:	6800      	ldr	r0, [r0, #0]
 80016e2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016e4:	6883      	ldr	r3, [r0, #8]
 80016e6:	f023 0318 	bic.w	r3, r3, #24
 80016ea:	431a      	orrs	r2, r3
 80016ec:	6082      	str	r2, [r0, #8]
 80016ee:	2000      	movs	r0, #0
}
 80016f0:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80016f2:	2b07      	cmp	r3, #7
 80016f4:	e7f3      	b.n	80016de <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	e7f1      	b.n	80016de <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80016fa:	2a00      	cmp	r2, #0
 80016fc:	d1ea      	bne.n	80016d4 <HAL_CRCEx_Polynomial_Set+0x1c>
 80016fe:	e7ef      	b.n	80016e0 <HAL_CRCEx_Polynomial_Set+0x28>

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80018b8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001708:	4d69      	ldr	r5, [pc, #420]	; (80018b0 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170c:	680a      	ldr	r2, [r1, #0]
 800170e:	fa32 f403 	lsrs.w	r4, r2, r3
 8001712:	d102      	bne.n	800171a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001714:	b003      	add	sp, #12
 8001716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800171a:	f04f 0a01 	mov.w	sl, #1
 800171e:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 8001722:	ea1a 0202 	ands.w	r2, sl, r2
 8001726:	f000 80b4 	beq.w	8001892 <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800172a:	684c      	ldr	r4, [r1, #4]
 800172c:	f024 0e10 	bic.w	lr, r4, #16
 8001730:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001734:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001736:	f10e 37ff 	add.w	r7, lr, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800173a:	fa06 f608 	lsl.w	r6, r6, r8
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001740:	ea6f 0606 	mvn.w	r6, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001744:	d811      	bhi.n	800176a <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8001746:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001748:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800174c:	68cf      	ldr	r7, [r1, #12]
 800174e:	fa07 f708 	lsl.w	r7, r7, r8
 8001752:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8001756:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001758:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175a:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800175e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001762:	409f      	lsls	r7, r3
 8001764:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001768:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800176a:	f004 0c03 	and.w	ip, r4, #3
 800176e:	f1bc 0f03 	cmp.w	ip, #3
 8001772:	d108      	bne.n	8001786 <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8001774:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001776:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800177a:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 800177e:	409f      	lsls	r7, r3
 8001780:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8001784:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001786:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001788:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178c:	688f      	ldr	r7, [r1, #8]
 800178e:	fa07 f708 	lsl.w	r7, r7, r8
 8001792:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001796:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 800179a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179c:	d116      	bne.n	80017cc <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 800179e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80017a2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80017aa:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80017b2:	f04f 0e0f 	mov.w	lr, #15
 80017b6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80017ba:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017be:	690f      	ldr	r7, [r1, #16]
 80017c0:	fa07 f70b 	lsl.w	r7, r7, fp
 80017c4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80017c8:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80017cc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ce:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d4:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 80017d8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017da:	00e6      	lsls	r6, r4, #3
 80017dc:	d559      	bpl.n	8001892 <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80017e2:	f046 0601 	orr.w	r6, r6, #1
 80017e6:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80017ea:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80017ee:	f023 0703 	bic.w	r7, r3, #3
 80017f2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80017f6:	f006 0601 	and.w	r6, r6, #1
 80017fa:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80017fe:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001800:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001804:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001806:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001808:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800180c:	f04f 0c0f 	mov.w	ip, #15
 8001810:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001814:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001818:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800181c:	d03b      	beq.n	8001896 <HAL_GPIO_Init+0x196>
 800181e:	4e25      	ldr	r6, [pc, #148]	; (80018b4 <HAL_GPIO_Init+0x1b4>)
 8001820:	42b0      	cmp	r0, r6
 8001822:	d03a      	beq.n	800189a <HAL_GPIO_Init+0x19a>
 8001824:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001828:	42b0      	cmp	r0, r6
 800182a:	d038      	beq.n	800189e <HAL_GPIO_Init+0x19e>
 800182c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001830:	42b0      	cmp	r0, r6
 8001832:	d036      	beq.n	80018a2 <HAL_GPIO_Init+0x1a2>
 8001834:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001838:	42b0      	cmp	r0, r6
 800183a:	d034      	beq.n	80018a6 <HAL_GPIO_Init+0x1a6>
 800183c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001840:	42b0      	cmp	r0, r6
 8001842:	d032      	beq.n	80018aa <HAL_GPIO_Init+0x1aa>
 8001844:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001848:	42b0      	cmp	r0, r6
 800184a:	bf0c      	ite	eq
 800184c:	2606      	moveq	r6, #6
 800184e:	2607      	movne	r6, #7
 8001850:	fa06 f60e 	lsl.w	r6, r6, lr
 8001854:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001858:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800185a:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 800185c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001862:	bf0c      	ite	eq
 8001864:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001866:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8001868:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 800186a:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001870:	bf0c      	ite	eq
 8001872:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001874:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001876:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8001878:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800187e:	bf0c      	ite	eq
 8001880:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001882:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001884:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8001886:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001888:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800188a:	bf54      	ite	pl
 800188c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800188e:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8001890:	60ee      	str	r6, [r5, #12]
    position++;
 8001892:	3301      	adds	r3, #1
 8001894:	e73a      	b.n	800170c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001896:	2600      	movs	r6, #0
 8001898:	e7da      	b.n	8001850 <HAL_GPIO_Init+0x150>
 800189a:	2601      	movs	r6, #1
 800189c:	e7d8      	b.n	8001850 <HAL_GPIO_Init+0x150>
 800189e:	2602      	movs	r6, #2
 80018a0:	e7d6      	b.n	8001850 <HAL_GPIO_Init+0x150>
 80018a2:	2603      	movs	r6, #3
 80018a4:	e7d4      	b.n	8001850 <HAL_GPIO_Init+0x150>
 80018a6:	2604      	movs	r6, #4
 80018a8:	e7d2      	b.n	8001850 <HAL_GPIO_Init+0x150>
 80018aa:	2605      	movs	r6, #5
 80018ac:	e7d0      	b.n	8001850 <HAL_GPIO_Init+0x150>
 80018ae:	bf00      	nop
 80018b0:	40010400 	.word	0x40010400
 80018b4:	48000400 	.word	0x48000400
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	b10a      	cbz	r2, 80018c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018be:	6181      	str	r1, [r0, #24]
 80018c0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80018ca:	6951      	ldr	r1, [r2, #20]
 80018cc:	4201      	tst	r1, r0
{
 80018ce:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018d0:	d002      	beq.n	80018d8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018d4:	f7ff fb52 	bl	8000f7c <HAL_GPIO_EXTI_Callback>
  }
}
 80018d8:	bd08      	pop	{r3, pc}
 80018da:	bf00      	nop
 80018dc:	40010400 	.word	0x40010400

080018e0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018e0:	6803      	ldr	r3, [r0, #0]
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80018e6:	bf44      	itt	mi
 80018e8:	2200      	movmi	r2, #0
 80018ea:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018f0:	bf5e      	ittt	pl
 80018f2:	699a      	ldrpl	r2, [r3, #24]
 80018f4:	f042 0201 	orrpl.w	r2, r2, #1
 80018f8:	619a      	strpl	r2, [r3, #24]
  }
}
 80018fa:	4770      	bx	lr

080018fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018fc:	b530      	push	{r4, r5, lr}
 80018fe:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001900:	6804      	ldr	r4, [r0, #0]
 8001902:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8001906:	431a      	orrs	r2, r3
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <I2C_TransferConfig+0x24>)
 800190a:	6860      	ldr	r0, [r4, #4]
 800190c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001910:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8001914:	430a      	orrs	r2, r1
 8001916:	ea20 0003 	bic.w	r0, r0, r3
 800191a:	4302      	orrs	r2, r0
 800191c:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800191e:	bd30      	pop	{r4, r5, pc}
 8001920:	03ff63ff 	.word	0x03ff63ff

08001924 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001924:	6803      	ldr	r3, [r0, #0]
{
 8001926:	b570      	push	{r4, r5, r6, lr}
 8001928:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800192a:	6998      	ldr	r0, [r3, #24]
 800192c:	f010 0010 	ands.w	r0, r0, #16
{
 8001930:	460d      	mov	r5, r1
 8001932:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001934:	d116      	bne.n	8001964 <I2C_IsAcknowledgeFailed+0x40>
}
 8001936:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001938:	1c69      	adds	r1, r5, #1
 800193a:	d014      	beq.n	8001966 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193c:	f7ff fe16 	bl	800156c <HAL_GetTick>
 8001940:	1b80      	subs	r0, r0, r6
 8001942:	4285      	cmp	r5, r0
 8001944:	d300      	bcc.n	8001948 <I2C_IsAcknowledgeFailed+0x24>
 8001946:	b96d      	cbnz	r5, 8001964 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001948:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800194a:	f043 0320 	orr.w	r3, r3, #32
 800194e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001950:	2320      	movs	r3, #32
 8001952:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800195c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
 8001962:	e7e8      	b.n	8001936 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	0692      	lsls	r2, r2, #26
 800196a:	d5e5      	bpl.n	8001938 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800196c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800196e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001970:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001972:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001974:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001976:	f7ff ffb3 	bl	80018e0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800197a:	6822      	ldr	r2, [r4, #0]
 800197c:	6853      	ldr	r3, [r2, #4]
 800197e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001982:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001986:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001990:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001998:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800199a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800199e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80019a6:	e7db      	b.n	8001960 <I2C_IsAcknowledgeFailed+0x3c>

080019a8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	079b      	lsls	r3, r3, #30
 80019b6:	d501      	bpl.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80019b8:	2000      	movs	r0, #0
}
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019bc:	4632      	mov	r2, r6
 80019be:	4629      	mov	r1, r5
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff ffaf 	bl	8001924 <I2C_IsAcknowledgeFailed>
 80019c6:	b9a0      	cbnz	r0, 80019f2 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80019c8:	1c6a      	adds	r2, r5, #1
 80019ca:	d0f1      	beq.n	80019b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019cc:	f7ff fdce 	bl	800156c <HAL_GetTick>
 80019d0:	1b80      	subs	r0, r0, r6
 80019d2:	42a8      	cmp	r0, r5
 80019d4:	d801      	bhi.n	80019da <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80019d6:	2d00      	cmp	r5, #0
 80019d8:	d1ea      	bne.n	80019b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	2320      	movs	r3, #32
 80019e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80019ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80019f2:	2001      	movs	r0, #1
 80019f4:	e7e1      	b.n	80019ba <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080019f6 <I2C_WaitOnFlagUntilTimeout>:
{
 80019f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019fa:	9f06      	ldr	r7, [sp, #24]
 80019fc:	4604      	mov	r4, r0
 80019fe:	4688      	mov	r8, r1
 8001a00:	4616      	mov	r6, r2
 8001a02:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	6993      	ldr	r3, [r2, #24]
 8001a08:	ea38 0303 	bics.w	r3, r8, r3
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	42b3      	cmp	r3, r6
 8001a14:	d001      	beq.n	8001a1a <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001a16:	2000      	movs	r0, #0
 8001a18:	e015      	b.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001a1a:	1c6b      	adds	r3, r5, #1
 8001a1c:	d0f3      	beq.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1e:	f7ff fda5 	bl	800156c <HAL_GetTick>
 8001a22:	1bc0      	subs	r0, r0, r7
 8001a24:	42a8      	cmp	r0, r5
 8001a26:	d801      	bhi.n	8001a2c <I2C_WaitOnFlagUntilTimeout+0x36>
 8001a28:	2d00      	cmp	r5, #0
 8001a2a:	d1eb      	bne.n	8001a04 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a2e:	f043 0320 	orr.w	r3, r3, #32
 8001a32:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a34:	2320      	movs	r3, #32
 8001a36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001a40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001a44:	2001      	movs	r0, #1
}
 8001a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001a4c <I2C_RequestMemoryWrite>:
{
 8001a4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001a50:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 8001a54:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <I2C_RequestMemoryWrite+0x68>)
 8001a58:	9300      	str	r3, [sp, #0]
{
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a62:	b2f2      	uxtb	r2, r6
 8001a64:	f7ff ff4a 	bl	80018fc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a68:	4642      	mov	r2, r8
 8001a6a:	4639      	mov	r1, r7
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f7ff ff9b 	bl	80019a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a72:	b118      	cbz	r0, 8001a7c <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8001a74:	2001      	movs	r0, #1
}
 8001a76:	b002      	add	sp, #8
 8001a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a7c:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a7e:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a80:	d10d      	bne.n	8001a9e <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a82:	b2e4      	uxtb	r4, r4
 8001a84:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a86:	2200      	movs	r2, #0
 8001a88:	f8cd 8000 	str.w	r8, [sp]
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	4628      	mov	r0, r5
 8001a92:	f7ff ffb0 	bl	80019f6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001a96:	3800      	subs	r0, #0
 8001a98:	bf18      	it	ne
 8001a9a:	2001      	movne	r0, #1
 8001a9c:	e7eb      	b.n	8001a76 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a9e:	0a22      	lsrs	r2, r4, #8
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa2:	4639      	mov	r1, r7
 8001aa4:	4642      	mov	r2, r8
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	f7ff ff7e 	bl	80019a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d1e1      	bne.n	8001a74 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	e7e6      	b.n	8001a82 <I2C_RequestMemoryWrite+0x36>
 8001ab4:	80002000 	.word	0x80002000

08001ab8 <I2C_RequestMemoryRead>:
{
 8001ab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001abc:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 8001ac0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <I2C_RequestMemoryRead+0x68>)
 8001ac4:	9300      	str	r3, [sp, #0]
{
 8001ac6:	4605      	mov	r5, r0
 8001ac8:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001aca:	2300      	movs	r3, #0
 8001acc:	b2f2      	uxtb	r2, r6
 8001ace:	f7ff ff15 	bl	80018fc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad2:	4642      	mov	r2, r8
 8001ad4:	4639      	mov	r1, r7
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	f7ff ff66 	bl	80019a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001adc:	b118      	cbz	r0, 8001ae6 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
}
 8001ae0:	b002      	add	sp, #8
 8001ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ae6:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ae8:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aea:	d10d      	bne.n	8001b08 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aec:	b2e4      	uxtb	r4, r4
 8001aee:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001af0:	2200      	movs	r2, #0
 8001af2:	f8cd 8000 	str.w	r8, [sp]
 8001af6:	463b      	mov	r3, r7
 8001af8:	2140      	movs	r1, #64	; 0x40
 8001afa:	4628      	mov	r0, r5
 8001afc:	f7ff ff7b 	bl	80019f6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001b00:	3800      	subs	r0, #0
 8001b02:	bf18      	it	ne
 8001b04:	2001      	movne	r0, #1
 8001b06:	e7eb      	b.n	8001ae0 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b08:	0a22      	lsrs	r2, r4, #8
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0c:	4639      	mov	r1, r7
 8001b0e:	4642      	mov	r2, r8
 8001b10:	4628      	mov	r0, r5
 8001b12:	f7ff ff49 	bl	80019a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d1e1      	bne.n	8001ade <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b1a:	682b      	ldr	r3, [r5, #0]
 8001b1c:	e7e6      	b.n	8001aec <I2C_RequestMemoryRead+0x34>
 8001b1e:	bf00      	nop
 8001b20:	80002000 	.word	0x80002000

08001b24 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	4604      	mov	r4, r0
 8001b28:	460d      	mov	r5, r1
 8001b2a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	069b      	lsls	r3, r3, #26
 8001b32:	d501      	bpl.n	8001b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b34:	2000      	movs	r0, #0
}
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b38:	4632      	mov	r2, r6
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff fef1 	bl	8001924 <I2C_IsAcknowledgeFailed>
 8001b42:	b990      	cbnz	r0, 8001b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b44:	f7ff fd12 	bl	800156c <HAL_GetTick>
 8001b48:	1b80      	subs	r0, r0, r6
 8001b4a:	42a8      	cmp	r0, r5
 8001b4c:	d801      	bhi.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	d1ec      	bne.n	8001b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b54:	f043 0320 	orr.w	r3, r3, #32
 8001b58:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001b66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	e7e3      	b.n	8001b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08001b6e <HAL_I2C_Init>:
{
 8001b6e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001b70:	4604      	mov	r4, r0
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d04a      	beq.n	8001c0c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b76:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b7e:	b91b      	cbnz	r3, 8001b88 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001b80:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001b84:	f7ff fab4 	bl	80010f0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b88:	2324      	movs	r3, #36	; 0x24
 8001b8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b98:	6862      	ldr	r2, [r4, #4]
 8001b9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b9e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ba8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bac:	2901      	cmp	r1, #1
 8001bae:	d124      	bne.n	8001bfa <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bb4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bca:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	69a1      	ldr	r1, [r4, #24]
 8001bd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001bd6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001bea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bec:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bf2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001bf8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bfe:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c00:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c02:	bf04      	itt	eq
 8001c04:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001c08:	605a      	streq	r2, [r3, #4]
 8001c0a:	e7d4      	b.n	8001bb6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	e7f3      	b.n	8001bf8 <HAL_I2C_Init+0x8a>

08001c10 <HAL_I2C_Mem_Write>:
{
 8001c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c14:	b085      	sub	sp, #20
 8001c16:	469b      	mov	fp, r3
 8001c18:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001c1c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001c22:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c26:	2b20      	cmp	r3, #32
{
 8001c28:	4604      	mov	r4, r0
 8001c2a:	460f      	mov	r7, r1
 8001c2c:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2e:	f040 80a3 	bne.w	8001d78 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8001c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c34:	b10b      	cbz	r3, 8001c3a <HAL_I2C_Mem_Write+0x2a>
 8001c36:	9b03      	ldr	r3, [sp, #12]
 8001c38:	b933      	cbnz	r3, 8001c48 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001c40:	2001      	movs	r0, #1
}
 8001c42:	b005      	add	sp, #20
 8001c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001c48:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	f000 8093 	beq.w	8001d78 <HAL_I2C_Mem_Write+0x168>
 8001c52:	2501      	movs	r5, #1
 8001c54:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001c58:	f7ff fc88 	bl	800156c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001c60:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c62:	462a      	mov	r2, r5
 8001c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fec4 	bl	80019f6 <I2C_WaitOnFlagUntilTimeout>
 8001c6e:	4680      	mov	r8, r0
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d1e5      	bne.n	8001c40 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c74:	2321      	movs	r3, #33	; 0x21
 8001c76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c7a:	2340      	movs	r3, #64	; 0x40
 8001c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c82:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c84:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c86:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8001c88:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001c8a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c8c:	e9cd 9600 	strd	r9, r6, [sp]
 8001c90:	465b      	mov	r3, fp
 8001c92:	4652      	mov	r2, sl
 8001c94:	4639      	mov	r1, r7
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff fed8 	bl	8001a4c <I2C_RequestMemoryWrite>
 8001c9c:	b110      	cbz	r0, 8001ca4 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8001c9e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001ca2:	e7cd      	b.n	8001c40 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	d955      	bls.n	8001d58 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cac:	22ff      	movs	r2, #255	; 0xff
 8001cae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cb0:	9000      	str	r0, [sp, #0]
 8001cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cb6:	4639      	mov	r1, r7
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff fe1f 	bl	80018fc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbe:	4632      	mov	r2, r6
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff fe70 	bl	80019a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	d1b9      	bne.n	8001c40 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001cd4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001cd6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001cd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001cda:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ce2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ce8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001cea:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cec:	b1ab      	cbz	r3, 8001d1a <HAL_I2C_Mem_Write+0x10a>
 8001cee:	b9a2      	cbnz	r2, 8001d1a <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cf0:	9600      	str	r6, [sp, #0]
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff fe7d 	bl	80019f6 <I2C_WaitOnFlagUntilTimeout>
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d19f      	bne.n	8001c40 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2bff      	cmp	r3, #255	; 0xff
 8001d06:	d92f      	bls.n	8001d68 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d08:	22ff      	movs	r2, #255	; 0xff
 8001d0a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d0c:	9000      	str	r0, [sp, #0]
 8001d0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d12:	4639      	mov	r1, r7
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7ff fdf1 	bl	80018fc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001d1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1cd      	bne.n	8001cbe <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d22:	4632      	mov	r2, r6
 8001d24:	4649      	mov	r1, r9
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff fefc 	bl	8001b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d187      	bne.n	8001c40 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	2120      	movs	r1, #32
 8001d34:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001d3c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001d40:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d4e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d52:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001d56:	e774      	b.n	8001c42 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001d58:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d5a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	e7a6      	b.n	8001cb6 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8001d68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d6a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	e7cc      	b.n	8001d12 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8001d78:	2002      	movs	r0, #2
 8001d7a:	e762      	b.n	8001c42 <HAL_I2C_Mem_Write+0x32>

08001d7c <HAL_I2C_Mem_Read>:
{
 8001d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d80:	b085      	sub	sp, #20
 8001d82:	469b      	mov	fp, r3
 8001d84:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001d88:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001d8e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d92:	2b20      	cmp	r3, #32
{
 8001d94:	4604      	mov	r4, r0
 8001d96:	460f      	mov	r7, r1
 8001d98:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	f040 80a7 	bne.w	8001eec <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8001d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001da0:	b10b      	cbz	r3, 8001da6 <HAL_I2C_Mem_Read+0x2a>
 8001da2:	9b03      	ldr	r3, [sp, #12]
 8001da4:	b933      	cbnz	r3, 8001db4 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001daa:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
}
 8001dae:	b005      	add	sp, #20
 8001db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001db4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	f000 8097 	beq.w	8001eec <HAL_I2C_Mem_Read+0x170>
 8001dbe:	2501      	movs	r5, #1
 8001dc0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001dc4:	f7ff fbd2 	bl	800156c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dc8:	2319      	movs	r3, #25
 8001dca:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001dcc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dce:	462a      	mov	r2, r5
 8001dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fe0e 	bl	80019f6 <I2C_WaitOnFlagUntilTimeout>
 8001dda:	4680      	mov	r8, r0
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d1e5      	bne.n	8001dac <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001de0:	2322      	movs	r3, #34	; 0x22
 8001de2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de6:	2340      	movs	r3, #64	; 0x40
 8001de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001dee:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001df0:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8001df4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001df6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001df8:	e9cd 9600 	strd	r9, r6, [sp]
 8001dfc:	465b      	mov	r3, fp
 8001dfe:	4652      	mov	r2, sl
 8001e00:	4639      	mov	r1, r7
 8001e02:	4620      	mov	r0, r4
 8001e04:	f7ff fe58 	bl	8001ab8 <I2C_RequestMemoryRead>
 8001e08:	b110      	cbz	r0, 8001e10 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8001e0a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001e0e:	e7cd      	b.n	8001dac <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2bff      	cmp	r3, #255	; 0xff
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_I2C_Mem_Read+0x174>)
 8001e18:	d958      	bls.n	8001ecc <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e1a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e1c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e1e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001e24:	4639      	mov	r1, r7
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fd68 	bl	80018fc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e2c:	9600      	str	r6, [sp, #0]
 8001e2e:	464b      	mov	r3, r9
 8001e30:	2200      	movs	r2, #0
 8001e32:	2104      	movs	r1, #4
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff fdde 	bl	80019f6 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d1b6      	bne.n	8001dac <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e44:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001e48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e5c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001e5e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e60:	b1ab      	cbz	r3, 8001e8e <HAL_I2C_Mem_Read+0x112>
 8001e62:	b9a2      	cbnz	r2, 8001e8e <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	9600      	str	r6, [sp, #0]
 8001e66:	464b      	mov	r3, r9
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fdc3 	bl	80019f6 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d19b      	bne.n	8001dac <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2bff      	cmp	r3, #255	; 0xff
 8001e7a:	d92f      	bls.n	8001edc <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e7c:	22ff      	movs	r2, #255	; 0xff
 8001e7e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e80:	9000      	str	r0, [sp, #0]
 8001e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e86:	4639      	mov	r1, r7
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff fd37 	bl	80018fc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001e8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ca      	bne.n	8001e2c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e96:	4632      	mov	r2, r6
 8001e98:	4649      	mov	r1, r9
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff fe42 	bl	8001b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	d183      	bne.n	8001dac <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001eb0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001eb4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ec2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ec6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001eca:	e770      	b.n	8001dae <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001ecc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ece:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	e7a3      	b.n	8001e24 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8001edc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ede:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	e7cc      	b.n	8001e86 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8001eec:	2002      	movs	r0, #2
 8001eee:	e75e      	b.n	8001dae <HAL_I2C_Mem_Read+0x32>
 8001ef0:	80002400 	.word	0x80002400

08001ef4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ef4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	b2dc      	uxtb	r4, r3
 8001efe:	d11d      	bne.n	8001f3c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f00:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d019      	beq.n	8001f3c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f08:	2324      	movs	r3, #36	; 0x24
 8001f0a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f0e:	6803      	ldr	r3, [r0, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4311      	orrs	r1, r2
 8001f24:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001f38:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001f3a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	e7fc      	b.n	8001f3a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001f40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f40:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	b2dc      	uxtb	r4, r3
 8001f4a:	d11c      	bne.n	8001f86 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d018      	beq.n	8001f86 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f54:	2324      	movs	r3, #36	; 0x24
 8001f56:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f5a:	6803      	ldr	r3, [r0, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f64:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f66:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f6a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f6e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f7e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001f82:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001f84:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001f86:	2002      	movs	r0, #2
 8001f88:	e7fc      	b.n	8001f84 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08001f8c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <HAL_PWREx_GetVoltageRange+0xc>)
 8001f8e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001f90:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9c:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa8:	d11d      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fae:	d101      	bne.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb4:	6813      	ldr	r3, [r2, #0]
 8001fb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fbe:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2132      	movs	r1, #50	; 0x32
 8001fc6:	434b      	muls	r3, r1
 8001fc8:	490e      	ldr	r1, [pc, #56]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd0:	6951      	ldr	r1, [r2, #20]
 8001fd2:	0549      	lsls	r1, r1, #21
 8001fd4:	d500      	bpl.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8001fd6:	b923      	cbnz	r3, 8001fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd8:	6953      	ldr	r3, [r2, #20]
 8001fda:	055b      	lsls	r3, r3, #21
 8001fdc:	d5e8      	bpl.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8001fde:	2003      	movs	r0, #3
}
 8001fe0:	4770      	bx	lr
        wait_loop_index--;
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	e7f4      	b.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fea:	bf1f      	itttt	ne
 8001fec:	6813      	ldrne	r3, [r2, #0]
 8001fee:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8001ff2:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8001ff6:	6013      	strne	r3, [r2, #0]
 8001ff8:	e7da      	b.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x14>
 8001ffa:	bf00      	nop
 8001ffc:	40007000 	.word	0x40007000
 8002000:	20000000 	.word	0x20000000
 8002004:	000f4240 	.word	0x000f4240

08002008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002008:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800200a:	4d1e      	ldr	r5, [pc, #120]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800200c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800200e:	00da      	lsls	r2, r3, #3
{
 8002010:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002012:	d518      	bpl.n	8002046 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002014:	f7ff ffba 	bl	8001f8c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002018:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800201c:	d123      	bne.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800201e:	2c80      	cmp	r4, #128	; 0x80
 8002020:	d929      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002022:	2ca0      	cmp	r4, #160	; 0xa0
 8002024:	bf8c      	ite	hi
 8002026:	2002      	movhi	r0, #2
 8002028:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800202c:	6813      	ldr	r3, [r2, #0]
 800202e:	f023 0307 	bic.w	r3, r3, #7
 8002032:	4303      	orrs	r3, r0
 8002034:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002036:	6813      	ldr	r3, [r2, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800203c:	1a18      	subs	r0, r3, r0
 800203e:	bf18      	it	ne
 8002040:	2001      	movne	r0, #1
 8002042:	b003      	add	sp, #12
 8002044:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	65ab      	str	r3, [r5, #88]	; 0x58
 800204e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002058:	f7ff ff98 	bl	8001f8c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800205c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800205e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002062:	65ab      	str	r3, [r5, #88]	; 0x58
 8002064:	e7d8      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002066:	2c80      	cmp	r4, #128	; 0x80
 8002068:	d807      	bhi.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800206a:	d008      	beq.n	800207e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800206c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002070:	4258      	negs	r0, r3
 8002072:	4158      	adcs	r0, r3
 8002074:	e7d9      	b.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002076:	2000      	movs	r0, #0
 8002078:	e7d7      	b.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800207a:	2003      	movs	r0, #3
 800207c:	e7d5      	b.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800207e:	2002      	movs	r0, #2
 8002080:	e7d3      	b.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40022000 	.word	0x40022000

0800208c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_RCC_GetSysClockFreq+0x8c>)
 800208e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002090:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002092:	f012 020c 	ands.w	r2, r2, #12
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x18>
 8002098:	2a0c      	cmp	r2, #12
 800209a:	d115      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020a0:	2901      	cmp	r1, #1
 80020a2:	d118      	bne.n	80020d6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80020a6:	481d      	ldr	r0, [pc, #116]	; (800211c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020aa:	bf55      	itete	pl
 80020ac:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020b2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80020ba:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020be:	b34a      	cbz	r2, 8002114 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020c0:	2a0c      	cmp	r2, #12
 80020c2:	d009      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x4c>
 80020c4:	2000      	movs	r0, #0
  return sysclockfreq;
 80020c6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020c8:	2a04      	cmp	r2, #4
 80020ca:	d022      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020cc:	2a08      	cmp	r2, #8
 80020ce:	4814      	ldr	r0, [pc, #80]	; (8002120 <HAL_RCC_GetSysClockFreq+0x94>)
 80020d0:	bf18      	it	ne
 80020d2:	2000      	movne	r0, #0
 80020d4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020d6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80020de:	2a02      	cmp	r2, #2
 80020e0:	d015      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x82>
 80020e2:	490f      	ldr	r1, [pc, #60]	; (8002120 <HAL_RCC_GetSysClockFreq+0x94>)
 80020e4:	2a03      	cmp	r2, #3
 80020e6:	bf08      	it	eq
 80020e8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020ea:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80020f2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f4:	68d8      	ldr	r0, [r3, #12]
 80020f6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020fa:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020fe:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002100:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002102:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002104:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002108:	fbb2 f0f0 	udiv	r0, r2, r0
 800210c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <HAL_RCC_GetSysClockFreq+0x98>)
 8002110:	e7eb      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002112:	4804      	ldr	r0, [pc, #16]	; (8002124 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	0800844c 	.word	0x0800844c
 8002120:	007a1200 	.word	0x007a1200
 8002124:	00f42400 	.word	0x00f42400

08002128 <HAL_RCC_OscConfig>:
{
 8002128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800212c:	4605      	mov	r5, r0
 800212e:	b918      	cbnz	r0, 8002138 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002130:	2001      	movs	r0, #1
}
 8002132:	b003      	add	sp, #12
 8002134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002138:	4c92      	ldr	r4, [pc, #584]	; (8002384 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800213a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002140:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002142:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002146:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800214a:	d53d      	bpl.n	80021c8 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214c:	b11e      	cbz	r6, 8002156 <HAL_RCC_OscConfig+0x2e>
 800214e:	2e0c      	cmp	r6, #12
 8002150:	d166      	bne.n	8002220 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002152:	2f01      	cmp	r7, #1
 8002154:	d164      	bne.n	8002220 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	0799      	lsls	r1, r3, #30
 800215a:	d502      	bpl.n	8002162 <HAL_RCC_OscConfig+0x3a>
 800215c:	69ab      	ldr	r3, [r5, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0e6      	beq.n	8002130 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	6a28      	ldr	r0, [r5, #32]
 8002166:	071a      	lsls	r2, r3, #28
 8002168:	bf56      	itet	pl
 800216a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800216e:	6823      	ldrmi	r3, [r4, #0]
 8002170:	091b      	lsrpl	r3, r3, #4
 8002172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002176:	4298      	cmp	r0, r3
 8002178:	d93b      	bls.n	80021f2 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800217a:	f7ff ff45 	bl	8002008 <RCC_SetFlashLatencyFromMSIRange>
 800217e:	2800      	cmp	r0, #0
 8002180:	d1d6      	bne.n	8002130 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	6023      	str	r3, [r4, #0]
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	6a2a      	ldr	r2, [r5, #32]
 800218e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002192:	4313      	orrs	r3, r2
 8002194:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002196:	6863      	ldr	r3, [r4, #4]
 8002198:	69ea      	ldr	r2, [r5, #28]
 800219a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800219e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021a2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a4:	f7ff ff72 	bl	800208c <HAL_RCC_GetSysClockFreq>
 80021a8:	68a3      	ldr	r3, [r4, #8]
 80021aa:	4a77      	ldr	r2, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x260>)
 80021ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	40d8      	lsrs	r0, r3
 80021b8:	4b74      	ldr	r3, [pc, #464]	; (800238c <HAL_RCC_OscConfig+0x264>)
 80021ba:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80021bc:	4b74      	ldr	r3, [pc, #464]	; (8002390 <HAL_RCC_OscConfig+0x268>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	f7ff f98c 	bl	80014dc <HAL_InitTick>
        if(status != HAL_OK)
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d1b4      	bne.n	8002132 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	07d9      	lsls	r1, r3, #31
 80021cc:	d45f      	bmi.n	800228e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	079a      	lsls	r2, r3, #30
 80021d2:	f100 809e 	bmi.w	8002312 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	682b      	ldr	r3, [r5, #0]
 80021d8:	0719      	lsls	r1, r3, #28
 80021da:	f100 80db 	bmi.w	8002394 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	075a      	lsls	r2, r3, #29
 80021e2:	f100 8101 	bmi.w	80023e8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 816a 	bne.w	80024c2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80021ee:	2000      	movs	r0, #0
 80021f0:	e79f      	b.n	8002132 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002200:	4303      	orrs	r3, r0
 8002202:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002204:	6863      	ldr	r3, [r4, #4]
 8002206:	69ea      	ldr	r2, [r5, #28]
 8002208:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800220c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002210:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002212:	2e00      	cmp	r6, #0
 8002214:	d1c6      	bne.n	80021a4 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002216:	f7ff fef7 	bl	8002008 <RCC_SetFlashLatencyFromMSIRange>
 800221a:	2800      	cmp	r0, #0
 800221c:	d0c2      	beq.n	80021a4 <HAL_RCC_OscConfig+0x7c>
 800221e:	e787      	b.n	8002130 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002220:	69ab      	ldr	r3, [r5, #24]
 8002222:	b31b      	cbz	r3, 800226c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800222c:	f7ff f99e 	bl	800156c <HAL_GetTick>
 8002230:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	079b      	lsls	r3, r3, #30
 8002236:	d511      	bpl.n	800225c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6023      	str	r3, [r4, #0]
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	6a2a      	ldr	r2, [r5, #32]
 8002244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002248:	4313      	orrs	r3, r2
 800224a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224c:	6863      	ldr	r3, [r4, #4]
 800224e:	69ea      	ldr	r2, [r5, #28]
 8002250:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002258:	6063      	str	r3, [r4, #4]
 800225a:	e7b5      	b.n	80021c8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225c:	f7ff f986 	bl	800156c <HAL_GetTick>
 8002260:	eba0 0008 	sub.w	r0, r0, r8
 8002264:	2802      	cmp	r0, #2
 8002266:	d9e4      	bls.n	8002232 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002268:	2003      	movs	r0, #3
 800226a:	e762      	b.n	8002132 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002274:	f7ff f97a 	bl	800156c <HAL_GetTick>
 8002278:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	0798      	lsls	r0, r3, #30
 800227e:	d5a3      	bpl.n	80021c8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002280:	f7ff f974 	bl	800156c <HAL_GetTick>
 8002284:	eba0 0008 	sub.w	r0, r0, r8
 8002288:	2802      	cmp	r0, #2
 800228a:	d9f6      	bls.n	800227a <HAL_RCC_OscConfig+0x152>
 800228c:	e7ec      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800228e:	2e08      	cmp	r6, #8
 8002290:	d003      	beq.n	800229a <HAL_RCC_OscConfig+0x172>
 8002292:	2e0c      	cmp	r6, #12
 8002294:	d108      	bne.n	80022a8 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002296:	2f03      	cmp	r7, #3
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	039b      	lsls	r3, r3, #14
 800229e:	d596      	bpl.n	80021ce <HAL_RCC_OscConfig+0xa6>
 80022a0:	686b      	ldr	r3, [r5, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d193      	bne.n	80021ce <HAL_RCC_OscConfig+0xa6>
 80022a6:	e743      	b.n	8002130 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a8:	686b      	ldr	r3, [r5, #4]
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ae:	d110      	bne.n	80022d2 <HAL_RCC_OscConfig+0x1aa>
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022b8:	f7ff f958 	bl	800156c <HAL_GetTick>
 80022bc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	0398      	lsls	r0, r3, #14
 80022c2:	d484      	bmi.n	80021ce <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff f952 	bl	800156c <HAL_GetTick>
 80022c8:	eba0 0008 	sub.w	r0, r0, r8
 80022cc:	2864      	cmp	r0, #100	; 0x64
 80022ce:	d9f6      	bls.n	80022be <HAL_RCC_OscConfig+0x196>
 80022d0:	e7ca      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d6:	d104      	bne.n	80022e2 <HAL_RCC_OscConfig+0x1ba>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022de:	6023      	str	r3, [r4, #0]
 80022e0:	e7e6      	b.n	80022b0 <HAL_RCC_OscConfig+0x188>
 80022e2:	6822      	ldr	r2, [r4, #0]
 80022e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022e8:	6022      	str	r2, [r4, #0]
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022f0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80022f6:	f7ff f939 	bl	800156c <HAL_GetTick>
 80022fa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	0399      	lsls	r1, r3, #14
 8002300:	f57f af65 	bpl.w	80021ce <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff f932 	bl	800156c <HAL_GetTick>
 8002308:	eba0 0008 	sub.w	r0, r0, r8
 800230c:	2864      	cmp	r0, #100	; 0x64
 800230e:	d9f5      	bls.n	80022fc <HAL_RCC_OscConfig+0x1d4>
 8002310:	e7aa      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002312:	2e04      	cmp	r6, #4
 8002314:	d003      	beq.n	800231e <HAL_RCC_OscConfig+0x1f6>
 8002316:	2e0c      	cmp	r6, #12
 8002318:	d110      	bne.n	800233c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800231a:	2f02      	cmp	r7, #2
 800231c:	d10e      	bne.n	800233c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	055a      	lsls	r2, r3, #21
 8002322:	d503      	bpl.n	800232c <HAL_RCC_OscConfig+0x204>
 8002324:	68eb      	ldr	r3, [r5, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f43f af02 	beq.w	8002130 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	6863      	ldr	r3, [r4, #4]
 800232e:	692a      	ldr	r2, [r5, #16]
 8002330:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002334:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002338:	6063      	str	r3, [r4, #4]
 800233a:	e74c      	b.n	80021d6 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233c:	68eb      	ldr	r3, [r5, #12]
 800233e:	b17b      	cbz	r3, 8002360 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002348:	f7ff f910 	bl	800156c <HAL_GetTick>
 800234c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	055b      	lsls	r3, r3, #21
 8002352:	d4eb      	bmi.n	800232c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff f90a 	bl	800156c <HAL_GetTick>
 8002358:	1bc0      	subs	r0, r0, r7
 800235a:	2802      	cmp	r0, #2
 800235c:	d9f7      	bls.n	800234e <HAL_RCC_OscConfig+0x226>
 800235e:	e783      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002366:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002368:	f7ff f900 	bl	800156c <HAL_GetTick>
 800236c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	0558      	lsls	r0, r3, #21
 8002372:	f57f af30 	bpl.w	80021d6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7ff f8f9 	bl	800156c <HAL_GetTick>
 800237a:	1bc0      	subs	r0, r0, r7
 800237c:	2802      	cmp	r0, #2
 800237e:	d9f6      	bls.n	800236e <HAL_RCC_OscConfig+0x246>
 8002380:	e772      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	08008434 	.word	0x08008434
 800238c:	20000000 	.word	0x20000000
 8002390:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002394:	696b      	ldr	r3, [r5, #20]
 8002396:	b19b      	cbz	r3, 80023c0 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002398:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80023a4:	f7ff f8e2 	bl	800156c <HAL_GetTick>
 80023a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023aa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80023ae:	079b      	lsls	r3, r3, #30
 80023b0:	f53f af15 	bmi.w	80021de <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff f8da 	bl	800156c <HAL_GetTick>
 80023b8:	1bc0      	subs	r0, r0, r7
 80023ba:	2802      	cmp	r0, #2
 80023bc:	d9f5      	bls.n	80023aa <HAL_RCC_OscConfig+0x282>
 80023be:	e753      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 80023c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80023cc:	f7ff f8ce 	bl	800156c <HAL_GetTick>
 80023d0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80023d6:	0798      	lsls	r0, r3, #30
 80023d8:	f57f af01 	bpl.w	80021de <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff f8c6 	bl	800156c <HAL_GetTick>
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d9f5      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2aa>
 80023e6:	e73f      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023ea:	00d9      	lsls	r1, r3, #3
 80023ec:	d429      	bmi.n	8002442 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80023f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002400:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002404:	4f89      	ldr	r7, [pc, #548]	; (800262c <HAL_RCC_OscConfig+0x504>)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	05da      	lsls	r2, r3, #23
 800240a:	d51d      	bpl.n	8002448 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	68ab      	ldr	r3, [r5, #8]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d12b      	bne.n	800246a <HAL_RCC_OscConfig+0x342>
 8002412:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800241e:	f7ff f8a5 	bl	800156c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002426:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002428:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800242c:	0798      	lsls	r0, r3, #30
 800242e:	d542      	bpl.n	80024b6 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002430:	f1b8 0f00 	cmp.w	r8, #0
 8002434:	f43f aed7 	beq.w	80021e6 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800243a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002440:	e6d1      	b.n	80021e6 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002442:	f04f 0800 	mov.w	r8, #0
 8002446:	e7dd      	b.n	8002404 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002450:	f7ff f88c 	bl	800156c <HAL_GetTick>
 8002454:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	05db      	lsls	r3, r3, #23
 800245a:	d4d7      	bmi.n	800240c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245c:	f7ff f886 	bl	800156c <HAL_GetTick>
 8002460:	eba0 0009 	sub.w	r0, r0, r9
 8002464:	2802      	cmp	r0, #2
 8002466:	d9f6      	bls.n	8002456 <HAL_RCC_OscConfig+0x32e>
 8002468:	e6fe      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246a:	2b05      	cmp	r3, #5
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x354>
 800246e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800247a:	e7ca      	b.n	8002412 <HAL_RCC_OscConfig+0x2ea>
 800247c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002488:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800248c:	f022 0204 	bic.w	r2, r2, #4
 8002490:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1c2      	bne.n	800241e <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002498:	f7ff f868 	bl	800156c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024a0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024a6:	0799      	lsls	r1, r3, #30
 80024a8:	d5c2      	bpl.n	8002430 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff f85f 	bl	800156c <HAL_GetTick>
 80024ae:	1bc0      	subs	r0, r0, r7
 80024b0:	4548      	cmp	r0, r9
 80024b2:	d9f6      	bls.n	80024a2 <HAL_RCC_OscConfig+0x37a>
 80024b4:	e6d8      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff f859 	bl	800156c <HAL_GetTick>
 80024ba:	1bc0      	subs	r0, r0, r7
 80024bc:	4548      	cmp	r0, r9
 80024be:	d9b3      	bls.n	8002428 <HAL_RCC_OscConfig+0x300>
 80024c0:	e6d2      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	f040 808f 	bne.w	80025e6 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80024c8:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80024cc:	f003 0103 	and.w	r1, r3, #3
 80024d0:	4291      	cmp	r1, r2
 80024d2:	d124      	bne.n	800251e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80024d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024da:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024dc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80024e0:	d11d      	bne.n	800251e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80024e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80024ec:	d117      	bne.n	800251e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024ee:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80024f0:	3a07      	subs	r2, #7
 80024f2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80024f6:	bf18      	it	ne
 80024f8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fa:	4291      	cmp	r1, r2
 80024fc:	d10f      	bne.n	800251e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024fe:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002500:	0852      	lsrs	r2, r2, #1
 8002502:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002506:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002508:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800250c:	d107      	bne.n	800251e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800250e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002510:	0852      	lsrs	r2, r2, #1
 8002512:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002516:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002518:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800251c:	d04a      	beq.n	80025b4 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251e:	2e0c      	cmp	r6, #12
 8002520:	f43f ae06 	beq.w	8002130 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	f53f ae02 	bmi.w	8002130 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	f53f adfe 	bmi.w	8002130 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800253a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800253c:	f7ff f816 	bl	800156c <HAL_GetTick>
 8002540:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	019f      	lsls	r7, r3, #6
 8002546:	d42f      	bmi.n	80025a8 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002548:	68e2      	ldr	r2, [r4, #12]
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x508>)
 800254c:	4013      	ands	r3, r2
 800254e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002550:	4313      	orrs	r3, r2
 8002552:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002554:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002558:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800255a:	3a01      	subs	r2, #1
 800255c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002560:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002562:	0912      	lsrs	r2, r2, #4
 8002564:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002568:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800256a:	0852      	lsrs	r2, r2, #1
 800256c:	3a01      	subs	r2, #1
 800256e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002572:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002574:	0852      	lsrs	r2, r2, #1
 8002576:	3a01      	subs	r2, #1
 8002578:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800257c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002584:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002586:	68e3      	ldr	r3, [r4, #12]
 8002588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800258e:	f7fe ffed 	bl	800156c <HAL_GetTick>
 8002592:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	0198      	lsls	r0, r3, #6
 8002598:	f53f ae29 	bmi.w	80021ee <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe ffe6 	bl	800156c <HAL_GetTick>
 80025a0:	1b40      	subs	r0, r0, r5
 80025a2:	2802      	cmp	r0, #2
 80025a4:	d9f6      	bls.n	8002594 <HAL_RCC_OscConfig+0x46c>
 80025a6:	e65f      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe ffe0 	bl	800156c <HAL_GetTick>
 80025ac:	1b80      	subs	r0, r0, r6
 80025ae:	2802      	cmp	r0, #2
 80025b0:	d9c7      	bls.n	8002542 <HAL_RCC_OscConfig+0x41a>
 80025b2:	e659      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	0199      	lsls	r1, r3, #6
 80025b8:	f53f ae19 	bmi.w	80021ee <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c4:	68e3      	ldr	r3, [r4, #12]
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ca:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80025cc:	f7fe ffce 	bl	800156c <HAL_GetTick>
 80025d0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	019a      	lsls	r2, r3, #6
 80025d6:	f53f ae0a 	bmi.w	80021ee <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7fe ffc7 	bl	800156c <HAL_GetTick>
 80025de:	1b40      	subs	r0, r0, r5
 80025e0:	2802      	cmp	r0, #2
 80025e2:	d9f6      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
 80025e4:	e640      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e6:	2e0c      	cmp	r6, #12
 80025e8:	f43f ada2 	beq.w	8002130 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f2:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025fa:	bf02      	ittt	eq
 80025fc:	68e3      	ldreq	r3, [r4, #12]
 80025fe:	f023 0303 	biceq.w	r3, r3, #3
 8002602:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002604:	68e3      	ldr	r3, [r4, #12]
 8002606:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002610:	f7fe ffac 	bl	800156c <HAL_GetTick>
 8002614:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	019b      	lsls	r3, r3, #6
 800261a:	f57f ade8 	bpl.w	80021ee <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe ffa5 	bl	800156c <HAL_GetTick>
 8002622:	1b40      	subs	r0, r0, r5
 8002624:	2802      	cmp	r0, #2
 8002626:	d9f6      	bls.n	8002616 <HAL_RCC_OscConfig+0x4ee>
 8002628:	e61e      	b.n	8002268 <HAL_RCC_OscConfig+0x140>
 800262a:	bf00      	nop
 800262c:	40007000 	.word	0x40007000
 8002630:	f99d808c 	.word	0xf99d808c

08002634 <HAL_RCC_ClockConfig>:
{
 8002634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002638:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800263a:	4604      	mov	r4, r0
 800263c:	b910      	cbnz	r0, 8002644 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800263e:	2001      	movs	r0, #1
}
 8002640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4a40      	ldr	r2, [pc, #256]	; (8002748 <HAL_RCC_ClockConfig+0x114>)
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	428b      	cmp	r3, r1
 800264e:	d32a      	bcc.n	80026a6 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	07d9      	lsls	r1, r3, #31
 8002654:	d432      	bmi.n	80026bc <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002656:	6821      	ldr	r1, [r4, #0]
 8002658:	078a      	lsls	r2, r1, #30
 800265a:	d45b      	bmi.n	8002714 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265c:	4a3a      	ldr	r2, [pc, #232]	; (8002748 <HAL_RCC_ClockConfig+0x114>)
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	42ab      	cmp	r3, r5
 8002666:	d85d      	bhi.n	8002724 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	f011 0f04 	tst.w	r1, #4
 800266c:	4d37      	ldr	r5, [pc, #220]	; (800274c <HAL_RCC_ClockConfig+0x118>)
 800266e:	d164      	bne.n	800273a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	070b      	lsls	r3, r1, #28
 8002672:	d506      	bpl.n	8002682 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002674:	68ab      	ldr	r3, [r5, #8]
 8002676:	6922      	ldr	r2, [r4, #16]
 8002678:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800267c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002680:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002682:	f7ff fd03 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002686:	68ab      	ldr	r3, [r5, #8]
 8002688:	4a31      	ldr	r2, [pc, #196]	; (8002750 <HAL_RCC_ClockConfig+0x11c>)
 800268a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800268e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	40d8      	lsrs	r0, r3
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_RCC_ClockConfig+0x120>)
 800269c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <HAL_RCC_ClockConfig+0x124>)
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f7fe bf1b 	b.w	80014dc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	f023 0307 	bic.w	r3, r3, #7
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	428b      	cmp	r3, r1
 80026b8:	d1c1      	bne.n	800263e <HAL_RCC_ClockConfig+0xa>
 80026ba:	e7c9      	b.n	8002650 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026bc:	6862      	ldr	r2, [r4, #4]
 80026be:	4e23      	ldr	r6, [pc, #140]	; (800274c <HAL_RCC_ClockConfig+0x118>)
 80026c0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c2:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c4:	d11a      	bne.n	80026fc <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ca:	d0b8      	beq.n	800263e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026cc:	68b3      	ldr	r3, [r6, #8]
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80026d6:	f7fe ff49 	bl	800156c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80026de:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e0:	68b3      	ldr	r3, [r6, #8]
 80026e2:	6862      	ldr	r2, [r4, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026ec:	d0b3      	beq.n	8002656 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ee:	f7fe ff3d 	bl	800156c <HAL_GetTick>
 80026f2:	1bc0      	subs	r0, r0, r7
 80026f4:	4540      	cmp	r0, r8
 80026f6:	d9f3      	bls.n	80026e0 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80026f8:	2003      	movs	r0, #3
 80026fa:	e7a1      	b.n	8002640 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fc:	2a02      	cmp	r2, #2
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002700:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002704:	e7e1      	b.n	80026ca <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002706:	b912      	cbnz	r2, 800270e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002708:	f013 0f02 	tst.w	r3, #2
 800270c:	e7dd      	b.n	80026ca <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002712:	e7da      	b.n	80026ca <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_RCC_ClockConfig+0x118>)
 8002716:	68a0      	ldr	r0, [r4, #8]
 8002718:	6893      	ldr	r3, [r2, #8]
 800271a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800271e:	4303      	orrs	r3, r0
 8002720:	6093      	str	r3, [r2, #8]
 8002722:	e79b      	b.n	800265c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	432b      	orrs	r3, r5
 800272c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	6813      	ldr	r3, [r2, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	42ab      	cmp	r3, r5
 8002736:	d182      	bne.n	800263e <HAL_RCC_ClockConfig+0xa>
 8002738:	e796      	b.n	8002668 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273a:	68ab      	ldr	r3, [r5, #8]
 800273c:	68e2      	ldr	r2, [r4, #12]
 800273e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002742:	4313      	orrs	r3, r2
 8002744:	60ab      	str	r3, [r5, #8]
 8002746:	e793      	b.n	8002670 <HAL_RCC_ClockConfig+0x3c>
 8002748:	40022000 	.word	0x40022000
 800274c:	40021000 	.word	0x40021000
 8002750:	08008434 	.word	0x08008434
 8002754:	20000000 	.word	0x20000000
 8002758:	20000008 	.word	0x20000008

0800275c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x18>)
 800275e:	4a06      	ldr	r2, [pc, #24]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_RCC_GetPCLK1Freq+0x20>)
 800276a:	6810      	ldr	r0, [r2, #0]
 800276c:	f003 031f 	and.w	r3, r3, #31
}
 8002770:	40d8      	lsrs	r0, r3
 8002772:	4770      	bx	lr
 8002774:	40021000 	.word	0x40021000
 8002778:	08008444 	.word	0x08008444
 800277c:	20000000 	.word	0x20000000

08002780 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002782:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800278a:	5cd3      	ldrb	r3, [r2, r3]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800278e:	6810      	ldr	r0, [r2, #0]
 8002790:	f003 031f 	and.w	r3, r3, #31
}
 8002794:	40d8      	lsrs	r0, r3
 8002796:	4770      	bx	lr
 8002798:	40021000 	.word	0x40021000
 800279c:	08008444 	.word	0x08008444
 80027a0:	20000000 	.word	0x20000000

080027a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027a6:	4c43      	ldr	r4, [pc, #268]	; (80028b4 <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027a8:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027aa:	68e2      	ldr	r2, [r4, #12]
{
 80027ac:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ae:	0790      	lsls	r0, r2, #30
{
 80027b0:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027b2:	d029      	beq.n	8002808 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027b4:	68e2      	ldr	r2, [r4, #12]
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d178      	bne.n	80028b0 <RCCEx_PLLSAI1_Config+0x10c>
       ||
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d076      	beq.n	80028b0 <RCCEx_PLLSAI1_Config+0x10c>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027c2:	68e3      	ldr	r3, [r4, #12]
       ||
 80027c4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80027ca:	3301      	adds	r3, #1
       ||
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d16f      	bne.n	80028b0 <RCCEx_PLLSAI1_Config+0x10c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027d6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d8:	f7fe fec8 	bl	800156c <HAL_GetTick>
 80027dc:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	011a      	lsls	r2, r3, #4
 80027e2:	d430      	bmi.n	8002846 <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e4:	68ab      	ldr	r3, [r5, #8]
 80027e6:	021f      	lsls	r7, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80027e8:	b3a6      	cbz	r6, 8002854 <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027ea:	2e01      	cmp	r6, #1
 80027ec:	d14d      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ee:	692a      	ldr	r2, [r5, #16]
 80027f0:	6921      	ldr	r1, [r4, #16]
 80027f2:	0852      	lsrs	r2, r2, #1
 80027f4:	1e53      	subs	r3, r2, #1
 80027f6:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80027fa:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80027fe:	433a      	orrs	r2, r7
 8002800:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8002804:	6122      	str	r2, [r4, #16]
 8002806:	e030      	b.n	800286a <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 8002808:	2b02      	cmp	r3, #2
 800280a:	d011      	beq.n	8002830 <RCCEx_PLLSAI1_Config+0x8c>
 800280c:	2b03      	cmp	r3, #3
 800280e:	d013      	beq.n	8002838 <RCCEx_PLLSAI1_Config+0x94>
 8002810:	2b01      	cmp	r3, #1
 8002812:	d14d      	bne.n	80028b0 <RCCEx_PLLSAI1_Config+0x10c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800281a:	d049      	beq.n	80028b0 <RCCEx_PLLSAI1_Config+0x10c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800281c:	68e0      	ldr	r0, [r4, #12]
 800281e:	686a      	ldr	r2, [r5, #4]
 8002820:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8002824:	3a01      	subs	r2, #1
 8002826:	4318      	orrs	r0, r3
 8002828:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800282c:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800282e:	e7cf      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002836:	e7f0      	b.n	800281a <RCCEx_PLLSAI1_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	0391      	lsls	r1, r2, #14
 800283c:	d4ee      	bmi.n	800281c <RCCEx_PLLSAI1_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002844:	e7e9      	b.n	800281a <RCCEx_PLLSAI1_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002846:	f7fe fe91 	bl	800156c <HAL_GetTick>
 800284a:	1bc0      	subs	r0, r0, r7
 800284c:	2802      	cmp	r0, #2
 800284e:	d9c6      	bls.n	80027de <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8002850:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002854:	6921      	ldr	r1, [r4, #16]
 8002856:	68eb      	ldr	r3, [r5, #12]
 8002858:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800285c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	4339      	orrs	r1, r7
 8002864:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002868:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002870:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002872:	f7fe fe7b 	bl	800156c <HAL_GetTick>
 8002876:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	d512      	bpl.n	80028a4 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800287e:	6923      	ldr	r3, [r4, #16]
 8002880:	69aa      	ldr	r2, [r5, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	6123      	str	r3, [r4, #16]
 8002886:	2000      	movs	r0, #0
  return status;
 8002888:	e7e3      	b.n	8002852 <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800288a:	696b      	ldr	r3, [r5, #20]
 800288c:	6922      	ldr	r2, [r4, #16]
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	1e59      	subs	r1, r3, #1
 8002892:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8002896:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800289a:	433b      	orrs	r3, r7
 800289c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80028a0:	6123      	str	r3, [r4, #16]
 80028a2:	e7e2      	b.n	800286a <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a4:	f7fe fe62 	bl	800156c <HAL_GetTick>
 80028a8:	1b80      	subs	r0, r0, r6
 80028aa:	2802      	cmp	r0, #2
 80028ac:	d9e4      	bls.n	8002878 <RCCEx_PLLSAI1_Config+0xd4>
 80028ae:	e7cf      	b.n	8002850 <RCCEx_PLLSAI1_Config+0xac>
      status = HAL_ERROR;
 80028b0:	2001      	movs	r0, #1
 80028b2:	e7ce      	b.n	8002852 <RCCEx_PLLSAI1_Config+0xae>
 80028b4:	40021000 	.word	0x40021000

080028b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ba:	4c3c      	ldr	r4, [pc, #240]	; (80029ac <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028bc:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028be:	68e2      	ldr	r2, [r4, #12]
{
 80028c0:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028c2:	0790      	lsls	r0, r2, #30
{
 80028c4:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028c6:	d027      	beq.n	8002918 <RCCEx_PLLSAI2_Config+0x60>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028c8:	68e2      	ldr	r2, [r4, #12]
 80028ca:	f002 0203 	and.w	r2, r2, #3
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d169      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0xee>
       ||
 80028d2:	2a00      	cmp	r2, #0
 80028d4:	d067      	beq.n	80029a6 <RCCEx_PLLSAI2_Config+0xee>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028d6:	68e3      	ldr	r3, [r4, #12]
       ||
 80028d8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028de:	3301      	adds	r3, #1
       ||
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d160      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0xee>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe fe3e 	bl	800156c <HAL_GetTick>
 80028f0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	009a      	lsls	r2, r3, #2
 80028f6:	d42e      	bmi.n	8002956 <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f8:	68ab      	ldr	r3, [r5, #8]
 80028fa:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80028fc:	b396      	cbz	r6, 8002964 <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028fe:	6963      	ldr	r3, [r4, #20]
 8002900:	6929      	ldr	r1, [r5, #16]
 8002902:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002906:	0849      	lsrs	r1, r1, #1
 8002908:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800290c:	3901      	subs	r1, #1
 800290e:	4303      	orrs	r3, r0
 8002910:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002914:	6163      	str	r3, [r4, #20]
 8002916:	e030      	b.n	800297a <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8002918:	2b02      	cmp	r3, #2
 800291a:	d011      	beq.n	8002940 <RCCEx_PLLSAI2_Config+0x88>
 800291c:	2b03      	cmp	r3, #3
 800291e:	d013      	beq.n	8002948 <RCCEx_PLLSAI2_Config+0x90>
 8002920:	2b01      	cmp	r3, #1
 8002922:	d140      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0xee>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800292a:	d03c      	beq.n	80029a6 <RCCEx_PLLSAI2_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800292c:	68e0      	ldr	r0, [r4, #12]
 800292e:	686a      	ldr	r2, [r5, #4]
 8002930:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8002934:	3a01      	subs	r2, #1
 8002936:	4318      	orrs	r0, r3
 8002938:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800293c:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800293e:	e7d1      	b.n	80028e4 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002940:	6822      	ldr	r2, [r4, #0]
 8002942:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002946:	e7f0      	b.n	800292a <RCCEx_PLLSAI2_Config+0x72>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002948:	6822      	ldr	r2, [r4, #0]
 800294a:	0391      	lsls	r1, r2, #14
 800294c:	d4ee      	bmi.n	800292c <RCCEx_PLLSAI2_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800294e:	6822      	ldr	r2, [r4, #0]
 8002950:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002954:	e7e9      	b.n	800292a <RCCEx_PLLSAI2_Config+0x72>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002956:	f7fe fe09 	bl	800156c <HAL_GetTick>
 800295a:	1bc0      	subs	r0, r0, r7
 800295c:	2802      	cmp	r0, #2
 800295e:	d9c8      	bls.n	80028f2 <RCCEx_PLLSAI2_Config+0x3a>
        status = HAL_TIMEOUT;
 8002960:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002964:	6962      	ldr	r2, [r4, #20]
 8002966:	68eb      	ldr	r3, [r5, #12]
 8002968:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800296c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	4302      	orrs	r2, r0
 8002974:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002978:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002982:	f7fe fdf3 	bl	800156c <HAL_GetTick>
 8002986:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	d505      	bpl.n	800299a <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800298e:	6963      	ldr	r3, [r4, #20]
 8002990:	696a      	ldr	r2, [r5, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	6163      	str	r3, [r4, #20]
 8002996:	2000      	movs	r0, #0
  return status;
 8002998:	e7e3      	b.n	8002962 <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800299a:	f7fe fde7 	bl	800156c <HAL_GetTick>
 800299e:	1b80      	subs	r0, r0, r6
 80029a0:	2802      	cmp	r0, #2
 80029a2:	d9f1      	bls.n	8002988 <RCCEx_PLLSAI2_Config+0xd0>
 80029a4:	e7dc      	b.n	8002960 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 80029a6:	2001      	movs	r0, #1
 80029a8:	e7db      	b.n	8002962 <RCCEx_PLLSAI2_Config+0xaa>
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80029b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029b4:	6806      	ldr	r6, [r0, #0]
 80029b6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80029ba:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029bc:	d009      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80029be:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80029c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80029c4:	d022      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80029c6:	d813      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80029c8:	b331      	cbz	r1, 8002a18 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80029ca:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80029ce:	d02a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029d0:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	04d8      	lsls	r0, r3, #19
 80029d6:	d509      	bpl.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80029d8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80029da:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80029de:	d02c      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80029e0:	d826      	bhi.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80029e2:	b381      	cbz	r1, 8002a46 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80029e4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80029e8:	d070      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80029ea:	2601      	movs	r6, #1
 80029ec:	4635      	mov	r5, r6
 80029ee:	e039      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80029f0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80029f4:	d1ec      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f6:	4a3b      	ldr	r2, [pc, #236]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029f8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80029fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a02:	430b      	orrs	r3, r1
 8002a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002a08:	2600      	movs	r6, #0
 8002a0a:	e7e2      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a0c:	4a35      	ldr	r2, [pc, #212]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a0e:	68d3      	ldr	r3, [r2, #12]
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002a16:	e7ee      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a18:	3004      	adds	r0, #4
 8002a1a:	f7ff fec3 	bl	80027a4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a1e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d1d6      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002a24:	e7e7      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a26:	2100      	movs	r1, #0
 8002a28:	3020      	adds	r0, #32
 8002a2a:	f7ff ff45 	bl	80028b8 <RCCEx_PLLSAI2_Config>
 8002a2e:	e7f6      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002a30:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002a34:	d1d9      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002a36:	4635      	mov	r5, r6
 8002a38:	e009      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a3c:	68d3      	ldr	r3, [r2, #12]
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a42:	60d3      	str	r3, [r2, #12]
      break;
 8002a44:	e7f7      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a46:	1d20      	adds	r0, r4, #4
 8002a48:	f7ff feac 	bl	80027a4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a4c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002a4e:	2d00      	cmp	r5, #0
 8002a50:	d142      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a54:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002a56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a5a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	0399      	lsls	r1, r3, #14
 8002a68:	f140 815e 	bpl.w	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a6c:	4f1d      	ldr	r7, [pc, #116]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a70:	00da      	lsls	r2, r3, #3
 8002a72:	d433      	bmi.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a86:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8002a8e:	f8d9 3000 	ldr.w	r3, [r9]
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fd67 	bl	800156c <HAL_GetTick>
 8002a9e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aa0:	f8d9 3000 	ldr.w	r3, [r9]
 8002aa4:	05db      	lsls	r3, r3, #23
 8002aa6:	d521      	bpl.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 8002aa8:	bb3d      	cbnz	r5, 8002afa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002ab2:	f040 810f 	bne.w	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ac8:	4635      	mov	r5, r6
 8002aca:	e016      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002acc:	2100      	movs	r1, #0
 8002ace:	f104 0020 	add.w	r0, r4, #32
 8002ad2:	f7ff fef1 	bl	80028b8 <RCCEx_PLLSAI2_Config>
 8002ad6:	e7b9      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002ad8:	462e      	mov	r6, r5
 8002ada:	e7c3      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8002adc:	f04f 0800 	mov.w	r8, #0
 8002ae0:	e7d3      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aec:	f7fe fd3e 	bl	800156c <HAL_GetTick>
 8002af0:	eba0 000a 	sub.w	r0, r0, sl
 8002af4:	2802      	cmp	r0, #2
 8002af6:	d9d3      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002af8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002afa:	f1b8 0f00 	cmp.w	r8, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b06:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	07da      	lsls	r2, r3, #31
 8002b0c:	d508      	bpl.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0e:	499d      	ldr	r1, [pc, #628]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002b10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b16:	f022 0203 	bic.w	r2, r2, #3
 8002b1a:	4302      	orrs	r2, r0
 8002b1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b20:	079f      	lsls	r7, r3, #30
 8002b22:	d508      	bpl.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b24:	4997      	ldr	r1, [pc, #604]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002b26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b2c:	f022 020c 	bic.w	r2, r2, #12
 8002b30:	4302      	orrs	r2, r0
 8002b32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b36:	075e      	lsls	r6, r3, #29
 8002b38:	d508      	bpl.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b3a:	4992      	ldr	r1, [pc, #584]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002b3c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002b3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b42:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002b46:	4302      	orrs	r2, r0
 8002b48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b4c:	0718      	lsls	r0, r3, #28
 8002b4e:	d508      	bpl.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b50:	498c      	ldr	r1, [pc, #560]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002b52:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002b54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b58:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002b5c:	4302      	orrs	r2, r0
 8002b5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b62:	06d9      	lsls	r1, r3, #27
 8002b64:	d508      	bpl.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b66:	4987      	ldr	r1, [pc, #540]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002b68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002b6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b72:	4302      	orrs	r2, r0
 8002b74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b78:	069a      	lsls	r2, r3, #26
 8002b7a:	d508      	bpl.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b7c:	4981      	ldr	r1, [pc, #516]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002b7e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b88:	4302      	orrs	r2, r0
 8002b8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b8e:	059f      	lsls	r7, r3, #22
 8002b90:	d508      	bpl.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b92:	497c      	ldr	r1, [pc, #496]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002b94:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002b96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b9a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ba4:	055e      	lsls	r6, r3, #21
 8002ba6:	d508      	bpl.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ba8:	4976      	ldr	r1, [pc, #472]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002baa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002bac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bb0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002bb4:	4302      	orrs	r2, r0
 8002bb6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bba:	0658      	lsls	r0, r3, #25
 8002bbc:	d508      	bpl.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bbe:	4971      	ldr	r1, [pc, #452]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002bc0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002bc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bc6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002bca:	4302      	orrs	r2, r0
 8002bcc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bd0:	0619      	lsls	r1, r3, #24
 8002bd2:	d508      	bpl.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd4:	496b      	ldr	r1, [pc, #428]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002bd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bdc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002be0:	4302      	orrs	r2, r0
 8002be2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be6:	05da      	lsls	r2, r3, #23
 8002be8:	d508      	bpl.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bea:	4966      	ldr	r1, [pc, #408]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bf2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002bf6:	4302      	orrs	r2, r0
 8002bf8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bfc:	049b      	lsls	r3, r3, #18
 8002bfe:	d510      	bpl.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c00:	4a60      	ldr	r2, [pc, #384]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c02:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002c04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c08:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c0c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c0e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c16:	f040 8089 	bne.w	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1a:	68d3      	ldr	r3, [r2, #12]
 8002c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c20:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	031f      	lsls	r7, r3, #12
 8002c26:	d510      	bpl.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c28:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c2a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002c2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c30:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c34:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c36:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c3e:	f040 8081 	bne.w	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c42:	68d3      	ldr	r3, [r2, #12]
 8002c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c48:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	035e      	lsls	r6, r3, #13
 8002c4e:	d50f      	bpl.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c50:	4a4c      	ldr	r2, [pc, #304]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c52:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002c54:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c58:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c5c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c5e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c66:	d179      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c68:	68d3      	ldr	r3, [r2, #12]
 8002c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	0458      	lsls	r0, r3, #17
 8002c74:	d512      	bpl.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c76:	4943      	ldr	r1, [pc, #268]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c78:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002c7a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c7e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002c82:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c84:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c8c:	d171      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c8e:	2102      	movs	r1, #2
 8002c90:	1d20      	adds	r0, r4, #4
 8002c92:	f7ff fd87 	bl	80027a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c96:	2800      	cmp	r0, #0
 8002c98:	bf18      	it	ne
 8002c9a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c9c:	6822      	ldr	r2, [r4, #0]
 8002c9e:	0411      	lsls	r1, r2, #16
 8002ca0:	d508      	bpl.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ca2:	4938      	ldr	r1, [pc, #224]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002ca4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002ca6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002caa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cae:	4303      	orrs	r3, r0
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cb4:	03d3      	lsls	r3, r2, #15
 8002cb6:	d509      	bpl.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cb8:	4a32      	ldr	r2, [pc, #200]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002cba:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002cbe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002ccc:	4628      	mov	r0, r5
 8002cce:	b002      	add	sp, #8
 8002cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cd4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	f43f aeec 	beq.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cde:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cf2:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cfa:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002d00:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d04:	f57f aed7 	bpl.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002d08:	f7fe fc30 	bl	800156c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d10:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d16:	0799      	lsls	r1, r3, #30
 8002d18:	f53f aecd 	bmi.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fc26 	bl	800156c <HAL_GetTick>
 8002d20:	1b40      	subs	r0, r0, r5
 8002d22:	4548      	cmp	r0, r9
 8002d24:	d9f5      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002d26:	e6e7      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002d28:	4635      	mov	r5, r6
 8002d2a:	e6ed      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d2c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002d30:	f47f af77 	bne.w	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x272>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d34:	2101      	movs	r1, #1
 8002d36:	1d20      	adds	r0, r4, #4
 8002d38:	f7ff fd34 	bl	80027a4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	bf18      	it	ne
 8002d40:	4605      	movne	r5, r0
 8002d42:	e76e      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d44:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002d48:	f47f af7f 	bne.w	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	1d20      	adds	r0, r4, #4
 8002d50:	f7ff fd28 	bl	80027a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d54:	2800      	cmp	r0, #0
 8002d56:	bf18      	it	ne
 8002d58:	4605      	movne	r5, r0
 8002d5a:	e776      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d5c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002d60:	d186      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d62:	2101      	movs	r1, #1
 8002d64:	1d20      	adds	r0, r4, #4
 8002d66:	f7ff fd1d 	bl	80027a4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	bf18      	it	ne
 8002d6e:	4605      	movne	r5, r0
 8002d70:	e77e      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d72:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002d76:	d191      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d78:	2102      	movs	r1, #2
 8002d7a:	f104 0020 	add.w	r0, r4, #32
 8002d7e:	f7ff fd9b 	bl	80028b8 <RCCEx_PLLSAI2_Config>
 8002d82:	e788      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002d84:	40021000 	.word	0x40021000

08002d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d8c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d8e:	6921      	ldr	r1, [r4, #16]
 8002d90:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d92:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d94:	69c0      	ldr	r0, [r0, #28]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	6961      	ldr	r1, [r4, #20]
 8002d9a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d9c:	4990      	ldr	r1, [pc, #576]	; (8002fe0 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d9e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da0:	4029      	ands	r1, r5
 8002da2:	430a      	orrs	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68e1      	ldr	r1, [r4, #12]
 8002daa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db2:	4a8c      	ldr	r2, [pc, #560]	; (8002fe4 <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db6:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002db8:	bf1c      	itt	ne
 8002dba:	6a22      	ldrne	r2, [r4, #32]
 8002dbc:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc8:	4a87      	ldr	r2, [pc, #540]	; (8002fe8 <UART_SetConfig+0x260>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d117      	bne.n	8002dfe <UART_SetConfig+0x76>
 8002dce:	4b87      	ldr	r3, [pc, #540]	; (8002fec <UART_SetConfig+0x264>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	f200 80d0 	bhi.w	8002f80 <UART_SetConfig+0x1f8>
 8002de0:	4a83      	ldr	r2, [pc, #524]	; (8002ff0 <UART_SetConfig+0x268>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002de8:	f040 8099 	bne.w	8002f1e <UART_SetConfig+0x196>
  {
    switch (clocksource)
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d822      	bhi.n	8002e36 <UART_SetConfig+0xae>
 8002df0:	e8df f003 	tbb	[pc, r3]
 8002df4:	2193c9da 	.word	0x2193c9da
 8002df8:	212121cf 	.word	0x212121cf
 8002dfc:	de          	.byte	0xde
 8002dfd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ff4 <UART_SetConfig+0x26c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d106      	bne.n	8002e12 <UART_SetConfig+0x8a>
 8002e04:	4b79      	ldr	r3, [pc, #484]	; (8002fec <UART_SetConfig+0x264>)
 8002e06:	4a7c      	ldr	r2, [pc, #496]	; (8002ff8 <UART_SetConfig+0x270>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	e7e7      	b.n	8002de2 <UART_SetConfig+0x5a>
 8002e12:	4a7a      	ldr	r2, [pc, #488]	; (8002ffc <UART_SetConfig+0x274>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d119      	bne.n	8002e4c <UART_SetConfig+0xc4>
 8002e18:	4b74      	ldr	r3, [pc, #464]	; (8002fec <UART_SetConfig+0x264>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	f000 80b8 	beq.w	8002f98 <UART_SetConfig+0x210>
 8002e28:	d807      	bhi.n	8002e3a <UART_SetConfig+0xb2>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80b9 	beq.w	8002fa2 <UART_SetConfig+0x21a>
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	f000 80ab 	beq.w	8002f8c <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e36:	2001      	movs	r0, #1
 8002e38:	e04e      	b.n	8002ed8 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e3a:	2b30      	cmp	r3, #48	; 0x30
 8002e3c:	d1fb      	bne.n	8002e36 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e42:	f000 80b5 	beq.w	8002fb0 <UART_SetConfig+0x228>
 8002e46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e4a:	e083      	b.n	8002f54 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e4c:	4a6c      	ldr	r2, [pc, #432]	; (8003000 <UART_SetConfig+0x278>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10f      	bne.n	8002e72 <UART_SetConfig+0xea>
 8002e52:	4b66      	ldr	r3, [pc, #408]	; (8002fec <UART_SetConfig+0x264>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	f000 809b 	beq.w	8002f98 <UART_SetConfig+0x210>
 8002e62:	d804      	bhi.n	8002e6e <UART_SetConfig+0xe6>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 809c 	beq.w	8002fa2 <UART_SetConfig+0x21a>
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	e7e1      	b.n	8002e32 <UART_SetConfig+0xaa>
 8002e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e70:	e7e4      	b.n	8002e3c <UART_SetConfig+0xb4>
 8002e72:	4a64      	ldr	r2, [pc, #400]	; (8003004 <UART_SetConfig+0x27c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d112      	bne.n	8002e9e <UART_SetConfig+0x116>
 8002e78:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <UART_SetConfig+0x264>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e86:	f000 8087 	beq.w	8002f98 <UART_SetConfig+0x210>
 8002e8a:	d805      	bhi.n	8002e98 <UART_SetConfig+0x110>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8088 	beq.w	8002fa2 <UART_SetConfig+0x21a>
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e96:	e7cc      	b.n	8002e32 <UART_SetConfig+0xaa>
 8002e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e9c:	e7ce      	b.n	8002e3c <UART_SetConfig+0xb4>
 8002e9e:	4a51      	ldr	r2, [pc, #324]	; (8002fe4 <UART_SetConfig+0x25c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d1c8      	bne.n	8002e36 <UART_SetConfig+0xae>
 8002ea4:	4b51      	ldr	r3, [pc, #324]	; (8002fec <UART_SetConfig+0x264>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb2:	d015      	beq.n	8002ee0 <UART_SetConfig+0x158>
 8002eb4:	d806      	bhi.n	8002ec4 <UART_SetConfig+0x13c>
 8002eb6:	b15b      	cbz	r3, 8002ed0 <UART_SetConfig+0x148>
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d1bb      	bne.n	8002e36 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ebe:	f7ff f8e5 	bl	800208c <HAL_RCC_GetSysClockFreq>
        break;
 8002ec2:	e007      	b.n	8002ed4 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec8:	d1b5      	bne.n	8002e36 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002eca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ece:	e008      	b.n	8002ee2 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f7ff fc44 	bl	800275c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ed4:	b928      	cbnz	r0, 8002ee2 <UART_SetConfig+0x15a>
 8002ed6:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ed8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002eda:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002ee0:	4849      	ldr	r0, [pc, #292]	; (8003008 <UART_SetConfig+0x280>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ee2:	6862      	ldr	r2, [r4, #4]
 8002ee4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002ee8:	4283      	cmp	r3, r0
 8002eea:	d8a4      	bhi.n	8002e36 <UART_SetConfig+0xae>
 8002eec:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002ef0:	d8a1      	bhi.n	8002e36 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ef2:	0851      	lsrs	r1, r2, #1
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	468c      	mov	ip, r1
 8002ef8:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002efc:	4629      	mov	r1, r5
 8002efe:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002f02:	462b      	mov	r3, r5
 8002f04:	4660      	mov	r0, ip
 8002f06:	f7fd fe9f 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f0a:	4b40      	ldr	r3, [pc, #256]	; (800300c <UART_SetConfig+0x284>)
 8002f0c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d890      	bhi.n	8002e36 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	60d8      	str	r0, [r3, #12]
 8002f18:	e7dd      	b.n	8002ed6 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8002f1a:	483b      	ldr	r0, [pc, #236]	; (8003008 <UART_SetConfig+0x280>)
 8002f1c:	e048      	b.n	8002fb0 <UART_SetConfig+0x228>
    switch (clocksource)
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d889      	bhi.n	8002e36 <UART_SetConfig+0xae>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <UART_SetConfig+0x1a0>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f4d 	.word	0x08002f4d
 8002f2c:	08002f75 	.word	0x08002f75
 8002f30:	08002f9f 	.word	0x08002f9f
 8002f34:	08002e37 	.word	0x08002e37
 8002f38:	08002f7b 	.word	0x08002f7b
 8002f3c:	08002e37 	.word	0x08002e37
 8002f40:	08002e37 	.word	0x08002e37
 8002f44:	08002e37 	.word	0x08002e37
 8002f48:	08002e47 	.word	0x08002e47
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f4c:	f7ff fc06 	bl	800275c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f50:	2800      	cmp	r0, #0
 8002f52:	d0c0      	beq.n	8002ed6 <UART_SetConfig+0x14e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f54:	6862      	ldr	r2, [r4, #4]
 8002f56:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f5e:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f60:	f1a3 0110 	sub.w	r1, r3, #16
 8002f64:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002f68:	4291      	cmp	r1, r2
 8002f6a:	f63f af64 	bhi.w	8002e36 <UART_SetConfig+0xae>
        huart->Instance->BRR = usartdiv;
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	60d3      	str	r3, [r2, #12]
 8002f72:	e7b0      	b.n	8002ed6 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f74:	f7ff fc04 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
        break;
 8002f78:	e7ea      	b.n	8002f50 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7a:	f7ff f887 	bl	800208c <HAL_RCC_GetSysClockFreq>
        break;
 8002f7e:	e7e7      	b.n	8002f50 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f80:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f84:	d1f6      	bne.n	8002f74 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f86:	f7ff fbfb 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
        break;
 8002f8a:	e00f      	b.n	8002fac <UART_SetConfig+0x224>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f90:	d1f3      	bne.n	8002f7a <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f92:	f7ff f87b 	bl	800208c <HAL_RCC_GetSysClockFreq>
        break;
 8002f96:	e009      	b.n	8002fac <UART_SetConfig+0x224>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f9c:	d0bd      	beq.n	8002f1a <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8002f9e:	481a      	ldr	r0, [pc, #104]	; (8003008 <UART_SetConfig+0x280>)
 8002fa0:	e7d8      	b.n	8002f54 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002fa6:	d1d1      	bne.n	8002f4c <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa8:	f7ff fbd8 	bl	800275c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d092      	beq.n	8002ed6 <UART_SetConfig+0x14e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fb0:	6862      	ldr	r2, [r4, #4]
 8002fb2:	0853      	lsrs	r3, r2, #1
 8002fb4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002fb8:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fbc:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fbe:	f1a3 0110 	sub.w	r1, r3, #16
 8002fc2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002fc6:	4291      	cmp	r1, r2
 8002fc8:	f63f af35 	bhi.w	8002e36 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fcc:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8002fd0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fd2:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fd4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002fd8:	4318      	orrs	r0, r3
 8002fda:	60d0      	str	r0, [r2, #12]
 8002fdc:	e77b      	b.n	8002ed6 <UART_SetConfig+0x14e>
 8002fde:	bf00      	nop
 8002fe0:	efff69f3 	.word	0xefff69f3
 8002fe4:	40008000 	.word	0x40008000
 8002fe8:	40013800 	.word	0x40013800
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	0800847c 	.word	0x0800847c
 8002ff4:	40004400 	.word	0x40004400
 8002ff8:	0800847f 	.word	0x0800847f
 8002ffc:	40004800 	.word	0x40004800
 8003000:	40004c00 	.word	0x40004c00
 8003004:	40005000 	.word	0x40005000
 8003008:	00f42400 	.word	0x00f42400
 800300c:	000ffcff 	.word	0x000ffcff

08003010 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003010:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003012:	07da      	lsls	r2, r3, #31
{
 8003014:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003016:	d506      	bpl.n	8003026 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800301c:	684a      	ldr	r2, [r1, #4]
 800301e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003022:	4322      	orrs	r2, r4
 8003024:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003026:	079c      	lsls	r4, r3, #30
 8003028:	d506      	bpl.n	8003038 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800302a:	6801      	ldr	r1, [r0, #0]
 800302c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800302e:	684a      	ldr	r2, [r1, #4]
 8003030:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003034:	4322      	orrs	r2, r4
 8003036:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003038:	0759      	lsls	r1, r3, #29
 800303a:	d506      	bpl.n	800304a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800303c:	6801      	ldr	r1, [r0, #0]
 800303e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003040:	684a      	ldr	r2, [r1, #4]
 8003042:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003046:	4322      	orrs	r2, r4
 8003048:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800304a:	071a      	lsls	r2, r3, #28
 800304c:	d506      	bpl.n	800305c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800304e:	6801      	ldr	r1, [r0, #0]
 8003050:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003052:	684a      	ldr	r2, [r1, #4]
 8003054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003058:	4322      	orrs	r2, r4
 800305a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800305c:	06dc      	lsls	r4, r3, #27
 800305e:	d506      	bpl.n	800306e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003060:	6801      	ldr	r1, [r0, #0]
 8003062:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003064:	688a      	ldr	r2, [r1, #8]
 8003066:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800306a:	4322      	orrs	r2, r4
 800306c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306e:	0699      	lsls	r1, r3, #26
 8003070:	d506      	bpl.n	8003080 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003072:	6801      	ldr	r1, [r0, #0]
 8003074:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003076:	688a      	ldr	r2, [r1, #8]
 8003078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800307c:	4322      	orrs	r2, r4
 800307e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003080:	065a      	lsls	r2, r3, #25
 8003082:	d50f      	bpl.n	80030a4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003084:	6801      	ldr	r1, [r0, #0]
 8003086:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003088:	684a      	ldr	r2, [r1, #4]
 800308a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800308e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003090:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003094:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003096:	d105      	bne.n	80030a4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003098:	684a      	ldr	r2, [r1, #4]
 800309a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800309c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80030a0:	4322      	orrs	r2, r4
 80030a2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	d506      	bpl.n	80030b6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030a8:	6802      	ldr	r2, [r0, #0]
 80030aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80030ac:	6853      	ldr	r3, [r2, #4]
 80030ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80030b2:	430b      	orrs	r3, r1
 80030b4:	6053      	str	r3, [r2, #4]
  }
}
 80030b6:	bd10      	pop	{r4, pc}

080030b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030bc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80030c0:	4604      	mov	r4, r0
 80030c2:	460e      	mov	r6, r1
 80030c4:	4615      	mov	r5, r2
 80030c6:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	69d3      	ldr	r3, [r2, #28]
 80030cc:	ea36 0303 	bics.w	r3, r6, r3
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	42ab      	cmp	r3, r5
 80030d8:	d001      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2000      	movs	r0, #0
 80030dc:	e01a      	b.n	8003114 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80030de:	f1b8 3fff 	cmp.w	r8, #4294967295
 80030e2:	d0f2      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fe fa42 	bl	800156c <HAL_GetTick>
 80030e8:	1bc0      	subs	r0, r0, r7
 80030ea:	4540      	cmp	r0, r8
 80030ec:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ee:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f0:	d802      	bhi.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x40>
 80030f2:	f1b8 0f00 	cmp.w	r8, #0
 80030f6:	d10f      	bne.n	8003118 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030fc:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	6883      	ldr	r3, [r0, #8]
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003106:	2320      	movs	r3, #32
 8003108:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800310a:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800310c:	2300      	movs	r3, #0
 800310e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8003112:	2003      	movs	r0, #3
}
 8003114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003118:	075a      	lsls	r2, r3, #29
 800311a:	d5d5      	bpl.n	80030c8 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800311c:	69c3      	ldr	r3, [r0, #28]
 800311e:	051b      	lsls	r3, r3, #20
 8003120:	d5d2      	bpl.n	80030c8 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003126:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003128:	6803      	ldr	r3, [r0, #0]
 800312a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800312e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003130:	6883      	ldr	r3, [r0, #8]
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003138:	2320      	movs	r3, #32
 800313a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800313c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800313e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8003142:	e7e3      	b.n	800310c <UART_WaitOnFlagUntilTimeout+0x54>

08003144 <HAL_UART_Transmit>:
{
 8003144:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003148:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800314a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800314c:	2b20      	cmp	r3, #32
{
 800314e:	4604      	mov	r4, r0
 8003150:	460e      	mov	r6, r1
 8003152:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003154:	d14e      	bne.n	80031f4 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8003156:	2900      	cmp	r1, #0
 8003158:	d04a      	beq.n	80031f0 <HAL_UART_Transmit+0xac>
 800315a:	2a00      	cmp	r2, #0
 800315c:	d048      	beq.n	80031f0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800315e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003162:	2b01      	cmp	r3, #1
 8003164:	d046      	beq.n	80031f4 <HAL_UART_Transmit+0xb0>
 8003166:	2301      	movs	r3, #1
 8003168:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800316e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003174:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003176:	f7fe f9f9 	bl	800156c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317a:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 800317c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003180:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003184:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8003186:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318a:	d103      	bne.n	8003194 <HAL_UART_Transmit+0x50>
 800318c:	6922      	ldr	r2, [r4, #16]
 800318e:	b90a      	cbnz	r2, 8003194 <HAL_UART_Transmit+0x50>
 8003190:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003192:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8003194:	2200      	movs	r2, #0
 8003196:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800319a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80031a2:	b292      	uxth	r2, r2
 80031a4:	b93a      	cbnz	r2, 80031b6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a6:	2140      	movs	r1, #64	; 0x40
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff ff85 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 80031ae:	b950      	cbnz	r0, 80031c6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80031b0:	2320      	movs	r3, #32
 80031b2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80031b4:	e008      	b.n	80031c8 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b6:	2200      	movs	r2, #0
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	4620      	mov	r0, r4
 80031bc:	9303      	str	r3, [sp, #12]
 80031be:	f7ff ff7b 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 80031c2:	9b03      	ldr	r3, [sp, #12]
 80031c4:	b118      	cbz	r0, 80031ce <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80031c6:	2003      	movs	r0, #3
}
 80031c8:	b004      	add	sp, #16
 80031ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ce:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80031d0:	b95e      	cbnz	r6, 80031ea <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031d2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80031d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031da:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80031dc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80031e0:	3a01      	subs	r2, #1
 80031e2:	b292      	uxth	r2, r2
 80031e4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80031e8:	e7d7      	b.n	800319a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ea:	f816 2b01 	ldrb.w	r2, [r6], #1
 80031ee:	e7f4      	b.n	80031da <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80031f0:	2001      	movs	r0, #1
 80031f2:	e7e9      	b.n	80031c8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80031f4:	2002      	movs	r0, #2
 80031f6:	e7e7      	b.n	80031c8 <HAL_UART_Transmit+0x84>

080031f8 <UART_CheckIdleState>:
{
 80031f8:	b530      	push	{r4, r5, lr}
 80031fa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	2500      	movs	r5, #0
{
 80031fe:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003204:	f7fe f9b2 	bl	800156c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800320e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003210:	d415      	bmi.n	800323e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	0752      	lsls	r2, r2, #29
 8003218:	d509      	bpl.n	800322e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800321e:	9200      	str	r2, [sp, #0]
 8003220:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003224:	2200      	movs	r2, #0
 8003226:	4620      	mov	r0, r4
 8003228:	f7ff ff46 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 800322c:	b9a0      	cbnz	r0, 8003258 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800322e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003230:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003232:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003234:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 800323c:	e00d      	b.n	800325a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800323e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003242:	9200      	str	r2, [sp, #0]
 8003244:	9003      	str	r0, [sp, #12]
 8003246:	462a      	mov	r2, r5
 8003248:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff ff33 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 8003252:	9b03      	ldr	r3, [sp, #12]
 8003254:	2800      	cmp	r0, #0
 8003256:	d0dc      	beq.n	8003212 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003258:	2003      	movs	r0, #3
}
 800325a:	b005      	add	sp, #20
 800325c:	bd30      	pop	{r4, r5, pc}

0800325e <HAL_UART_Init>:
{
 800325e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003260:	4604      	mov	r4, r0
 8003262:	b340      	cbz	r0, 80032b6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003264:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003266:	b91b      	cbnz	r3, 8003270 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003268:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800326c:	f7fe f8da 	bl	8001424 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003270:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003272:	2324      	movs	r3, #36	; 0x24
 8003274:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800327e:	4620      	mov	r0, r4
 8003280:	f7ff fd82 	bl	8002d88 <UART_SetConfig>
 8003284:	2801      	cmp	r0, #1
 8003286:	d016      	beq.n	80032b6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800328a:	b113      	cbz	r3, 8003292 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800328c:	4620      	mov	r0, r4
 800328e:	f7ff febf 	bl	8003010 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800329a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80032aa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80032ac:	601a      	str	r2, [r3, #0]
}
 80032ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80032b2:	f7ff bfa1 	b.w	80031f8 <UART_CheckIdleState>
}
 80032b6:	2001      	movs	r0, #1
 80032b8:	bd10      	pop	{r4, pc}
	...

080032bc <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 80032bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80032be:	4c14      	ldr	r4, [pc, #80]	; (8003310 <MX_X_CUBE_AI_Init+0x54>)
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80032c0:	4814      	ldr	r0, [pc, #80]	; (8003314 <MX_X_CUBE_AI_Init+0x58>)
 80032c2:	f002 ff65 	bl	8006190 <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80032c6:	4914      	ldr	r1, [pc, #80]	; (8003318 <MX_X_CUBE_AI_Init+0x5c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	4620      	mov	r0, r4
 80032cc:	f000 f984 	bl	80035d8 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 80032d0:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 80032d4:	d006      	beq.n	80032e4 <MX_X_CUBE_AI_Init+0x28>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80032d6:	0a03      	lsrs	r3, r0, #8
 80032d8:	460a      	mov	r2, r1
 80032da:	4810      	ldr	r0, [pc, #64]	; (800331c <MX_X_CUBE_AI_Init+0x60>)
 80032dc:	4910      	ldr	r1, [pc, #64]	; (8003320 <MX_X_CUBE_AI_Init+0x64>)
 80032de:	f002 fed1 	bl	8006084 <iprintf>
  do {} while (1);
 80032e2:	e7fe      	b.n	80032e2 <MX_X_CUBE_AI_Init+0x26>
  ai_input = ai_network_inputs_get(network, NULL);
 80032e4:	6820      	ldr	r0, [r4, #0]
 80032e6:	9101      	str	r1, [sp, #4]
 80032e8:	f000 f8d0 	bl	800348c <ai_network_inputs_get>
 80032ec:	4d0d      	ldr	r5, [pc, #52]	; (8003324 <MX_X_CUBE_AI_Init+0x68>)
  ai_output = ai_network_outputs_get(network, NULL);
 80032ee:	9901      	ldr	r1, [sp, #4]
  ai_input = ai_network_inputs_get(network, NULL);
 80032f0:	6028      	str	r0, [r5, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	f000 f8d4 	bl	80034a0 <ai_network_outputs_get>
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <MX_X_CUBE_AI_Init+0x6c>)
	  ai_input[idx].data = data_ins[idx];
 80032fa:	4a0c      	ldr	r2, [pc, #48]	; (800332c <MX_X_CUBE_AI_Init+0x70>)
  ai_output = ai_network_outputs_get(network, NULL);
 80032fc:	6018      	str	r0, [r3, #0]
	  ai_input[idx].data = data_ins[idx];
 80032fe:	682b      	ldr	r3, [r5, #0]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	605a      	str	r2, [r3, #4]
	ai_output[idx].data = data_outs[idx];
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <MX_X_CUBE_AI_Init+0x74>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6043      	str	r3, [r0, #4]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 800330a:	b003      	add	sp, #12
 800330c:	bd30      	pop	{r4, r5, pc}
 800330e:	bf00      	nop
 8003310:	200013b8 	.word	0x200013b8
 8003314:	0800848c 	.word	0x0800848c
 8003318:	2000000c 	.word	0x2000000c
 800331c:	080084c4 	.word	0x080084c4
 8003320:	080084a9 	.word	0x080084a9
 8003324:	20000a40 	.word	0x20000a40
 8003328:	20000a44 	.word	0x20000a44
 800332c:	20000010 	.word	0x20000010
 8003330:	20000014 	.word	0x20000014
 8003334:	00000000 	.word	0x00000000

08003338 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8003338:	b5f0      	push	{r4, r5, r6, r7, lr}
	static float data_in[AI_NETWORK_IN_1_SIZE];
	static float data_out[AI_NETWORK_OUT_1_SIZE];
	LSM6DSL_Axes_t accel_axes;

	int32_t size = 0;
	uint8_t tx_buffer[20] = {0};
 800333a:	2210      	movs	r2, #16
{
 800333c:	b089      	sub	sp, #36	; 0x24
	uint8_t tx_buffer[20] = {0};
 800333e:	2400      	movs	r4, #0
 8003340:	eb0d 0002 	add.w	r0, sp, r2
 8003344:	4621      	mov	r1, r4
 8003346:	9403      	str	r4, [sp, #12]
 8003348:	f002 f94a 	bl	80055e0 <memset>

	lsm6dsl_get_accel_axis(&accel_axes);
 800334c:	4668      	mov	r0, sp
 800334e:	f7fd ff51 	bl	80011f4 <lsm6dsl_get_accel_axis>

	for(uint32_t i=0; i<(AI_NETWORK_IN_1_SIZE-3); i+=3 )
 8003352:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <MX_X_CUBE_AI_Process+0x108>)
 8003354:	f240 1229 	movw	r2, #297	; 0x129
 8003358:	461e      	mov	r6, r3
	{
		data_in[i] = data_in[i+3];
 800335a:	68d9      	ldr	r1, [r3, #12]
 800335c:	6019      	str	r1, [r3, #0]
 800335e:	3403      	adds	r4, #3
		data_in[i+1] = data_in[i+4];
 8003360:	6919      	ldr	r1, [r3, #16]
 8003362:	6059      	str	r1, [r3, #4]
	for(uint32_t i=0; i<(AI_NETWORK_IN_1_SIZE-3); i+=3 )
 8003364:	4294      	cmp	r4, r2
		data_in[i+2] = data_in[i+5];
 8003366:	6959      	ldr	r1, [r3, #20]
 8003368:	6099      	str	r1, [r3, #8]
	for(uint32_t i=0; i<(AI_NETWORK_IN_1_SIZE-3); i+=3 )
 800336a:	f103 030c 	add.w	r3, r3, #12
 800336e:	d1f4      	bne.n	800335a <MX_X_CUBE_AI_Process+0x22>
	}

	data_in[297] = accel_axes.x / 2000.0;
 8003370:	9800      	ldr	r0, [sp, #0]
 8003372:	4d34      	ldr	r5, [pc, #208]	; (8003444 <MX_X_CUBE_AI_Process+0x10c>)
  batch = ai_network_run(network, ai_input, ai_output);
 8003374:	4f34      	ldr	r7, [pc, #208]	; (8003448 <MX_X_CUBE_AI_Process+0x110>)
	data_in[297] = accel_axes.x / 2000.0;
 8003376:	f7fd f8d5 	bl	8000524 <__aeabi_i2d>
 800337a:	4b34      	ldr	r3, [pc, #208]	; (800344c <MX_X_CUBE_AI_Process+0x114>)
 800337c:	2200      	movs	r2, #0
 800337e:	f7fd fa65 	bl	800084c <__aeabi_ddiv>
 8003382:	f7fd fc11 	bl	8000ba8 <__aeabi_d2f>
 8003386:	462c      	mov	r4, r5
 8003388:	f844 0b04 	str.w	r0, [r4], #4
	data_in[298] = accel_axes.y / 2000.0;
 800338c:	9801      	ldr	r0, [sp, #4]
 800338e:	f7fd f8c9 	bl	8000524 <__aeabi_i2d>
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <MX_X_CUBE_AI_Process+0x114>)
 8003394:	2200      	movs	r2, #0
 8003396:	f7fd fa59 	bl	800084c <__aeabi_ddiv>
 800339a:	f7fd fc05 	bl	8000ba8 <__aeabi_d2f>
 800339e:	6020      	str	r0, [r4, #0]
	data_in[299] = accel_axes.z / 2000.0;
 80033a0:	9802      	ldr	r0, [sp, #8]
 80033a2:	f7fd f8bf 	bl	8000524 <__aeabi_i2d>
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <MX_X_CUBE_AI_Process+0x114>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	f7fd fa4f 	bl	800084c <__aeabi_ddiv>
 80033ae:	f7fd fbfb 	bl	8000ba8 <__aeabi_d2f>

	ai_input[0].data = AI_HANDLE_PTR(data_in);
 80033b2:	4b27      	ldr	r3, [pc, #156]	; (8003450 <MX_X_CUBE_AI_Process+0x118>)
	data_in[299] = accel_axes.z / 2000.0;
 80033b4:	60a8      	str	r0, [r5, #8]
	ai_input[0].data = AI_HANDLE_PTR(data_in);
 80033b6:	6819      	ldr	r1, [r3, #0]
	ai_output[0].data = AI_HANDLE_PTR(data_out);
 80033b8:	4b26      	ldr	r3, [pc, #152]	; (8003454 <MX_X_CUBE_AI_Process+0x11c>)
	ai_input[0].data = AI_HANDLE_PTR(data_in);
 80033ba:	604e      	str	r6, [r1, #4]
	ai_output[0].data = AI_HANDLE_PTR(data_out);
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4e26      	ldr	r6, [pc, #152]	; (8003458 <MX_X_CUBE_AI_Process+0x120>)
  batch = ai_network_run(network, ai_input, ai_output);
 80033c0:	6838      	ldr	r0, [r7, #0]
	ai_output[0].data = AI_HANDLE_PTR(data_out);
 80033c2:	6056      	str	r6, [r2, #4]
  batch = ai_network_run(network, ai_input, ai_output);
 80033c4:	f000 f94f 	bl	8003666 <ai_network_run>
  if (batch != 1) {
 80033c8:	2801      	cmp	r0, #1
  batch = ai_network_run(network, ai_input, ai_output);
 80033ca:	4604      	mov	r4, r0
  if (batch != 1) {
 80033cc:	d009      	beq.n	80033e2 <MX_X_CUBE_AI_Process+0xaa>
    ai_log_err(ai_network_get_error(network),
 80033ce:	6838      	ldr	r0, [r7, #0]
 80033d0:	f000 f84c 	bl	800346c <ai_network_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80033d4:	4921      	ldr	r1, [pc, #132]	; (800345c <MX_X_CUBE_AI_Process+0x124>)
 80033d6:	0a03      	lsrs	r3, r0, #8
 80033d8:	b2c2      	uxtb	r2, r0
 80033da:	4821      	ldr	r0, [pc, #132]	; (8003460 <MX_X_CUBE_AI_Process+0x128>)
 80033dc:	f002 fe52 	bl	8006084 <iprintf>
  do {} while (1);
 80033e0:	e7fe      	b.n	80033e0 <MX_X_CUBE_AI_Process+0xa8>

	ai_run();

	if(data_out[1] > 0.9)
 80033e2:	6870      	ldr	r0, [r6, #4]
 80033e4:	f7fd f8b0 	bl	8000548 <__aeabi_f2d>
 80033e8:	a313      	add	r3, pc, #76	; (adr r3, 8003438 <MX_X_CUBE_AI_Process+0x100>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd fb93 	bl	8000b18 <__aeabi_dcmpgt>
 80033f2:	4602      	mov	r2, r0
 80033f4:	b1c8      	cbz	r0, 800342a <MX_X_CUBE_AI_Process+0xf2>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80033f6:	4622      	mov	r2, r4
 80033f8:	2120      	movs	r1, #32
 80033fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033fe:	f7fe fa5d 	bl	80018bc <HAL_GPIO_WritePin>

		size = sprintf((char *)tx_buffer, "Detect\n");
 8003402:	4918      	ldr	r1, [pc, #96]	; (8003464 <MX_X_CUBE_AI_Process+0x12c>)
 8003404:	a803      	add	r0, sp, #12
 8003406:	f002 fedb 	bl	80061c0 <strcpy>
		HAL_UART_Transmit(&huart2, tx_buffer, size, 10);
 800340a:	a903      	add	r1, sp, #12
 800340c:	230a      	movs	r3, #10
 800340e:	2207      	movs	r2, #7
 8003410:	4815      	ldr	r0, [pc, #84]	; (8003468 <MX_X_CUBE_AI_Process+0x130>)
 8003412:	f7ff fe97 	bl	8003144 <HAL_UART_Transmit>

		for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; ++i)
		{
			data_in[i] = 0;
 8003416:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800341a:	2100      	movs	r1, #0
 800341c:	f2a5 40a4 	subw	r0, r5, #1188	; 0x4a4
	else
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	}
    /* USER CODE END 6 */
}
 8003420:	b009      	add	sp, #36	; 0x24
 8003422:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			data_in[i] = 0;
 8003426:	f002 b8db 	b.w	80055e0 <memset>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800342a:	2120      	movs	r1, #32
 800342c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003430:	f7fe fa44 	bl	80018bc <HAL_GPIO_WritePin>
}
 8003434:	b009      	add	sp, #36	; 0x24
 8003436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003438:	cccccccd 	.word	0xcccccccd
 800343c:	3feccccc 	.word	0x3feccccc
 8003440:	20000a48 	.word	0x20000a48
 8003444:	20000eec 	.word	0x20000eec
 8003448:	200013b8 	.word	0x200013b8
 800344c:	409f4000 	.word	0x409f4000
 8003450:	20000a40 	.word	0x20000a40
 8003454:	20000a44 	.word	0x20000a44
 8003458:	200013a8 	.word	0x200013a8
 800345c:	080084f6 	.word	0x080084f6
 8003460:	080084c4 	.word	0x080084c4
 8003464:	08008505 	.word	0x08008505
 8003468:	200009b8 	.word	0x200009b8

0800346c <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800346c:	f000 ba24 	b.w	80038b8 <ai_platform_network_get_error>

08003470 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003470:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8003472:	2305      	movs	r3, #5
 8003474:	2200      	movs	r2, #0
 8003476:	e9cd 3200 	strd	r3, r2, [sp]
 800347a:	4a03      	ldr	r2, [pc, #12]	; (8003488 <ai_network_create+0x18>)
 800347c:	2301      	movs	r3, #1
 800347e:	f000 fc89 	bl	8003d94 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003482:	b003      	add	sp, #12
 8003484:	f85d fb04 	ldr.w	pc, [sp], #4
 8003488:	20000674 	.word	0x20000674

0800348c <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800348c:	b910      	cbnz	r0, 8003494 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800348e:	4802      	ldr	r0, [pc, #8]	; (8003498 <ai_network_inputs_get+0xc>)
 8003490:	4b02      	ldr	r3, [pc, #8]	; (800349c <ai_network_inputs_get+0x10>)
 8003492:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003494:	f000 ba90 	b.w	80039b8 <ai_platform_inputs_get>
 8003498:	20000674 	.word	0x20000674
 800349c:	a1c00100 	.word	0xa1c00100

080034a0 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 80034a0:	b910      	cbnz	r0, 80034a8 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80034a2:	4802      	ldr	r0, [pc, #8]	; (80034ac <ai_network_outputs_get+0xc>)
 80034a4:	4b02      	ldr	r3, [pc, #8]	; (80034b0 <ai_network_outputs_get+0x10>)
 80034a6:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80034a8:	f000 bb7a 	b.w	8003ba0 <ai_platform_outputs_get>
 80034ac:	20000674 	.word	0x20000674
 80034b0:	a1c00100 	.word	0xa1c00100

080034b4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80034b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034b6:	4607      	mov	r7, r0
 80034b8:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80034ba:	f000 fd4b 	bl	8003f54 <ai_platform_network_init>
  if (!net_ctx) return false;
 80034be:	4604      	mov	r4, r0
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d064      	beq.n	800358e <ai_network_init+0xda>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80034c4:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80034c6:	4632      	mov	r2, r6
 80034c8:	2101      	movs	r1, #1
 80034ca:	a801      	add	r0, sp, #4
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80034cc:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80034ce:	f000 f935 	bl	800373c <ai_platform_get_weights_map>
 80034d2:	4605      	mov	r5, r0
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d05c      	beq.n	8003592 <ai_network_init+0xde>
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80034d8:	4a34      	ldr	r2, [pc, #208]	; (80035ac <ai_network_init+0xf8>)
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034e0:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 80034e2:	9b01      	ldr	r3, [sp, #4]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80034e4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80034e8:	4a31      	ldr	r2, [pc, #196]	; (80035b0 <ai_network_init+0xfc>)
 80034ea:	6811      	ldr	r1, [r2, #0]
 80034ec:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80034f0:	6011      	str	r1, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 38400);
 80034f2:	f503 4116 	add.w	r1, r3, #38400	; 0x9600
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 38400);
 80034f6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80034fa:	4a2e      	ldr	r2, [pc, #184]	; (80035b4 <ai_network_init+0x100>)
 80034fc:	6811      	ldr	r1, [r2, #0]
 80034fe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003502:	6011      	str	r1, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 38528);
 8003504:	f503 4116 	add.w	r1, r3, #38400	; 0x9600
 8003508:	3180      	adds	r1, #128	; 0x80
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 38528);
 800350a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800350e:	4a2a      	ldr	r2, [pc, #168]	; (80035b8 <ai_network_init+0x104>)
 8003510:	6811      	ldr	r1, [r2, #0]
 8003512:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003516:	6011      	str	r1, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 40576);
 8003518:	f503 411e 	add.w	r1, r3, #40448	; 0x9e00
 800351c:	3180      	adds	r1, #128	; 0x80
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 40576);
 800351e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003522:	4a26      	ldr	r2, [pc, #152]	; (80035bc <ai_network_init+0x108>)
 8003524:	6811      	ldr	r1, [r2, #0]
 8003526:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800352a:	6011      	str	r1, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 40640);
 800352c:	f503 411e 	add.w	r1, r3, #40448	; 0x9e00
 8003530:	31c0      	adds	r1, #192	; 0xc0
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 40640);
 8003532:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003536:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <ai_network_init+0x10c>)
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 40768);
 8003538:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800353c:	6811      	ldr	r1, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 40768);
 800353e:	3340      	adds	r3, #64	; 0x40
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 40768);
 8003540:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003544:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003548:	6011      	str	r1, [r2, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800354a:	2300      	movs	r3, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800354c:	4632      	mov	r2, r6
 800354e:	2101      	movs	r1, #1
 8003550:	a801      	add	r0, sp, #4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8003552:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8003554:	f000 f942 	bl	80037dc <ai_platform_get_activations_map>
 8003558:	4606      	mov	r6, r0
 800355a:	b300      	cbz	r0, 800359e <ai_network_init+0xea>
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 800355c:	9b01      	ldr	r3, [sp, #4]
 800355e:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <ai_network_init+0x110>)
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003560:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 8003564:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <ai_network_init+0x114>)
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003566:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 128);
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <ai_network_init+0x118>)
 800356c:	f103 0180 	add.w	r1, r3, #128	; 0x80
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 128);
 8003570:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 8003574:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <ai_network_init+0x11c>)
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003576:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 64);
 800357a:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <ai_network_init+0x120>)
 800357c:	3340      	adds	r3, #64	; 0x40
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 64);
 800357e:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003582:	4638      	mov	r0, r7
 8003584:	f000 fdf2 	bl	800416c <ai_platform_network_post_init>
 8003588:	4030      	ands	r0, r6
 800358a:	4028      	ands	r0, r5
 800358c:	b2c0      	uxtb	r0, r0

  return ok;
}
 800358e:	b003      	add	sp, #12
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003592:	2212      	movs	r2, #18
 8003594:	2130      	movs	r1, #48	; 0x30
 8003596:	4620      	mov	r0, r4
 8003598:	f000 fa08 	bl	80039ac <ai_platform_network_set_error>
  return false;
 800359c:	e7d5      	b.n	800354a <ai_network_init+0x96>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800359e:	2213      	movs	r2, #19
 80035a0:	2130      	movs	r1, #48	; 0x30
 80035a2:	4620      	mov	r0, r4
 80035a4:	f000 fa02 	bl	80039ac <ai_platform_network_set_error>
  return false;
 80035a8:	e7eb      	b.n	8003582 <ai_network_init+0xce>
 80035aa:	bf00      	nop
 80035ac:	20000440 	.word	0x20000440
 80035b0:	200003cc 	.word	0x200003cc
 80035b4:	2000052c 	.word	0x2000052c
 80035b8:	200004b8 	.word	0x200004b8
 80035bc:	20000618 	.word	0x20000618
 80035c0:	200005a4 	.word	0x200005a4
 80035c4:	20000414 	.word	0x20000414
 80035c8:	2000048c 	.word	0x2000048c
 80035cc:	20000500 	.word	0x20000500
 80035d0:	20000578 	.word	0x20000578
 80035d4:	200005ec 	.word	0x200005ec

080035d8 <ai_network_create_and_init>:
{
 80035d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035dc:	4688      	mov	r8, r1
 80035de:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80035e0:	2100      	movs	r1, #0
{
 80035e2:	4606      	mov	r6, r0
 80035e4:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80035e6:	f7ff ff43 	bl	8003470 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 80035ea:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80035ee:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 80035f0:	d001      	beq.n	80035f6 <ai_network_create_and_init+0x1e>
    return err;
 80035f2:	4620      	mov	r0, r4
 80035f4:	e006      	b.n	8003604 <ai_network_create_and_init+0x2c>
    if (ai_network_data_params_get(&params) != true) {
 80035f6:	4668      	mov	r0, sp
 80035f8:	f000 f838 	bl	800366c <ai_network_data_params_get>
 80035fc:	b928      	cbnz	r0, 800360a <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 80035fe:	6830      	ldr	r0, [r6, #0]
 8003600:	f000 f95a 	bl	80038b8 <ai_platform_network_get_error>
}
 8003604:	b00f      	add	sp, #60	; 0x3c
 8003606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 800360a:	f1b8 0f00 	cmp.w	r8, #0
 800360e:	d11a      	bne.n	8003646 <ai_network_create_and_init+0x6e>
    if (weights) {
 8003610:	bb3f      	cbnz	r7, 8003662 <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 8003612:	6830      	ldr	r0, [r6, #0]
 8003614:	4669      	mov	r1, sp
 8003616:	f7ff ff4d 	bl	80034b4 <ai_network_init>
 800361a:	b928      	cbnz	r0, 8003628 <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 800361c:	6830      	ldr	r0, [r6, #0]
 800361e:	f000 f94b 	bl	80038b8 <ai_platform_network_get_error>
 8003622:	fa5f f980 	uxtb.w	r9, r0
 8003626:	4604      	mov	r4, r0
    return err;
 8003628:	f369 0407 	bfi	r4, r9, #0, #8
 800362c:	e7e1      	b.n	80035f2 <ai_network_create_and_init+0x1a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800362e:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8003632:	4629      	mov	r1, r5
 8003634:	a803      	add	r0, sp, #12
 8003636:	f000 f86b 	bl	8003710 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800363a:	3501      	adds	r5, #1
 800363c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003640:	42ab      	cmp	r3, r5
 8003642:	dcf4      	bgt.n	800362e <ai_network_create_and_init+0x56>
 8003644:	e7e4      	b.n	8003610 <ai_network_create_and_init+0x38>
 8003646:	464d      	mov	r5, r9
 8003648:	e7f8      	b.n	800363c <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800364a:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800364e:	4629      	mov	r1, r5
 8003650:	a801      	add	r0, sp, #4
 8003652:	f000 f85d 	bl	8003710 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003656:	3501      	adds	r5, #1
 8003658:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800365c:	42ab      	cmp	r3, r5
 800365e:	dcf4      	bgt.n	800364a <ai_network_create_and_init+0x72>
 8003660:	e7d7      	b.n	8003612 <ai_network_create_and_init+0x3a>
 8003662:	2500      	movs	r5, #0
 8003664:	e7f8      	b.n	8003658 <ai_network_create_and_init+0x80>

08003666 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003666:	f000 be15 	b.w	8004294 <ai_platform_network_process>
	...

0800366c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800366c:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800366e:	4603      	mov	r3, r0
{
 8003670:	b085      	sub	sp, #20
  if (!params) return false;
 8003672:	b170      	cbz	r0, 8003692 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8003674:	4c08      	ldr	r4, [pc, #32]	; (8003698 <ai_network_data_params_get+0x2c>)
 8003676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800367a:	466a      	mov	r2, sp
 800367c:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003680:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003684:	ad02      	add	r5, sp, #8
 8003686:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800368a:	4629      	mov	r1, r5
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f8f7 	bl	8003880 <ai_platform_bind_network_params>
}
 8003692:	b005      	add	sp, #20
 8003694:	bd30      	pop	{r4, r5, pc}
 8003696:	bf00      	nop
 8003698:	08008420 	.word	0x08008420

0800369c <ai_buffer_get_size>:
 800369c:	b358      	cbz	r0, 80036f6 <ai_buffer_get_size+0x5a>
 800369e:	b430      	push	{r4, r5}
 80036a0:	6803      	ldr	r3, [r0, #0]
 80036a2:	4d15      	ldr	r5, [pc, #84]	; (80036f8 <ai_buffer_get_size+0x5c>)
 80036a4:	6984      	ldr	r4, [r0, #24]
 80036a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80036aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036ae:	42ab      	cmp	r3, r5
 80036b0:	6862      	ldr	r2, [r4, #4]
 80036b2:	d01a      	beq.n	80036ea <ai_buffer_get_size+0x4e>
 80036b4:	7d03      	ldrb	r3, [r0, #20]
 80036b6:	6941      	ldr	r1, [r0, #20]
 80036b8:	f1a3 0301 	sub.w	r3, r3, #1
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80036c6:	428b      	cmp	r3, r1
 80036c8:	da0b      	bge.n	80036e2 <ai_buffer_get_size+0x46>
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <ai_buffer_get_size+0x38>
 80036ce:	2902      	cmp	r1, #2
 80036d0:	d007      	beq.n	80036e2 <ai_buffer_get_size+0x46>
 80036d2:	2302      	movs	r3, #2
 80036d4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80036d8:	3301      	adds	r3, #1
 80036da:	428b      	cmp	r3, r1
 80036dc:	fb00 f202 	mul.w	r2, r0, r2
 80036e0:	d1f3      	bne.n	80036ca <ai_buffer_get_size+0x2e>
 80036e2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80036e6:	bc30      	pop	{r4, r5}
 80036e8:	4770      	bx	lr
 80036ea:	2900      	cmp	r1, #0
 80036ec:	d0e2      	beq.n	80036b4 <ai_buffer_get_size+0x18>
 80036ee:	321f      	adds	r2, #31
 80036f0:	f022 021f 	bic.w	r2, r2, #31
 80036f4:	e7de      	b.n	80036b4 <ai_buffer_get_size+0x18>
 80036f6:	4770      	bx	lr
 80036f8:	000400c0 	.word	0x000400c0

080036fc <ai_buffer_array_sane>:
 80036fc:	b138      	cbz	r0, 800370e <ai_buffer_array_sane+0x12>
 80036fe:	6843      	ldr	r3, [r0, #4]
 8003700:	b123      	cbz	r3, 800370c <ai_buffer_array_sane+0x10>
 8003702:	8840      	ldrh	r0, [r0, #2]
 8003704:	3000      	adds	r0, #0
 8003706:	bf18      	it	ne
 8003708:	2001      	movne	r0, #1
 800370a:	4770      	bx	lr
 800370c:	4618      	mov	r0, r3
 800370e:	4770      	bx	lr

08003710 <ai_buffer_array_item_set_address>:
 8003710:	b120      	cbz	r0, 800371c <ai_buffer_array_item_set_address+0xc>
 8003712:	6843      	ldr	r3, [r0, #4]
 8003714:	b11b      	cbz	r3, 800371e <ai_buffer_array_item_set_address+0xe>
 8003716:	8840      	ldrh	r0, [r0, #2]
 8003718:	b918      	cbnz	r0, 8003722 <ai_buffer_array_item_set_address+0x12>
 800371a:	4770      	bx	lr
 800371c:	4770      	bx	lr
 800371e:	4618      	mov	r0, r3
 8003720:	4770      	bx	lr
 8003722:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003726:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 800372a:	d0f7      	beq.n	800371c <ai_buffer_array_item_set_address+0xc>
 800372c:	6042      	str	r2, [r0, #4]
 800372e:	2001      	movs	r0, #1
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <_ai_platform_acquire_crc>:
 8003734:	2001      	movs	r0, #1
 8003736:	4770      	bx	lr

08003738 <_ai_platform_release_crc>:
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop

0800373c <ai_platform_get_weights_map>:
 800373c:	b192      	cbz	r2, 8003764 <ai_platform_get_weights_map+0x28>
 800373e:	b188      	cbz	r0, 8003764 <ai_platform_get_weights_map+0x28>
 8003740:	b181      	cbz	r1, 8003764 <ai_platform_get_weights_map+0x28>
 8003742:	b570      	push	{r4, r5, r6, lr}
 8003744:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <ai_platform_get_weights_map+0x9c>)
 8003746:	6814      	ldr	r4, [r2, #0]
 8003748:	429c      	cmp	r4, r3
 800374a:	d00d      	beq.n	8003768 <ai_platform_get_weights_map+0x2c>
 800374c:	6854      	ldr	r4, [r2, #4]
 800374e:	b194      	cbz	r4, 8003776 <ai_platform_get_weights_map+0x3a>
 8003750:	6825      	ldr	r5, [r4, #0]
 8003752:	429d      	cmp	r5, r3
 8003754:	d027      	beq.n	80037a6 <ai_platform_get_weights_map+0x6a>
 8003756:	6004      	str	r4, [r0, #0]
 8003758:	f1a1 0001 	sub.w	r0, r1, #1
 800375c:	fab0 f080 	clz	r0, r0
 8003760:	0940      	lsrs	r0, r0, #5
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	2000      	movs	r0, #0
 8003766:	4770      	bx	lr
 8003768:	4605      	mov	r5, r0
 800376a:	1d10      	adds	r0, r2, #4
 800376c:	4616      	mov	r6, r2
 800376e:	460c      	mov	r4, r1
 8003770:	f7ff ffc4 	bl	80036fc <ai_buffer_array_sane>
 8003774:	b908      	cbnz	r0, 800377a <ai_platform_get_weights_map+0x3e>
 8003776:	2000      	movs	r0, #0
 8003778:	bd70      	pop	{r4, r5, r6, pc}
 800377a:	88f3      	ldrh	r3, [r6, #6]
 800377c:	429c      	cmp	r4, r3
 800377e:	d1fa      	bne.n	8003776 <ai_platform_get_weights_map+0x3a>
 8003780:	2100      	movs	r1, #0
 8003782:	1f2b      	subs	r3, r5, #4
 8003784:	4608      	mov	r0, r1
 8003786:	68b2      	ldr	r2, [r6, #8]
 8003788:	440a      	add	r2, r1
 800378a:	311c      	adds	r1, #28
 800378c:	6852      	ldr	r2, [r2, #4]
 800378e:	b12a      	cbz	r2, 800379c <ai_platform_get_weights_map+0x60>
 8003790:	3001      	adds	r0, #1
 8003792:	4284      	cmp	r4, r0
 8003794:	f843 2f04 	str.w	r2, [r3, #4]!
 8003798:	d1f5      	bne.n	8003786 <ai_platform_get_weights_map+0x4a>
 800379a:	4620      	mov	r0, r4
 800379c:	1a20      	subs	r0, r4, r0
 800379e:	fab0 f080 	clz	r0, r0
 80037a2:	0940      	lsrs	r0, r0, #5
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
 80037a6:	6863      	ldr	r3, [r4, #4]
 80037a8:	42ab      	cmp	r3, r5
 80037aa:	f104 0404 	add.w	r4, r4, #4
 80037ae:	d0e2      	beq.n	8003776 <ai_platform_get_weights_map+0x3a>
 80037b0:	3804      	subs	r0, #4
 80037b2:	4626      	mov	r6, r4
 80037b4:	2200      	movs	r2, #0
 80037b6:	e003      	b.n	80037c0 <ai_platform_get_weights_map+0x84>
 80037b8:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80037bc:	42ab      	cmp	r3, r5
 80037be:	d0da      	beq.n	8003776 <ai_platform_get_weights_map+0x3a>
 80037c0:	3201      	adds	r2, #1
 80037c2:	4291      	cmp	r1, r2
 80037c4:	f840 3f04 	str.w	r3, [r0, #4]!
 80037c8:	d1f6      	bne.n	80037b8 <ai_platform_get_weights_map+0x7c>
 80037ca:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80037ce:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <ai_platform_get_weights_map+0x9c>)
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1d0      	bne.n	8003776 <ai_platform_get_weights_map+0x3a>
 80037d4:	2001      	movs	r0, #1
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	a1facade 	.word	0xa1facade

080037dc <ai_platform_get_activations_map>:
 80037dc:	b192      	cbz	r2, 8003804 <ai_platform_get_activations_map+0x28>
 80037de:	b188      	cbz	r0, 8003804 <ai_platform_get_activations_map+0x28>
 80037e0:	b181      	cbz	r1, 8003804 <ai_platform_get_activations_map+0x28>
 80037e2:	b570      	push	{r4, r5, r6, lr}
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <ai_platform_get_activations_map+0xa0>)
 80037e6:	6814      	ldr	r4, [r2, #0]
 80037e8:	429c      	cmp	r4, r3
 80037ea:	d00d      	beq.n	8003808 <ai_platform_get_activations_map+0x2c>
 80037ec:	6a14      	ldr	r4, [r2, #32]
 80037ee:	b19c      	cbz	r4, 8003818 <ai_platform_get_activations_map+0x3c>
 80037f0:	6825      	ldr	r5, [r4, #0]
 80037f2:	429d      	cmp	r5, r3
 80037f4:	d028      	beq.n	8003848 <ai_platform_get_activations_map+0x6c>
 80037f6:	6004      	str	r4, [r0, #0]
 80037f8:	f1a1 0001 	sub.w	r0, r1, #1
 80037fc:	fab0 f080 	clz	r0, r0
 8003800:	0940      	lsrs	r0, r0, #5
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	2000      	movs	r0, #0
 8003806:	4770      	bx	lr
 8003808:	4605      	mov	r5, r0
 800380a:	f102 000c 	add.w	r0, r2, #12
 800380e:	4616      	mov	r6, r2
 8003810:	460c      	mov	r4, r1
 8003812:	f7ff ff73 	bl	80036fc <ai_buffer_array_sane>
 8003816:	b908      	cbnz	r0, 800381c <ai_platform_get_activations_map+0x40>
 8003818:	2000      	movs	r0, #0
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	89f3      	ldrh	r3, [r6, #14]
 800381e:	429c      	cmp	r4, r3
 8003820:	d1fa      	bne.n	8003818 <ai_platform_get_activations_map+0x3c>
 8003822:	2100      	movs	r1, #0
 8003824:	1f2b      	subs	r3, r5, #4
 8003826:	4608      	mov	r0, r1
 8003828:	6932      	ldr	r2, [r6, #16]
 800382a:	440a      	add	r2, r1
 800382c:	311c      	adds	r1, #28
 800382e:	6852      	ldr	r2, [r2, #4]
 8003830:	b12a      	cbz	r2, 800383e <ai_platform_get_activations_map+0x62>
 8003832:	3001      	adds	r0, #1
 8003834:	4284      	cmp	r4, r0
 8003836:	f843 2f04 	str.w	r2, [r3, #4]!
 800383a:	d1f5      	bne.n	8003828 <ai_platform_get_activations_map+0x4c>
 800383c:	4620      	mov	r0, r4
 800383e:	1a20      	subs	r0, r4, r0
 8003840:	fab0 f080 	clz	r0, r0
 8003844:	0940      	lsrs	r0, r0, #5
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	42ab      	cmp	r3, r5
 800384c:	f104 0404 	add.w	r4, r4, #4
 8003850:	d0e2      	beq.n	8003818 <ai_platform_get_activations_map+0x3c>
 8003852:	3804      	subs	r0, #4
 8003854:	4626      	mov	r6, r4
 8003856:	2200      	movs	r2, #0
 8003858:	e003      	b.n	8003862 <ai_platform_get_activations_map+0x86>
 800385a:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800385e:	42ab      	cmp	r3, r5
 8003860:	d0da      	beq.n	8003818 <ai_platform_get_activations_map+0x3c>
 8003862:	3201      	adds	r2, #1
 8003864:	4291      	cmp	r1, r2
 8003866:	f840 3f04 	str.w	r3, [r0, #4]!
 800386a:	d1f6      	bne.n	800385a <ai_platform_get_activations_map+0x7e>
 800386c:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <ai_platform_get_activations_map+0xa0>)
 8003872:	429a      	cmp	r2, r3
 8003874:	d1d0      	bne.n	8003818 <ai_platform_get_activations_map+0x3c>
 8003876:	2001      	movs	r0, #1
 8003878:	bd70      	pop	{r4, r5, r6, pc}
 800387a:	bf00      	nop
 800387c:	a1facade 	.word	0xa1facade

08003880 <ai_platform_bind_network_params>:
 8003880:	4603      	mov	r3, r0
 8003882:	b190      	cbz	r0, 80038aa <ai_platform_bind_network_params+0x2a>
 8003884:	b1a1      	cbz	r1, 80038b0 <ai_platform_bind_network_params+0x30>
 8003886:	b18a      	cbz	r2, 80038ac <ai_platform_bind_network_params+0x2c>
 8003888:	b410      	push	{r4}
 800388a:	4604      	mov	r4, r0
 800388c:	4809      	ldr	r0, [pc, #36]	; (80038b4 <ai_platform_bind_network_params+0x34>)
 800388e:	f844 0b04 	str.w	r0, [r4], #4
 8003892:	c903      	ldmia	r1, {r0, r1}
 8003894:	e884 0003 	stmia.w	r4, {r0, r1}
 8003898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800389c:	330c      	adds	r3, #12
 800389e:	e883 0003 	stmia.w	r3, {r0, r1}
 80038a2:	2001      	movs	r0, #1
 80038a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	4770      	bx	lr
 80038ac:	4610      	mov	r0, r2
 80038ae:	4770      	bx	lr
 80038b0:	4608      	mov	r0, r1
 80038b2:	4770      	bx	lr
 80038b4:	a1facade 	.word	0xa1facade

080038b8 <ai_platform_network_get_error>:
 80038b8:	b510      	push	{r4, lr}
 80038ba:	b120      	cbz	r0, 80038c6 <ai_platform_network_get_error+0xe>
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <ai_platform_network_get_error+0xd0>)
 80038be:	6802      	ldr	r2, [r0, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	4604      	mov	r4, r0
 80038c4:	d02e      	beq.n	8003924 <ai_platform_network_get_error+0x6c>
 80038c6:	4a31      	ldr	r2, [pc, #196]	; (800398c <ai_platform_network_get_error+0xd4>)
 80038c8:	6813      	ldr	r3, [r2, #0]
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	f7ff ff30 	bl	8003734 <_ai_platform_acquire_crc>
 80038d4:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <ai_platform_network_get_error+0xd8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e0:	d00d      	beq.n	80038fe <ai_platform_network_get_error+0x46>
 80038e2:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <ai_platform_network_get_error+0xdc>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	d1fc      	bne.n	80038e8 <ai_platform_network_get_error+0x30>
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <ai_platform_network_get_error+0xe0>)
 80038f0:	4a2a      	ldr	r2, [pc, #168]	; (800399c <ai_platform_network_get_error+0xe4>)
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <ai_platform_network_get_error+0xe8>)
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d00d      	beq.n	8003918 <ai_platform_network_get_error+0x60>
 80038fc:	e7fe      	b.n	80038fc <ai_platform_network_get_error+0x44>
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <ai_platform_network_get_error+0xec>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	2a00      	cmp	r2, #0
 8003908:	d1fc      	bne.n	8003904 <ai_platform_network_get_error+0x4c>
 800390a:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <ai_platform_network_get_error+0xf0>)
 800390c:	4a23      	ldr	r2, [pc, #140]	; (800399c <ai_platform_network_get_error+0xe4>)
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <ai_platform_network_get_error+0xe8>)
 8003914:	429a      	cmp	r2, r3
 8003916:	d104      	bne.n	8003922 <ai_platform_network_get_error+0x6a>
 8003918:	f7ff ff0e 	bl	8003738 <_ai_platform_release_crc>
 800391c:	f241 0010 	movw	r0, #4112	; 0x1010
 8003920:	bd10      	pop	{r4, pc}
 8003922:	e7fe      	b.n	8003922 <ai_platform_network_get_error+0x6a>
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <ai_platform_network_get_error+0xd4>)
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	f7ff ff01 	bl	8003734 <_ai_platform_acquire_crc>
 8003932:	4b17      	ldr	r3, [pc, #92]	; (8003990 <ai_platform_network_get_error+0xd8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d00d      	beq.n	800395c <ai_platform_network_get_error+0xa4>
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <ai_platform_network_get_error+0xdc>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2a00      	cmp	r2, #0
 800394a:	d1fc      	bne.n	8003946 <ai_platform_network_get_error+0x8e>
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <ai_platform_network_get_error+0xe0>)
 800394e:	4a13      	ldr	r2, [pc, #76]	; (800399c <ai_platform_network_get_error+0xe4>)
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <ai_platform_network_get_error+0xe8>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d00e      	beq.n	8003978 <ai_platform_network_get_error+0xc0>
 800395a:	e7fe      	b.n	800395a <ai_platform_network_get_error+0xa2>
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <ai_platform_network_get_error+0xec>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2a00      	cmp	r2, #0
 8003966:	d1fc      	bne.n	8003962 <ai_platform_network_get_error+0xaa>
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <ai_platform_network_get_error+0xf0>)
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <ai_platform_network_get_error+0xe4>)
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <ai_platform_network_get_error+0xe8>)
 8003972:	429a      	cmp	r2, r3
 8003974:	d000      	beq.n	8003978 <ai_platform_network_get_error+0xc0>
 8003976:	e7fe      	b.n	8003976 <ai_platform_network_get_error+0xbe>
 8003978:	f7ff fede 	bl	8003738 <_ai_platform_release_crc>
 800397c:	f104 0010 	add.w	r0, r4, #16
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003984:	f000 bef4 	b.w	8004770 <core_get_error>
 8003988:	a1c00100 	.word	0xa1c00100
 800398c:	e0002000 	.word	0xe0002000
 8003990:	e0042000 	.word	0xe0042000
 8003994:	58024c08 	.word	0x58024c08
 8003998:	58024c00 	.word	0x58024c00
 800399c:	f407a5c2 	.word	0xf407a5c2
 80039a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80039a4:	40023008 	.word	0x40023008
 80039a8:	40023000 	.word	0x40023000

080039ac <ai_platform_network_set_error>:
 80039ac:	b110      	cbz	r0, 80039b4 <ai_platform_network_set_error+0x8>
 80039ae:	3010      	adds	r0, #16
 80039b0:	f000 bee4 	b.w	800477c <core_set_error>
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <ai_platform_inputs_get>:
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	b085      	sub	sp, #20
 80039be:	2800      	cmp	r0, #0
 80039c0:	f000 80a1 	beq.w	8003b06 <ai_platform_inputs_get+0x14e>
 80039c4:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <ai_platform_inputs_get+0x1c4>)
 80039c6:	6802      	ldr	r2, [r0, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	4607      	mov	r7, r0
 80039cc:	f040 809b 	bne.w	8003b06 <ai_platform_inputs_get+0x14e>
 80039d0:	4a6b      	ldr	r2, [pc, #428]	; (8003b80 <ai_platform_inputs_get+0x1c8>)
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	468b      	mov	fp, r1
 80039dc:	f7ff feaa 	bl	8003734 <_ai_platform_acquire_crc>
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <ai_platform_inputs_get+0x1cc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d00d      	beq.n	8003a0a <ai_platform_inputs_get+0x52>
 80039ee:	4b66      	ldr	r3, [pc, #408]	; (8003b88 <ai_platform_inputs_get+0x1d0>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	2a00      	cmp	r2, #0
 80039f8:	d1fc      	bne.n	80039f4 <ai_platform_inputs_get+0x3c>
 80039fa:	4b64      	ldr	r3, [pc, #400]	; (8003b8c <ai_platform_inputs_get+0x1d4>)
 80039fc:	4a64      	ldr	r2, [pc, #400]	; (8003b90 <ai_platform_inputs_get+0x1d8>)
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b64      	ldr	r3, [pc, #400]	; (8003b94 <ai_platform_inputs_get+0x1dc>)
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d00d      	beq.n	8003a24 <ai_platform_inputs_get+0x6c>
 8003a08:	e7fe      	b.n	8003a08 <ai_platform_inputs_get+0x50>
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <ai_platform_inputs_get+0x1e0>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	2a00      	cmp	r2, #0
 8003a14:	d1fc      	bne.n	8003a10 <ai_platform_inputs_get+0x58>
 8003a16:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <ai_platform_inputs_get+0x1e4>)
 8003a18:	4a5d      	ldr	r2, [pc, #372]	; (8003b90 <ai_platform_inputs_get+0x1d8>)
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b5d      	ldr	r3, [pc, #372]	; (8003b94 <ai_platform_inputs_get+0x1dc>)
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d16f      	bne.n	8003b04 <ai_platform_inputs_get+0x14c>
 8003a24:	f7ff fe88 	bl	8003738 <_ai_platform_release_crc>
 8003a28:	f1bb 0f00 	cmp.w	fp, #0
 8003a2c:	d002      	beq.n	8003a34 <ai_platform_inputs_get+0x7c>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8ab 3000 	strh.w	r3, [fp]
 8003a34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8081 	beq.w	8003b3e <ai_platform_inputs_get+0x186>
 8003a3c:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	d07d      	beq.n	8003b3e <ai_platform_inputs_get+0x186>
 8003a42:	8833      	ldrh	r3, [r6, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d07a      	beq.n	8003b3e <ai_platform_inputs_get+0x186>
 8003a48:	6873      	ldr	r3, [r6, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d077      	beq.n	8003b3e <ai_platform_inputs_get+0x186>
 8003a4e:	681d      	ldr	r5, [r3, #0]
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	d074      	beq.n	8003b3e <ai_platform_inputs_get+0x186>
 8003a54:	f04f 0800 	mov.w	r8, #0
 8003a58:	f8cd b008 	str.w	fp, [sp, #8]
 8003a5c:	46c1      	mov	r9, r8
 8003a5e:	46bb      	mov	fp, r7
 8003a60:	68b0      	ldr	r0, [r6, #8]
 8003a62:	69aa      	ldr	r2, [r5, #24]
 8003a64:	68ab      	ldr	r3, [r5, #8]
 8003a66:	6844      	ldr	r4, [r0, #4]
 8003a68:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8003a6c:	6810      	ldr	r0, [r2, #0]
 8003a6e:	68ef      	ldr	r7, [r5, #12]
 8003a70:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003a74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	9203      	str	r2, [sp, #12]
 8003a7c:	f001 fce6 	bl	800544c <ai_array_to_buffer_fmt>
 8003a80:	9a03      	ldr	r2, [sp, #12]
 8003a82:	4601      	mov	r1, r0
 8003a84:	69a8      	ldr	r0, [r5, #24]
 8003a86:	eb0a 0302 	add.w	r3, sl, r2
 8003a8a:	4444      	add	r4, r8
 8003a8c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8003a90:	b16b      	cbz	r3, 8003aae <ai_platform_inputs_get+0xf6>
 8003a92:	2000      	movs	r0, #0
 8003a94:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8003a98:	6828      	ldr	r0, [r5, #0]
 8003a9a:	6058      	str	r0, [r3, #4]
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d058      	beq.n	8003b52 <ai_platform_inputs_get+0x19a>
 8003aa0:	8840      	ldrh	r0, [r0, #2]
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d055      	beq.n	8003b52 <ai_platform_inputs_get+0x19a>
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f84a 0002 	str.w	r0, [sl, r2]
 8003aac:	69a8      	ldr	r0, [r5, #24]
 8003aae:	6842      	ldr	r2, [r0, #4]
 8003ab0:	6122      	str	r2, [r4, #16]
 8003ab2:	f04f 0001 	mov.w	r0, #1
 8003ab6:	7520      	strb	r0, [r4, #20]
 8003ab8:	9a01      	ldr	r2, [sp, #4]
 8003aba:	6960      	ldr	r0, [r4, #20]
 8003abc:	60a3      	str	r3, [r4, #8]
 8003abe:	f362 201f 	bfi	r0, r2, #8, #24
 8003ac2:	e9c4 1e00 	strd	r1, lr, [r4]
 8003ac6:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8003aca:	2300      	movs	r3, #0
 8003acc:	60e3      	str	r3, [r4, #12]
 8003ace:	8830      	ldrh	r0, [r6, #0]
 8003ad0:	f109 0301 	add.w	r3, r9, #1
 8003ad4:	4283      	cmp	r3, r0
 8003ad6:	4699      	mov	r9, r3
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	d207      	bcs.n	8003aec <ai_platform_inputs_get+0x134>
 8003adc:	6870      	ldr	r0, [r6, #4]
 8003ade:	b128      	cbz	r0, 8003aec <ai_platform_inputs_get+0x134>
 8003ae0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003ae4:	f108 081c 	add.w	r8, r8, #28
 8003ae8:	2d00      	cmp	r5, #0
 8003aea:	d1b9      	bne.n	8003a60 <ai_platform_inputs_get+0xa8>
 8003aec:	465f      	mov	r7, fp
 8003aee:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003af2:	b322      	cbz	r2, 8003b3e <ai_platform_inputs_get+0x186>
 8003af4:	68b3      	ldr	r3, [r6, #8]
 8003af6:	6858      	ldr	r0, [r3, #4]
 8003af8:	f1bb 0f00 	cmp.w	fp, #0
 8003afc:	d026      	beq.n	8003b4c <ai_platform_inputs_get+0x194>
 8003afe:	f8ab 2000 	strh.w	r2, [fp]
 8003b02:	e023      	b.n	8003b4c <ai_platform_inputs_get+0x194>
 8003b04:	e7fe      	b.n	8003b04 <ai_platform_inputs_get+0x14c>
 8003b06:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <ai_platform_inputs_get+0x1c8>)
 8003b08:	6813      	ldr	r3, [r2, #0]
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	f7ff fe10 	bl	8003734 <_ai_platform_acquire_crc>
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <ai_platform_inputs_get+0x1cc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	d01a      	beq.n	8003b58 <ai_platform_inputs_get+0x1a0>
 8003b22:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <ai_platform_inputs_get+0x1d0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	2a00      	cmp	r2, #0
 8003b2c:	d1fc      	bne.n	8003b28 <ai_platform_inputs_get+0x170>
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <ai_platform_inputs_get+0x1d4>)
 8003b30:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <ai_platform_inputs_get+0x1d8>)
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <ai_platform_inputs_get+0x1dc>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d01b      	beq.n	8003b74 <ai_platform_inputs_get+0x1bc>
 8003b3c:	e7fe      	b.n	8003b3c <ai_platform_inputs_get+0x184>
 8003b3e:	f107 0010 	add.w	r0, r7, #16
 8003b42:	2218      	movs	r2, #24
 8003b44:	2111      	movs	r1, #17
 8003b46:	f000 fe19 	bl	800477c <core_set_error>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	b005      	add	sp, #20
 8003b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b52:	69a8      	ldr	r0, [r5, #24]
 8003b54:	2300      	movs	r3, #0
 8003b56:	e7aa      	b.n	8003aae <ai_platform_inputs_get+0xf6>
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <ai_platform_inputs_get+0x1e0>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d1fc      	bne.n	8003b5e <ai_platform_inputs_get+0x1a6>
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <ai_platform_inputs_get+0x1e4>)
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <ai_platform_inputs_get+0x1d8>)
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <ai_platform_inputs_get+0x1dc>)
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d000      	beq.n	8003b74 <ai_platform_inputs_get+0x1bc>
 8003b72:	e7fe      	b.n	8003b72 <ai_platform_inputs_get+0x1ba>
 8003b74:	f7ff fde0 	bl	8003738 <_ai_platform_release_crc>
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e7e7      	b.n	8003b4c <ai_platform_inputs_get+0x194>
 8003b7c:	a1c00100 	.word	0xa1c00100
 8003b80:	e0002000 	.word	0xe0002000
 8003b84:	e0042000 	.word	0xe0042000
 8003b88:	58024c08 	.word	0x58024c08
 8003b8c:	58024c00 	.word	0x58024c00
 8003b90:	f407a5c2 	.word	0xf407a5c2
 8003b94:	b5e8b5cd 	.word	0xb5e8b5cd
 8003b98:	40023008 	.word	0x40023008
 8003b9c:	40023000 	.word	0x40023000

08003ba0 <ai_platform_outputs_get>:
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	f000 80a9 	beq.w	8003cfe <ai_platform_outputs_get+0x15e>
 8003bac:	4b70      	ldr	r3, [pc, #448]	; (8003d70 <ai_platform_outputs_get+0x1d0>)
 8003bae:	6802      	ldr	r2, [r0, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	4607      	mov	r7, r0
 8003bb4:	f040 80a3 	bne.w	8003cfe <ai_platform_outputs_get+0x15e>
 8003bb8:	4a6e      	ldr	r2, [pc, #440]	; (8003d74 <ai_platform_outputs_get+0x1d4>)
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	468b      	mov	fp, r1
 8003bc4:	f7ff fdb6 	bl	8003734 <_ai_platform_acquire_crc>
 8003bc8:	4b6b      	ldr	r3, [pc, #428]	; (8003d78 <ai_platform_outputs_get+0x1d8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	d00d      	beq.n	8003bf2 <ai_platform_outputs_get+0x52>
 8003bd6:	4b69      	ldr	r3, [pc, #420]	; (8003d7c <ai_platform_outputs_get+0x1dc>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	d1fc      	bne.n	8003bdc <ai_platform_outputs_get+0x3c>
 8003be2:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <ai_platform_outputs_get+0x1e0>)
 8003be4:	4a67      	ldr	r2, [pc, #412]	; (8003d84 <ai_platform_outputs_get+0x1e4>)
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b67      	ldr	r3, [pc, #412]	; (8003d88 <ai_platform_outputs_get+0x1e8>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d00d      	beq.n	8003c0c <ai_platform_outputs_get+0x6c>
 8003bf0:	e7fe      	b.n	8003bf0 <ai_platform_outputs_get+0x50>
 8003bf2:	4b66      	ldr	r3, [pc, #408]	; (8003d8c <ai_platform_outputs_get+0x1ec>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	2a00      	cmp	r2, #0
 8003bfc:	d1fc      	bne.n	8003bf8 <ai_platform_outputs_get+0x58>
 8003bfe:	4b64      	ldr	r3, [pc, #400]	; (8003d90 <ai_platform_outputs_get+0x1f0>)
 8003c00:	4a60      	ldr	r2, [pc, #384]	; (8003d84 <ai_platform_outputs_get+0x1e4>)
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <ai_platform_outputs_get+0x1e8>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d177      	bne.n	8003cfc <ai_platform_outputs_get+0x15c>
 8003c0c:	f7ff fd94 	bl	8003738 <_ai_platform_release_crc>
 8003c10:	f1bb 0f00 	cmp.w	fp, #0
 8003c14:	d002      	beq.n	8003c1c <ai_platform_outputs_get+0x7c>
 8003c16:	2300      	movs	r3, #0
 8003c18:	f8ab 3000 	strh.w	r3, [fp]
 8003c1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	f240 809a 	bls.w	8003d58 <ai_platform_outputs_get+0x1b8>
 8003c24:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8003c26:	f116 0f0c 	cmn.w	r6, #12
 8003c2a:	f000 8095 	beq.w	8003d58 <ai_platform_outputs_get+0x1b8>
 8003c2e:	89b3      	ldrh	r3, [r6, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8091 	beq.w	8003d58 <ai_platform_outputs_get+0x1b8>
 8003c36:	6933      	ldr	r3, [r6, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 808d 	beq.w	8003d58 <ai_platform_outputs_get+0x1b8>
 8003c3e:	681d      	ldr	r5, [r3, #0]
 8003c40:	2d00      	cmp	r5, #0
 8003c42:	f000 8089 	beq.w	8003d58 <ai_platform_outputs_get+0x1b8>
 8003c46:	f04f 0800 	mov.w	r8, #0
 8003c4a:	f8cd b008 	str.w	fp, [sp, #8]
 8003c4e:	46c1      	mov	r9, r8
 8003c50:	46bb      	mov	fp, r7
 8003c52:	6970      	ldr	r0, [r6, #20]
 8003c54:	69aa      	ldr	r2, [r5, #24]
 8003c56:	68ab      	ldr	r3, [r5, #8]
 8003c58:	6844      	ldr	r4, [r0, #4]
 8003c5a:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8003c5e:	6810      	ldr	r0, [r2, #0]
 8003c60:	68ef      	ldr	r7, [r5, #12]
 8003c62:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003c66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	9203      	str	r2, [sp, #12]
 8003c6e:	f001 fbed 	bl	800544c <ai_array_to_buffer_fmt>
 8003c72:	9a03      	ldr	r2, [sp, #12]
 8003c74:	4601      	mov	r1, r0
 8003c76:	69a8      	ldr	r0, [r5, #24]
 8003c78:	eb0a 0302 	add.w	r3, sl, r2
 8003c7c:	4444      	add	r4, r8
 8003c7e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8003c82:	b16b      	cbz	r3, 8003ca0 <ai_platform_outputs_get+0x100>
 8003c84:	2000      	movs	r0, #0
 8003c86:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8003c8a:	6828      	ldr	r0, [r5, #0]
 8003c8c:	6058      	str	r0, [r3, #4]
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d051      	beq.n	8003d36 <ai_platform_outputs_get+0x196>
 8003c92:	8840      	ldrh	r0, [r0, #2]
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d04e      	beq.n	8003d36 <ai_platform_outputs_get+0x196>
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f84a 0002 	str.w	r0, [sl, r2]
 8003c9e:	69a8      	ldr	r0, [r5, #24]
 8003ca0:	6842      	ldr	r2, [r0, #4]
 8003ca2:	6122      	str	r2, [r4, #16]
 8003ca4:	f04f 0001 	mov.w	r0, #1
 8003ca8:	7520      	strb	r0, [r4, #20]
 8003caa:	9a01      	ldr	r2, [sp, #4]
 8003cac:	6960      	ldr	r0, [r4, #20]
 8003cae:	60a3      	str	r3, [r4, #8]
 8003cb0:	f362 201f 	bfi	r0, r2, #8, #24
 8003cb4:	e9c4 1e00 	strd	r1, lr, [r4]
 8003cb8:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60e3      	str	r3, [r4, #12]
 8003cc0:	89b0      	ldrh	r0, [r6, #12]
 8003cc2:	f109 0301 	add.w	r3, r9, #1
 8003cc6:	4283      	cmp	r3, r0
 8003cc8:	4699      	mov	r9, r3
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	d207      	bcs.n	8003cde <ai_platform_outputs_get+0x13e>
 8003cce:	6930      	ldr	r0, [r6, #16]
 8003cd0:	b128      	cbz	r0, 8003cde <ai_platform_outputs_get+0x13e>
 8003cd2:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003cd6:	f108 081c 	add.w	r8, r8, #28
 8003cda:	2d00      	cmp	r5, #0
 8003cdc:	d1b9      	bne.n	8003c52 <ai_platform_outputs_get+0xb2>
 8003cde:	465f      	mov	r7, fp
 8003ce0:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003ce4:	2a00      	cmp	r2, #0
 8003ce6:	d037      	beq.n	8003d58 <ai_platform_outputs_get+0x1b8>
 8003ce8:	6973      	ldr	r3, [r6, #20]
 8003cea:	6858      	ldr	r0, [r3, #4]
 8003cec:	f1bb 0f00 	cmp.w	fp, #0
 8003cf0:	d001      	beq.n	8003cf6 <ai_platform_outputs_get+0x156>
 8003cf2:	f8ab 2000 	strh.w	r2, [fp]
 8003cf6:	b005      	add	sp, #20
 8003cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfc:	e7fe      	b.n	8003cfc <ai_platform_outputs_get+0x15c>
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <ai_platform_outputs_get+0x1d4>)
 8003d00:	6813      	ldr	r3, [r2, #0]
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	f7ff fd14 	bl	8003734 <_ai_platform_acquire_crc>
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <ai_platform_outputs_get+0x1d8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d010      	beq.n	8003d3c <ai_platform_outputs_get+0x19c>
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <ai_platform_outputs_get+0x1dc>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	d1fc      	bne.n	8003d20 <ai_platform_outputs_get+0x180>
 8003d26:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <ai_platform_outputs_get+0x1e0>)
 8003d28:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <ai_platform_outputs_get+0x1e4>)
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <ai_platform_outputs_get+0x1e8>)
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d019      	beq.n	8003d68 <ai_platform_outputs_get+0x1c8>
 8003d34:	e7fe      	b.n	8003d34 <ai_platform_outputs_get+0x194>
 8003d36:	69a8      	ldr	r0, [r5, #24]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e7b1      	b.n	8003ca0 <ai_platform_outputs_get+0x100>
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <ai_platform_outputs_get+0x1ec>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	2a00      	cmp	r2, #0
 8003d46:	d1fc      	bne.n	8003d42 <ai_platform_outputs_get+0x1a2>
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <ai_platform_outputs_get+0x1f0>)
 8003d4a:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <ai_platform_outputs_get+0x1e4>)
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <ai_platform_outputs_get+0x1e8>)
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d008      	beq.n	8003d68 <ai_platform_outputs_get+0x1c8>
 8003d56:	e7fe      	b.n	8003d56 <ai_platform_outputs_get+0x1b6>
 8003d58:	f107 0010 	add.w	r0, r7, #16
 8003d5c:	2218      	movs	r2, #24
 8003d5e:	2111      	movs	r1, #17
 8003d60:	f000 fd0c 	bl	800477c <core_set_error>
 8003d64:	2000      	movs	r0, #0
 8003d66:	e7c6      	b.n	8003cf6 <ai_platform_outputs_get+0x156>
 8003d68:	f7ff fce6 	bl	8003738 <_ai_platform_release_crc>
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e7c2      	b.n	8003cf6 <ai_platform_outputs_get+0x156>
 8003d70:	a1c00100 	.word	0xa1c00100
 8003d74:	e0002000 	.word	0xe0002000
 8003d78:	e0042000 	.word	0xe0042000
 8003d7c:	58024c08 	.word	0x58024c08
 8003d80:	58024c00 	.word	0x58024c00
 8003d84:	f407a5c2 	.word	0xf407a5c2
 8003d88:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d8c:	40023008 	.word	0x40023008
 8003d90:	40023000 	.word	0x40023000

08003d94 <ai_platform_network_create>:
 8003d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	4615      	mov	r5, r2
 8003d9e:	461f      	mov	r7, r3
 8003da0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003da4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003da8:	f7ff fcc4 	bl	8003734 <_ai_platform_acquire_crc>
 8003dac:	b178      	cbz	r0, 8003dce <ai_platform_network_create+0x3a>
 8003dae:	4b5f      	ldr	r3, [pc, #380]	; (8003f2c <ai_platform_network_create+0x198>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	4602      	mov	r2, r0
 8003dbc:	d00d      	beq.n	8003dda <ai_platform_network_create+0x46>
 8003dbe:	4b5c      	ldr	r3, [pc, #368]	; (8003f30 <ai_platform_network_create+0x19c>)
 8003dc0:	2118      	movs	r1, #24
 8003dc2:	6019      	str	r1, [r3, #0]
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	2918      	cmp	r1, #24
 8003dc8:	d01a      	beq.n	8003e00 <ai_platform_network_create+0x6c>
 8003dca:	f7ff fcb5 	bl	8003738 <_ai_platform_release_crc>
 8003dce:	f244 1333 	movw	r3, #16691	; 0x4133
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	b003      	add	sp, #12
 8003dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dda:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <ai_platform_network_create+0x1a0>)
 8003ddc:	2101      	movs	r1, #1
 8003dde:	6019      	str	r1, [r3, #0]
 8003de0:	2114      	movs	r1, #20
 8003de2:	e001      	b.n	8003de8 <ai_platform_network_create+0x54>
 8003de4:	3901      	subs	r1, #1
 8003de6:	d002      	beq.n	8003dee <ai_platform_network_create+0x5a>
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d1fa      	bne.n	8003de4 <ai_platform_network_create+0x50>
 8003dee:	4b51      	ldr	r3, [pc, #324]	; (8003f34 <ai_platform_network_create+0x1a0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b91b      	cbnz	r3, 8003dfc <ai_platform_network_create+0x68>
 8003df4:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <ai_platform_network_create+0x1a4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	d006      	beq.n	8003e0a <ai_platform_network_create+0x76>
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	e7e4      	b.n	8003dca <ai_platform_network_create+0x36>
 8003e00:	2101      	movs	r1, #1
 8003e02:	6019      	str	r1, [r3, #0]
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	2900      	cmp	r1, #0
 8003e08:	d1fc      	bne.n	8003e04 <ai_platform_network_create+0x70>
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7ff fc94 	bl	8003738 <_ai_platform_release_crc>
 8003e10:	4a4a      	ldr	r2, [pc, #296]	; (8003f3c <ai_platform_network_create+0x1a8>)
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	f7ff fc8b 	bl	8003734 <_ai_platform_acquire_crc>
 8003e1e:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <ai_platform_network_create+0x198>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2a:	d00d      	beq.n	8003e48 <ai_platform_network_create+0xb4>
 8003e2c:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <ai_platform_network_create+0x19c>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d1fc      	bne.n	8003e32 <ai_platform_network_create+0x9e>
 8003e38:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <ai_platform_network_create+0x1ac>)
 8003e3a:	4a42      	ldr	r2, [pc, #264]	; (8003f44 <ai_platform_network_create+0x1b0>)
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <ai_platform_network_create+0x1b4>)
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d00e      	beq.n	8003e64 <ai_platform_network_create+0xd0>
 8003e46:	e7fe      	b.n	8003e46 <ai_platform_network_create+0xb2>
 8003e48:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <ai_platform_network_create+0x1a0>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	d1fc      	bne.n	8003e4e <ai_platform_network_create+0xba>
 8003e54:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <ai_platform_network_create+0x1a4>)
 8003e56:	4a3b      	ldr	r2, [pc, #236]	; (8003f44 <ai_platform_network_create+0x1b0>)
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <ai_platform_network_create+0x1b4>)
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d000      	beq.n	8003e64 <ai_platform_network_create+0xd0>
 8003e62:	e7fe      	b.n	8003e62 <ai_platform_network_create+0xce>
 8003e64:	f7ff fc68 	bl	8003738 <_ai_platform_release_crc>
 8003e68:	b1ae      	cbz	r6, 8003e96 <ai_platform_network_create+0x102>
 8003e6a:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <ai_platform_network_create+0x1b8>)
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	6035      	str	r5, [r6, #0]
 8003e70:	f000 fc7c 	bl	800476c <core_init>
 8003e74:	b990      	cbnz	r0, 8003e9c <ai_platform_network_create+0x108>
 8003e76:	2430      	movs	r4, #48	; 0x30
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6033      	str	r3, [r6, #0]
 8003e7c:	2610      	movs	r6, #16
 8003e7e:	464a      	mov	r2, r9
 8003e80:	4641      	mov	r1, r8
 8003e82:	4638      	mov	r0, r7
 8003e84:	f001 fac8 	bl	8005418 <ai_version_get>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f364 0307 	bfi	r3, r4, #0, #8
 8003e8e:	6468      	str	r0, [r5, #68]	; 0x44
 8003e90:	f366 231f 	bfi	r3, r6, #8, #24
 8003e94:	e79d      	b.n	8003dd2 <ai_platform_network_create+0x3e>
 8003e96:	f241 0310 	movw	r3, #4112	; 0x1010
 8003e9a:	e79a      	b.n	8003dd2 <ai_platform_network_create+0x3e>
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <ai_platform_network_create+0x1a8>)
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	f7ff fc45 	bl	8003734 <_ai_platform_acquire_crc>
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <ai_platform_network_create+0x198>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d00d      	beq.n	8003ed4 <ai_platform_network_create+0x140>
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <ai_platform_network_create+0x19c>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	2a00      	cmp	r2, #0
 8003ec2:	d1fc      	bne.n	8003ebe <ai_platform_network_create+0x12a>
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <ai_platform_network_create+0x1ac>)
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <ai_platform_network_create+0x1b0>)
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <ai_platform_network_create+0x1b4>)
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d00e      	beq.n	8003ef0 <ai_platform_network_create+0x15c>
 8003ed2:	e7fe      	b.n	8003ed2 <ai_platform_network_create+0x13e>
 8003ed4:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <ai_platform_network_create+0x1a0>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	d1fc      	bne.n	8003eda <ai_platform_network_create+0x146>
 8003ee0:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <ai_platform_network_create+0x1a4>)
 8003ee2:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <ai_platform_network_create+0x1b0>)
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <ai_platform_network_create+0x1b4>)
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d000      	beq.n	8003ef0 <ai_platform_network_create+0x15c>
 8003eee:	e7fe      	b.n	8003eee <ai_platform_network_create+0x15a>
 8003ef0:	f7ff fc22 	bl	8003738 <_ai_platform_release_crc>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f001 fa8d 	bl	8005418 <ai_version_get>
 8003efe:	2200      	movs	r2, #0
 8003f00:	4604      	mov	r4, r0
 8003f02:	2105      	movs	r1, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	f001 fa87 	bl	8005418 <ai_version_get>
 8003f0a:	4284      	cmp	r4, r0
 8003f0c:	d001      	beq.n	8003f12 <ai_platform_network_create+0x17e>
 8003f0e:	2401      	movs	r4, #1
 8003f10:	e7b2      	b.n	8003e78 <ai_platform_network_create+0xe4>
 8003f12:	a802      	add	r0, sp, #8
 8003f14:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <ai_platform_network_create+0x1bc>)
 8003f16:	f840 3d04 	str.w	r3, [r0, #-4]!
 8003f1a:	f001 f9d9 	bl	80052d0 <ai_check_custom_types>
 8003f1e:	b110      	cbz	r0, 8003f26 <ai_platform_network_create+0x192>
 8003f20:	2600      	movs	r6, #0
 8003f22:	4634      	mov	r4, r6
 8003f24:	e7ab      	b.n	8003e7e <ai_platform_network_create+0xea>
 8003f26:	2402      	movs	r4, #2
 8003f28:	e7a6      	b.n	8003e78 <ai_platform_network_create+0xe4>
 8003f2a:	bf00      	nop
 8003f2c:	e0042000 	.word	0xe0042000
 8003f30:	58024c08 	.word	0x58024c08
 8003f34:	40023008 	.word	0x40023008
 8003f38:	40023000 	.word	0x40023000
 8003f3c:	e0002000 	.word	0xe0002000
 8003f40:	58024c00 	.word	0x58024c00
 8003f44:	f407a5c2 	.word	0xf407a5c2
 8003f48:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f4c:	a1c00100 	.word	0xa1c00100
 8003f50:	84048403 	.word	0x84048403

08003f54 <ai_platform_network_init>:
 8003f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d04b      	beq.n	8003ff4 <ai_platform_network_init+0xa0>
 8003f5c:	4b79      	ldr	r3, [pc, #484]	; (8004144 <ai_platform_network_init+0x1f0>)
 8003f5e:	6802      	ldr	r2, [r0, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	4604      	mov	r4, r0
 8003f64:	d146      	bne.n	8003ff4 <ai_platform_network_init+0xa0>
 8003f66:	4a78      	ldr	r2, [pc, #480]	; (8004148 <ai_platform_network_init+0x1f4>)
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	460e      	mov	r6, r1
 8003f72:	f7ff fbdf 	bl	8003734 <_ai_platform_acquire_crc>
 8003f76:	4b75      	ldr	r3, [pc, #468]	; (800414c <ai_platform_network_init+0x1f8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d00d      	beq.n	8003fa0 <ai_platform_network_init+0x4c>
 8003f84:	4b72      	ldr	r3, [pc, #456]	; (8004150 <ai_platform_network_init+0x1fc>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2a00      	cmp	r2, #0
 8003f8e:	d1fc      	bne.n	8003f8a <ai_platform_network_init+0x36>
 8003f90:	4b70      	ldr	r3, [pc, #448]	; (8004154 <ai_platform_network_init+0x200>)
 8003f92:	4a71      	ldr	r2, [pc, #452]	; (8004158 <ai_platform_network_init+0x204>)
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b70      	ldr	r3, [pc, #448]	; (800415c <ai_platform_network_init+0x208>)
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d00d      	beq.n	8003fba <ai_platform_network_init+0x66>
 8003f9e:	e7fe      	b.n	8003f9e <ai_platform_network_init+0x4a>
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <ai_platform_network_init+0x20c>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2a00      	cmp	r2, #0
 8003faa:	d1fc      	bne.n	8003fa6 <ai_platform_network_init+0x52>
 8003fac:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <ai_platform_network_init+0x210>)
 8003fae:	4a6a      	ldr	r2, [pc, #424]	; (8004158 <ai_platform_network_init+0x204>)
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b69      	ldr	r3, [pc, #420]	; (800415c <ai_platform_network_init+0x208>)
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d11b      	bne.n	8003ff2 <ai_platform_network_init+0x9e>
 8003fba:	f7ff fbbd 	bl	8003738 <_ai_platform_release_crc>
 8003fbe:	2e00      	cmp	r6, #0
 8003fc0:	d034      	beq.n	800402c <ai_platform_network_init+0xd8>
 8003fc2:	4b69      	ldr	r3, [pc, #420]	; (8004168 <ai_platform_network_init+0x214>)
 8003fc4:	6832      	ldr	r2, [r6, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d149      	bne.n	800405e <ai_platform_network_init+0x10a>
 8003fca:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003fce:	6930      	ldr	r0, [r6, #16]
 8003fd0:	89b3      	ldrh	r3, [r6, #12]
 8003fd2:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8003fd6:	62a0      	str	r0, [r4, #40]	; 0x28
 8003fd8:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8003fe2:	84a3      	strh	r3, [r4, #36]	; 0x24
 8003fe4:	60e2      	str	r2, [r4, #12]
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f001 f99c 	bl	8005324 <ai_layers_init_all>
 8003fec:	4620      	mov	r0, r4
 8003fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ff2:	e7fe      	b.n	8003ff2 <ai_platform_network_init+0x9e>
 8003ff4:	4a54      	ldr	r2, [pc, #336]	; (8004148 <ai_platform_network_init+0x1f4>)
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	f7ff fb99 	bl	8003734 <_ai_platform_acquire_crc>
 8004002:	4b52      	ldr	r3, [pc, #328]	; (800414c <ai_platform_network_init+0x1f8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400e:	d015      	beq.n	800403c <ai_platform_network_init+0xe8>
 8004010:	4b4f      	ldr	r3, [pc, #316]	; (8004150 <ai_platform_network_init+0x1fc>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2a00      	cmp	r2, #0
 800401a:	d1fc      	bne.n	8004016 <ai_platform_network_init+0xc2>
 800401c:	4b4d      	ldr	r3, [pc, #308]	; (8004154 <ai_platform_network_init+0x200>)
 800401e:	4a4e      	ldr	r2, [pc, #312]	; (8004158 <ai_platform_network_init+0x204>)
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b4d      	ldr	r3, [pc, #308]	; (800415c <ai_platform_network_init+0x208>)
 8004026:	429a      	cmp	r2, r3
 8004028:	d015      	beq.n	8004056 <ai_platform_network_init+0x102>
 800402a:	e7fe      	b.n	800402a <ai_platform_network_init+0xd6>
 800402c:	f104 0010 	add.w	r0, r4, #16
 8004030:	2211      	movs	r2, #17
 8004032:	2110      	movs	r1, #16
 8004034:	4634      	mov	r4, r6
 8004036:	f000 fba1 	bl	800477c <core_set_error>
 800403a:	e7d7      	b.n	8003fec <ai_platform_network_init+0x98>
 800403c:	4b48      	ldr	r3, [pc, #288]	; (8004160 <ai_platform_network_init+0x20c>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2a00      	cmp	r2, #0
 8004046:	d1fc      	bne.n	8004042 <ai_platform_network_init+0xee>
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <ai_platform_network_init+0x210>)
 800404a:	4a43      	ldr	r2, [pc, #268]	; (8004158 <ai_platform_network_init+0x204>)
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b42      	ldr	r3, [pc, #264]	; (800415c <ai_platform_network_init+0x208>)
 8004052:	429a      	cmp	r2, r3
 8004054:	d16d      	bne.n	8004132 <ai_platform_network_init+0x1de>
 8004056:	f7ff fb6f 	bl	8003738 <_ai_platform_release_crc>
 800405a:	2400      	movs	r4, #0
 800405c:	e7c6      	b.n	8003fec <ai_platform_network_init+0x98>
 800405e:	4630      	mov	r0, r6
 8004060:	2101      	movs	r1, #1
 8004062:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8004066:	f7ff fb19 	bl	800369c <ai_buffer_get_size>
 800406a:	4635      	mov	r5, r6
 800406c:	f106 071c 	add.w	r7, r6, #28
 8004070:	2101      	movs	r1, #1
 8004072:	4606      	mov	r6, r0
 8004074:	4638      	mov	r0, r7
 8004076:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800407a:	f7ff fb0f 	bl	800369c <ai_buffer_get_size>
 800407e:	2e00      	cmp	r6, #0
 8004080:	bf0a      	itet	eq
 8004082:	46b6      	moveq	lr, r6
 8004084:	f04f 0e01 	movne.w	lr, #1
 8004088:	4635      	moveq	r5, r6
 800408a:	2800      	cmp	r0, #0
 800408c:	d14b      	bne.n	8004126 <ai_platform_network_init+0x1d2>
 800408e:	4607      	mov	r7, r0
 8004090:	4684      	mov	ip, r0
 8004092:	f1b8 0f00 	cmp.w	r8, #0
 8004096:	d023      	beq.n	80040e0 <ai_platform_network_init+0x18c>
 8004098:	8be3      	ldrh	r3, [r4, #30]
 800409a:	4573      	cmp	r3, lr
 800409c:	d207      	bcs.n	80040ae <ai_platform_network_init+0x15a>
 800409e:	f104 0010 	add.w	r0, r4, #16
 80040a2:	2212      	movs	r2, #18
 80040a4:	2116      	movs	r1, #22
 80040a6:	f000 fb69 	bl	800477c <core_set_error>
 80040aa:	2400      	movs	r4, #0
 80040ac:	e79e      	b.n	8003fec <ai_platform_network_init+0x98>
 80040ae:	f1be 0f00 	cmp.w	lr, #0
 80040b2:	d006      	beq.n	80040c2 <ai_platform_network_init+0x16e>
 80040b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040b6:	6a26      	ldr	r6, [r4, #32]
 80040b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80040ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80040c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80040c4:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80040c8:	2600      	movs	r6, #0
 80040ca:	4563      	cmp	r3, ip
 80040cc:	83a6      	strh	r6, [r4, #28]
 80040ce:	d211      	bcs.n	80040f4 <ai_platform_network_init+0x1a0>
 80040d0:	f104 0010 	add.w	r0, r4, #16
 80040d4:	2213      	movs	r2, #19
 80040d6:	2116      	movs	r1, #22
 80040d8:	f000 fb50 	bl	800477c <core_set_error>
 80040dc:	4634      	mov	r4, r6
 80040de:	e785      	b.n	8003fec <ai_platform_network_init+0x98>
 80040e0:	2e00      	cmp	r6, #0
 80040e2:	d0d9      	beq.n	8004098 <ai_platform_network_init+0x144>
 80040e4:	f104 0010 	add.w	r0, r4, #16
 80040e8:	2212      	movs	r2, #18
 80040ea:	2110      	movs	r1, #16
 80040ec:	4644      	mov	r4, r8
 80040ee:	f000 fb45 	bl	800477c <core_set_error>
 80040f2:	e77b      	b.n	8003fec <ai_platform_network_init+0x98>
 80040f4:	f1bc 0f00 	cmp.w	ip, #0
 80040f8:	d013      	beq.n	8004122 <ai_platform_network_init+0x1ce>
 80040fa:	f04f 081c 	mov.w	r8, #28
 80040fe:	fb08 f80c 	mul.w	r8, r8, ip
 8004102:	eb07 0e06 	add.w	lr, r7, r6
 8004106:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800410a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800410c:	4435      	add	r5, r6
 800410e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004110:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004114:	361c      	adds	r6, #28
 8004116:	4546      	cmp	r6, r8
 8004118:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800411c:	d1f1      	bne.n	8004102 <ai_platform_network_init+0x1ae>
 800411e:	2300      	movs	r3, #0
 8004120:	e75c      	b.n	8003fdc <ai_platform_network_init+0x88>
 8004122:	4663      	mov	r3, ip
 8004124:	e75a      	b.n	8003fdc <ai_platform_network_init+0x88>
 8004126:	f1b9 0f00 	cmp.w	r9, #0
 800412a:	d003      	beq.n	8004134 <ai_platform_network_init+0x1e0>
 800412c:	f04f 0c01 	mov.w	ip, #1
 8004130:	e7af      	b.n	8004092 <ai_platform_network_init+0x13e>
 8004132:	e7fe      	b.n	8004132 <ai_platform_network_init+0x1de>
 8004134:	f104 0010 	add.w	r0, r4, #16
 8004138:	2213      	movs	r2, #19
 800413a:	2110      	movs	r1, #16
 800413c:	464c      	mov	r4, r9
 800413e:	f000 fb1d 	bl	800477c <core_set_error>
 8004142:	e753      	b.n	8003fec <ai_platform_network_init+0x98>
 8004144:	a1c00100 	.word	0xa1c00100
 8004148:	e0002000 	.word	0xe0002000
 800414c:	e0042000 	.word	0xe0042000
 8004150:	58024c08 	.word	0x58024c08
 8004154:	58024c00 	.word	0x58024c00
 8004158:	f407a5c2 	.word	0xf407a5c2
 800415c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004160:	40023008 	.word	0x40023008
 8004164:	40023000 	.word	0x40023000
 8004168:	a1facade 	.word	0xa1facade

0800416c <ai_platform_network_post_init>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	b120      	cbz	r0, 800417a <ai_platform_network_post_init+0xe>
 8004170:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <ai_platform_network_post_init+0x104>)
 8004172:	6802      	ldr	r2, [r0, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	4604      	mov	r4, r0
 8004178:	d02d      	beq.n	80041d6 <ai_platform_network_post_init+0x6a>
 800417a:	4a3e      	ldr	r2, [pc, #248]	; (8004274 <ai_platform_network_post_init+0x108>)
 800417c:	6813      	ldr	r3, [r2, #0]
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	f7ff fad6 	bl	8003734 <_ai_platform_acquire_crc>
 8004188:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <ai_platform_network_post_init+0x10c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d00d      	beq.n	80041b2 <ai_platform_network_post_init+0x46>
 8004196:	4b39      	ldr	r3, [pc, #228]	; (800427c <ai_platform_network_post_init+0x110>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2a00      	cmp	r2, #0
 80041a0:	d1fc      	bne.n	800419c <ai_platform_network_post_init+0x30>
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <ai_platform_network_post_init+0x114>)
 80041a4:	4a37      	ldr	r2, [pc, #220]	; (8004284 <ai_platform_network_post_init+0x118>)
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <ai_platform_network_post_init+0x11c>)
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d00d      	beq.n	80041cc <ai_platform_network_post_init+0x60>
 80041b0:	e7fe      	b.n	80041b0 <ai_platform_network_post_init+0x44>
 80041b2:	4b36      	ldr	r3, [pc, #216]	; (800428c <ai_platform_network_post_init+0x120>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	2a00      	cmp	r2, #0
 80041bc:	d1fc      	bne.n	80041b8 <ai_platform_network_post_init+0x4c>
 80041be:	4b34      	ldr	r3, [pc, #208]	; (8004290 <ai_platform_network_post_init+0x124>)
 80041c0:	4a30      	ldr	r2, [pc, #192]	; (8004284 <ai_platform_network_post_init+0x118>)
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b30      	ldr	r3, [pc, #192]	; (8004288 <ai_platform_network_post_init+0x11c>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d103      	bne.n	80041d4 <ai_platform_network_post_init+0x68>
 80041cc:	f7ff fab4 	bl	8003738 <_ai_platform_release_crc>
 80041d0:	2000      	movs	r0, #0
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	e7fe      	b.n	80041d4 <ai_platform_network_post_init+0x68>
 80041d6:	4a27      	ldr	r2, [pc, #156]	; (8004274 <ai_platform_network_post_init+0x108>)
 80041d8:	6813      	ldr	r3, [r2, #0]
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	f7ff faa8 	bl	8003734 <_ai_platform_acquire_crc>
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <ai_platform_network_post_init+0x10c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f0:	d00d      	beq.n	800420e <ai_platform_network_post_init+0xa2>
 80041f2:	4b22      	ldr	r3, [pc, #136]	; (800427c <ai_platform_network_post_init+0x110>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d1fc      	bne.n	80041f8 <ai_platform_network_post_init+0x8c>
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <ai_platform_network_post_init+0x114>)
 8004200:	4a20      	ldr	r2, [pc, #128]	; (8004284 <ai_platform_network_post_init+0x118>)
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <ai_platform_network_post_init+0x11c>)
 8004208:	429a      	cmp	r2, r3
 800420a:	d00e      	beq.n	800422a <ai_platform_network_post_init+0xbe>
 800420c:	e7fe      	b.n	800420c <ai_platform_network_post_init+0xa0>
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <ai_platform_network_post_init+0x120>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2a00      	cmp	r2, #0
 8004218:	d1fc      	bne.n	8004214 <ai_platform_network_post_init+0xa8>
 800421a:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <ai_platform_network_post_init+0x124>)
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <ai_platform_network_post_init+0x118>)
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <ai_platform_network_post_init+0x11c>)
 8004224:	429a      	cmp	r2, r3
 8004226:	d000      	beq.n	800422a <ai_platform_network_post_init+0xbe>
 8004228:	e7fe      	b.n	8004228 <ai_platform_network_post_init+0xbc>
 800422a:	f7ff fa85 	bl	8003738 <_ai_platform_release_crc>
 800422e:	68e3      	ldr	r3, [r4, #12]
 8004230:	f013 0502 	ands.w	r5, r3, #2
 8004234:	d011      	beq.n	800425a <ai_platform_network_post_init+0xee>
 8004236:	4620      	mov	r0, r4
 8004238:	f001 f888 	bl	800534c <ai_layers_post_init_all>
 800423c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800423e:	b1a3      	cbz	r3, 800426a <ai_platform_network_post_init+0xfe>
 8004240:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004242:	b195      	cbz	r5, 800426a <ai_platform_network_post_init+0xfe>
 8004244:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004246:	4629      	mov	r1, r5
 8004248:	2000      	movs	r0, #0
 800424a:	4798      	blx	r3
 800424c:	692b      	ldr	r3, [r5, #16]
 800424e:	42ab      	cmp	r3, r5
 8004250:	d00b      	beq.n	800426a <ai_platform_network_post_init+0xfe>
 8004252:	461d      	mov	r5, r3
 8004254:	b14b      	cbz	r3, 800426a <ai_platform_network_post_init+0xfe>
 8004256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004258:	e7f4      	b.n	8004244 <ai_platform_network_post_init+0xd8>
 800425a:	f104 0010 	add.w	r0, r4, #16
 800425e:	2210      	movs	r2, #16
 8004260:	2111      	movs	r1, #17
 8004262:	f000 fa8b 	bl	800477c <core_set_error>
 8004266:	4628      	mov	r0, r5
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	2001      	movs	r0, #1
 800426c:	bd38      	pop	{r3, r4, r5, pc}
 800426e:	bf00      	nop
 8004270:	a1c00100 	.word	0xa1c00100
 8004274:	e0002000 	.word	0xe0002000
 8004278:	e0042000 	.word	0xe0042000
 800427c:	58024c08 	.word	0x58024c08
 8004280:	58024c00 	.word	0x58024c00
 8004284:	f407a5c2 	.word	0xf407a5c2
 8004288:	b5e8b5cd 	.word	0xb5e8b5cd
 800428c:	40023008 	.word	0x40023008
 8004290:	40023000 	.word	0x40023000

08004294 <ai_platform_network_process>:
 8004294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004298:	b085      	sub	sp, #20
 800429a:	460d      	mov	r5, r1
 800429c:	9202      	str	r2, [sp, #8]
 800429e:	4604      	mov	r4, r0
 80042a0:	b120      	cbz	r0, 80042ac <ai_platform_network_process+0x18>
 80042a2:	4b73      	ldr	r3, [pc, #460]	; (8004470 <ai_platform_network_process+0x1dc>)
 80042a4:	6802      	ldr	r2, [r0, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf18      	it	ne
 80042aa:	2400      	movne	r4, #0
 80042ac:	4a71      	ldr	r2, [pc, #452]	; (8004474 <ai_platform_network_process+0x1e0>)
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	f7ff fa3d 	bl	8003734 <_ai_platform_acquire_crc>
 80042ba:	4b6f      	ldr	r3, [pc, #444]	; (8004478 <ai_platform_network_process+0x1e4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c6:	d00d      	beq.n	80042e4 <ai_platform_network_process+0x50>
 80042c8:	4b6c      	ldr	r3, [pc, #432]	; (800447c <ai_platform_network_process+0x1e8>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	d1fc      	bne.n	80042ce <ai_platform_network_process+0x3a>
 80042d4:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <ai_platform_network_process+0x1ec>)
 80042d6:	4a6b      	ldr	r2, [pc, #428]	; (8004484 <ai_platform_network_process+0x1f0>)
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <ai_platform_network_process+0x1f4>)
 80042de:	429a      	cmp	r2, r3
 80042e0:	d00e      	beq.n	8004300 <ai_platform_network_process+0x6c>
 80042e2:	e7fe      	b.n	80042e2 <ai_platform_network_process+0x4e>
 80042e4:	4b69      	ldr	r3, [pc, #420]	; (800448c <ai_platform_network_process+0x1f8>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2a00      	cmp	r2, #0
 80042ee:	d1fc      	bne.n	80042ea <ai_platform_network_process+0x56>
 80042f0:	4b67      	ldr	r3, [pc, #412]	; (8004490 <ai_platform_network_process+0x1fc>)
 80042f2:	4a64      	ldr	r2, [pc, #400]	; (8004484 <ai_platform_network_process+0x1f0>)
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b63      	ldr	r3, [pc, #396]	; (8004488 <ai_platform_network_process+0x1f4>)
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d000      	beq.n	8004300 <ai_platform_network_process+0x6c>
 80042fe:	e7fe      	b.n	80042fe <ai_platform_network_process+0x6a>
 8004300:	f7ff fa1a 	bl	8003738 <_ai_platform_release_crc>
 8004304:	2c00      	cmp	r4, #0
 8004306:	f000 8089 	beq.w	800441c <ai_platform_network_process+0x188>
 800430a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800430c:	2f00      	cmp	r7, #0
 800430e:	f040 822b 	bne.w	8004768 <ai_platform_network_process+0x4d4>
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2600      	movs	r6, #0
 800431a:	2b03      	cmp	r3, #3
 800431c:	6166      	str	r6, [r4, #20]
 800431e:	f040 821b 	bne.w	8004758 <ai_platform_network_process+0x4c4>
 8004322:	2d00      	cmp	r5, #0
 8004324:	f000 809c 	beq.w	8004460 <ai_platform_network_process+0x1cc>
 8004328:	2f00      	cmp	r7, #0
 800432a:	f000 8099 	beq.w	8004460 <ai_platform_network_process+0x1cc>
 800432e:	883b      	ldrh	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8095 	beq.w	8004460 <ai_platform_network_process+0x1cc>
 8004336:	69aa      	ldr	r2, [r5, #24]
 8004338:	9401      	str	r4, [sp, #4]
 800433a:	f8d2 8000 	ldr.w	r8, [r2]
 800433e:	429e      	cmp	r6, r3
 8004340:	f080 80a8 	bcs.w	8004494 <ai_platform_network_process+0x200>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80a4 	beq.w	8004494 <ai_platform_network_process+0x200>
 800434c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8004350:	2c00      	cmp	r4, #0
 8004352:	f000 809f 	beq.w	8004494 <ai_platform_network_process+0x200>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f8d3 b000 	ldr.w	fp, [r3]
 800435c:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8004360:	eb1b 0a09 	adds.w	sl, fp, r9
 8004364:	d07b      	beq.n	800445e <ai_platform_network_process+0x1ca>
 8004366:	69a3      	ldr	r3, [r4, #24]
 8004368:	2101      	movs	r1, #1
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	9303      	str	r3, [sp, #12]
 800436e:	4628      	mov	r0, r5
 8004370:	f7ff f994 	bl	800369c <ai_buffer_get_size>
 8004374:	9b03      	ldr	r3, [sp, #12]
 8004376:	4283      	cmp	r3, r0
 8004378:	d368      	bcc.n	800444c <ai_platform_network_process+0x1b8>
 800437a:	68e0      	ldr	r0, [r4, #12]
 800437c:	69a9      	ldr	r1, [r5, #24]
 800437e:	68c2      	ldr	r2, [r0, #12]
 8004380:	68cb      	ldr	r3, [r1, #12]
 8004382:	429a      	cmp	r2, r3
 8004384:	d162      	bne.n	800444c <ai_platform_network_process+0x1b8>
 8004386:	6882      	ldr	r2, [r0, #8]
 8004388:	688b      	ldr	r3, [r1, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d15e      	bne.n	800444c <ai_platform_network_process+0x1b8>
 800438e:	6842      	ldr	r2, [r0, #4]
 8004390:	684b      	ldr	r3, [r1, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d15a      	bne.n	800444c <ai_platform_network_process+0x1b8>
 8004396:	69a3      	ldr	r3, [r4, #24]
 8004398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800439c:	f001 f8d0 	bl	8005540 <ai_array_get_data_byte_size>
 80043a0:	9003      	str	r0, [sp, #12]
 80043a2:	4620      	mov	r0, r4
 80043a4:	f001 f83e 	bl	8005424 <get_tensor_byte_size>
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	4283      	cmp	r3, r0
 80043ac:	d34e      	bcc.n	800444c <ai_platform_network_process+0x1b8>
 80043ae:	69a3      	ldr	r3, [r4, #24]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	f001 f84b 	bl	800544c <ai_array_to_buffer_fmt>
 80043b6:	682b      	ldr	r3, [r5, #0]
 80043b8:	4043      	eors	r3, r0
 80043ba:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80043be:	d13c      	bne.n	800443a <ai_platform_network_process+0x1a6>
 80043c0:	686b      	ldr	r3, [r5, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d04b      	beq.n	800445e <ai_platform_network_process+0x1ca>
 80043c6:	69ab      	ldr	r3, [r5, #24]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	b362      	cbz	r2, 8004426 <ai_platform_network_process+0x192>
 80043cc:	4620      	mov	r0, r4
 80043ce:	9203      	str	r2, [sp, #12]
 80043d0:	f001 f828 	bl	8005424 <get_tensor_byte_size>
 80043d4:	f8ca 0008 	str.w	r0, [sl, #8]
 80043d8:	69ab      	ldr	r3, [r5, #24]
 80043da:	9a03      	ldr	r2, [sp, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	fb03 f000 	mul.w	r0, r3, r0
 80043e2:	f8ca 000c 	str.w	r0, [sl, #12]
 80043e6:	6869      	ldr	r1, [r5, #4]
 80043e8:	f8ca 1004 	str.w	r1, [sl, #4]
 80043ec:	686b      	ldr	r3, [r5, #4]
 80043ee:	4403      	add	r3, r0
 80043f0:	f84b 3009 	str.w	r3, [fp, r9]
 80043f4:	69a0      	ldr	r0, [r4, #24]
 80043f6:	6803      	ldr	r3, [r0, #0]
 80043f8:	4590      	cmp	r8, r2
 80043fa:	bf38      	it	cc
 80043fc:	4690      	movcc	r8, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	d408      	bmi.n	8004414 <ai_platform_network_process+0x180>
 8004402:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	4419      	add	r1, r3
 800440a:	6081      	str	r1, [r0, #8]
 800440c:	69a3      	ldr	r3, [r4, #24]
 800440e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	883b      	ldrh	r3, [r7, #0]
 8004416:	3601      	adds	r6, #1
 8004418:	351c      	adds	r5, #28
 800441a:	e790      	b.n	800433e <ai_platform_network_process+0xaa>
 800441c:	4623      	mov	r3, r4
 800441e:	4618      	mov	r0, r3
 8004420:	b005      	add	sp, #20
 8004422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004426:	9c01      	ldr	r4, [sp, #4]
 8004428:	4692      	mov	sl, r2
 800442a:	f104 0010 	add.w	r0, r4, #16
 800442e:	2221      	movs	r2, #33	; 0x21
 8004430:	2112      	movs	r1, #18
 8004432:	f000 f9a3 	bl	800477c <core_set_error>
 8004436:	4653      	mov	r3, sl
 8004438:	e7f1      	b.n	800441e <ai_platform_network_process+0x18a>
 800443a:	9c01      	ldr	r4, [sp, #4]
 800443c:	2219      	movs	r2, #25
 800443e:	f104 0010 	add.w	r0, r4, #16
 8004442:	2112      	movs	r1, #18
 8004444:	f000 f99a 	bl	800477c <core_set_error>
 8004448:	2300      	movs	r3, #0
 800444a:	e7e8      	b.n	800441e <ai_platform_network_process+0x18a>
 800444c:	9c01      	ldr	r4, [sp, #4]
 800444e:	2218      	movs	r2, #24
 8004450:	f104 0010 	add.w	r0, r4, #16
 8004454:	2112      	movs	r1, #18
 8004456:	f000 f991 	bl	800477c <core_set_error>
 800445a:	2300      	movs	r3, #0
 800445c:	e7df      	b.n	800441e <ai_platform_network_process+0x18a>
 800445e:	9c01      	ldr	r4, [sp, #4]
 8004460:	f104 0010 	add.w	r0, r4, #16
 8004464:	2217      	movs	r2, #23
 8004466:	2112      	movs	r1, #18
 8004468:	f000 f988 	bl	800477c <core_set_error>
 800446c:	2300      	movs	r3, #0
 800446e:	e7d6      	b.n	800441e <ai_platform_network_process+0x18a>
 8004470:	a1c00100 	.word	0xa1c00100
 8004474:	e0002000 	.word	0xe0002000
 8004478:	e0042000 	.word	0xe0042000
 800447c:	58024c08 	.word	0x58024c08
 8004480:	58024c00 	.word	0x58024c00
 8004484:	f407a5c2 	.word	0xf407a5c2
 8004488:	b5e8b5cd 	.word	0xb5e8b5cd
 800448c:	40023008 	.word	0x40023008
 8004490:	40023000 	.word	0x40023000
 8004494:	9c01      	ldr	r4, [sp, #4]
 8004496:	9a02      	ldr	r2, [sp, #8]
 8004498:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800449a:	2a00      	cmp	r2, #0
 800449c:	f000 80ab 	beq.w	80045f6 <ai_platform_network_process+0x362>
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f240 809e 	bls.w	80045e2 <ai_platform_network_process+0x34e>
 80044a6:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 80044aa:	f119 0f0c 	cmn.w	r9, #12
 80044ae:	f000 8098 	beq.w	80045e2 <ai_platform_network_process+0x34e>
 80044b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8093 	beq.w	80045e2 <ai_platform_network_process+0x34e>
 80044bc:	9d02      	ldr	r5, [sp, #8]
 80044be:	9401      	str	r4, [sp, #4]
 80044c0:	2700      	movs	r7, #0
 80044c2:	429f      	cmp	r7, r3
 80044c4:	f080 8095 	bcs.w	80045f2 <ai_platform_network_process+0x35e>
 80044c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8090 	beq.w	80045f2 <ai_platform_network_process+0x35e>
 80044d2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80044d6:	2c00      	cmp	r4, #0
 80044d8:	f000 808b 	beq.w	80045f2 <ai_platform_network_process+0x35e>
 80044dc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80044e0:	f8d3 b000 	ldr.w	fp, [r3]
 80044e4:	013e      	lsls	r6, r7, #4
 80044e6:	eb1b 0a06 	adds.w	sl, fp, r6
 80044ea:	f000 812c 	beq.w	8004746 <ai_platform_network_process+0x4b2>
 80044ee:	69a3      	ldr	r3, [r4, #24]
 80044f0:	2101      	movs	r1, #1
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	4628      	mov	r0, r5
 80044f8:	f7ff f8d0 	bl	800369c <ai_buffer_get_size>
 80044fc:	9b02      	ldr	r3, [sp, #8]
 80044fe:	4283      	cmp	r3, r0
 8004500:	d36e      	bcc.n	80045e0 <ai_platform_network_process+0x34c>
 8004502:	68e0      	ldr	r0, [r4, #12]
 8004504:	69a9      	ldr	r1, [r5, #24]
 8004506:	68c2      	ldr	r2, [r0, #12]
 8004508:	68cb      	ldr	r3, [r1, #12]
 800450a:	429a      	cmp	r2, r3
 800450c:	d168      	bne.n	80045e0 <ai_platform_network_process+0x34c>
 800450e:	6882      	ldr	r2, [r0, #8]
 8004510:	688b      	ldr	r3, [r1, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	d164      	bne.n	80045e0 <ai_platform_network_process+0x34c>
 8004516:	6842      	ldr	r2, [r0, #4]
 8004518:	684b      	ldr	r3, [r1, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d160      	bne.n	80045e0 <ai_platform_network_process+0x34c>
 800451e:	69a3      	ldr	r3, [r4, #24]
 8004520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004524:	f001 f80c 	bl	8005540 <ai_array_get_data_byte_size>
 8004528:	9002      	str	r0, [sp, #8]
 800452a:	4620      	mov	r0, r4
 800452c:	f000 ff7a 	bl	8005424 <get_tensor_byte_size>
 8004530:	9b02      	ldr	r3, [sp, #8]
 8004532:	4283      	cmp	r3, r0
 8004534:	d354      	bcc.n	80045e0 <ai_platform_network_process+0x34c>
 8004536:	69a3      	ldr	r3, [r4, #24]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f000 ff87 	bl	800544c <ai_array_to_buffer_fmt>
 800453e:	682b      	ldr	r3, [r5, #0]
 8004540:	4043      	eors	r3, r0
 8004542:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004546:	d142      	bne.n	80045ce <ai_platform_network_process+0x33a>
 8004548:	686b      	ldr	r3, [r5, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d035      	beq.n	80045ba <ai_platform_network_process+0x326>
 800454e:	69ab      	ldr	r3, [r5, #24]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	b342      	cbz	r2, 80045a6 <ai_platform_network_process+0x312>
 8004554:	4620      	mov	r0, r4
 8004556:	9202      	str	r2, [sp, #8]
 8004558:	f000 ff64 	bl	8005424 <get_tensor_byte_size>
 800455c:	f8ca 0008 	str.w	r0, [sl, #8]
 8004560:	69ab      	ldr	r3, [r5, #24]
 8004562:	9a02      	ldr	r2, [sp, #8]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fb03 f000 	mul.w	r0, r3, r0
 800456a:	f8ca 000c 	str.w	r0, [sl, #12]
 800456e:	6869      	ldr	r1, [r5, #4]
 8004570:	f8ca 1004 	str.w	r1, [sl, #4]
 8004574:	686b      	ldr	r3, [r5, #4]
 8004576:	4403      	add	r3, r0
 8004578:	f84b 3006 	str.w	r3, [fp, r6]
 800457c:	69a0      	ldr	r0, [r4, #24]
 800457e:	6803      	ldr	r3, [r0, #0]
 8004580:	4590      	cmp	r8, r2
 8004582:	bf38      	it	cc
 8004584:	4690      	movcc	r8, r2
 8004586:	009e      	lsls	r6, r3, #2
 8004588:	d408      	bmi.n	800459c <ai_platform_network_process+0x308>
 800458a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	4419      	add	r1, r3
 8004592:	6081      	str	r1, [r0, #8]
 8004594:	69a3      	ldr	r3, [r4, #24]
 8004596:	f8da 2004 	ldr.w	r2, [sl, #4]
 800459a:	60da      	str	r2, [r3, #12]
 800459c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80045a0:	3701      	adds	r7, #1
 80045a2:	351c      	adds	r5, #28
 80045a4:	e78d      	b.n	80044c2 <ai_platform_network_process+0x22e>
 80045a6:	9c01      	ldr	r4, [sp, #4]
 80045a8:	4692      	mov	sl, r2
 80045aa:	f104 0010 	add.w	r0, r4, #16
 80045ae:	2221      	movs	r2, #33	; 0x21
 80045b0:	2113      	movs	r1, #19
 80045b2:	f000 f8e3 	bl	800477c <core_set_error>
 80045b6:	4653      	mov	r3, sl
 80045b8:	e731      	b.n	800441e <ai_platform_network_process+0x18a>
 80045ba:	9c01      	ldr	r4, [sp, #4]
 80045bc:	469a      	mov	sl, r3
 80045be:	f104 0010 	add.w	r0, r4, #16
 80045c2:	2217      	movs	r2, #23
 80045c4:	2113      	movs	r1, #19
 80045c6:	f000 f8d9 	bl	800477c <core_set_error>
 80045ca:	4653      	mov	r3, sl
 80045cc:	e727      	b.n	800441e <ai_platform_network_process+0x18a>
 80045ce:	9c01      	ldr	r4, [sp, #4]
 80045d0:	2219      	movs	r2, #25
 80045d2:	f104 0010 	add.w	r0, r4, #16
 80045d6:	2113      	movs	r1, #19
 80045d8:	f000 f8d0 	bl	800477c <core_set_error>
 80045dc:	2300      	movs	r3, #0
 80045de:	e71e      	b.n	800441e <ai_platform_network_process+0x18a>
 80045e0:	9c01      	ldr	r4, [sp, #4]
 80045e2:	f104 0010 	add.w	r0, r4, #16
 80045e6:	2218      	movs	r2, #24
 80045e8:	2113      	movs	r1, #19
 80045ea:	f000 f8c7 	bl	800477c <core_set_error>
 80045ee:	2300      	movs	r3, #0
 80045f0:	e715      	b.n	800441e <ai_platform_network_process+0x18a>
 80045f2:	9c01      	ldr	r4, [sp, #4]
 80045f4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80045f6:	f8a4 8014 	strh.w	r8, [r4, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80a0 	beq.w	8004740 <ai_platform_network_process+0x4ac>
 8004600:	2b01      	cmp	r3, #1
 8004602:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004604:	f240 809a 	bls.w	800473c <ai_platform_network_process+0x4a8>
 8004608:	f105 070c 	add.w	r7, r5, #12
 800460c:	8ae3      	ldrh	r3, [r4, #22]
 800460e:	8aa2      	ldrh	r2, [r4, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	f67f af04 	bls.w	800441e <ai_platform_network_process+0x18a>
 8004616:	46a3      	mov	fp, r4
 8004618:	2d00      	cmp	r5, #0
 800461a:	d036      	beq.n	800468a <ai_platform_network_process+0x3f6>
 800461c:	882b      	ldrh	r3, [r5, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d033      	beq.n	800468a <ai_platform_network_process+0x3f6>
 8004622:	686b      	ldr	r3, [r5, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d030      	beq.n	800468a <ai_platform_network_process+0x3f6>
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f04f 0800 	mov.w	r8, #0
 800462e:	b9db      	cbnz	r3, 8004668 <ai_platform_network_process+0x3d4>
 8004630:	e02b      	b.n	800468a <ai_platform_network_process+0x3f6>
 8004632:	68d4      	ldr	r4, [r2, #12]
 8004634:	1b00      	subs	r0, r0, r4
 8004636:	4401      	add	r1, r0
 8004638:	6091      	str	r1, [r2, #8]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	6872      	ldr	r2, [r6, #4]
 800463e:	60da      	str	r2, [r3, #12]
 8004640:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004644:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004648:	440b      	add	r3, r1
 800464a:	4293      	cmp	r3, r2
 800464c:	bf24      	itt	cs
 800464e:	68f3      	ldrcs	r3, [r6, #12]
 8004650:	1ad3      	subcs	r3, r2, r3
 8004652:	6073      	str	r3, [r6, #4]
 8004654:	882b      	ldrh	r3, [r5, #0]
 8004656:	f108 0801 	add.w	r8, r8, #1
 800465a:	4598      	cmp	r8, r3
 800465c:	d215      	bcs.n	800468a <ai_platform_network_process+0x3f6>
 800465e:	686b      	ldr	r3, [r5, #4]
 8004660:	b19b      	cbz	r3, 800468a <ai_platform_network_process+0x3f6>
 8004662:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004666:	b183      	cbz	r3, 800468a <ai_platform_network_process+0x3f6>
 8004668:	68a9      	ldr	r1, [r5, #8]
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	f8d1 a000 	ldr.w	sl, [r1]
 8004670:	6814      	ldr	r4, [r2, #0]
 8004672:	6890      	ldr	r0, [r2, #8]
 8004674:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004678:	eb0a 0609 	add.w	r6, sl, r9
 800467c:	00a4      	lsls	r4, r4, #2
 800467e:	6871      	ldr	r1, [r6, #4]
 8004680:	d5d7      	bpl.n	8004632 <ai_platform_network_process+0x39e>
 8004682:	68b2      	ldr	r2, [r6, #8]
 8004684:	f000 ff9e 	bl	80055c4 <memcpy>
 8004688:	e7da      	b.n	8004640 <ai_platform_network_process+0x3ac>
 800468a:	4658      	mov	r0, fp
 800468c:	f000 fe76 	bl	800537c <ai_layers_forward_all>
 8004690:	2f00      	cmp	r7, #0
 8004692:	d047      	beq.n	8004724 <ai_platform_network_process+0x490>
 8004694:	883b      	ldrh	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d044      	beq.n	8004724 <ai_platform_network_process+0x490>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d041      	beq.n	8004724 <ai_platform_network_process+0x490>
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d03e      	beq.n	8004724 <ai_platform_network_process+0x490>
 80046a6:	f04f 0800 	mov.w	r8, #0
 80046aa:	e019      	b.n	80046e0 <ai_platform_network_process+0x44c>
 80046ac:	f85a 2009 	ldr.w	r2, [sl, r9]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf24      	itt	cs
 80046b4:	68f3      	ldrcs	r3, [r6, #12]
 80046b6:	1ad3      	subcs	r3, r2, r3
 80046b8:	6073      	str	r3, [r6, #4]
 80046ba:	6981      	ldr	r1, [r0, #24]
 80046bc:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80046c0:	1b12      	subs	r2, r2, r4
 80046c2:	4413      	add	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
 80046c6:	6983      	ldr	r3, [r0, #24]
 80046c8:	6872      	ldr	r2, [r6, #4]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	883b      	ldrh	r3, [r7, #0]
 80046ce:	f108 0801 	add.w	r8, r8, #1
 80046d2:	4598      	cmp	r8, r3
 80046d4:	d226      	bcs.n	8004724 <ai_platform_network_process+0x490>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	b323      	cbz	r3, 8004724 <ai_platform_network_process+0x490>
 80046da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80046de:	b308      	cbz	r0, 8004724 <ai_platform_network_process+0x490>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	6981      	ldr	r1, [r0, #24]
 80046e4:	f8d3 a000 	ldr.w	sl, [r3]
 80046e8:	680c      	ldr	r4, [r1, #0]
 80046ea:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80046ee:	eb0a 0609 	add.w	r6, sl, r9
 80046f2:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80046f6:	00a4      	lsls	r4, r4, #2
 80046f8:	eb0c 0302 	add.w	r3, ip, r2
 80046fc:	d5d6      	bpl.n	80046ac <ai_platform_network_process+0x418>
 80046fe:	6889      	ldr	r1, [r1, #8]
 8004700:	4660      	mov	r0, ip
 8004702:	f000 ff5f 	bl	80055c4 <memcpy>
 8004706:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800470a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800470e:	440b      	add	r3, r1
 8004710:	4293      	cmp	r3, r2
 8004712:	bf24      	itt	cs
 8004714:	68f3      	ldrcs	r3, [r6, #12]
 8004716:	1ad3      	subcs	r3, r2, r3
 8004718:	6073      	str	r3, [r6, #4]
 800471a:	883b      	ldrh	r3, [r7, #0]
 800471c:	f108 0801 	add.w	r8, r8, #1
 8004720:	4598      	cmp	r8, r3
 8004722:	d3d8      	bcc.n	80046d6 <ai_platform_network_process+0x442>
 8004724:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 8004728:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800472c:	3301      	adds	r3, #1
 800472e:	b29b      	uxth	r3, r3
 8004730:	429a      	cmp	r2, r3
 8004732:	f8ab 3016 	strh.w	r3, [fp, #22]
 8004736:	f63f af6f 	bhi.w	8004618 <ai_platform_network_process+0x384>
 800473a:	e670      	b.n	800441e <ai_platform_network_process+0x18a>
 800473c:	2700      	movs	r7, #0
 800473e:	e765      	b.n	800460c <ai_platform_network_process+0x378>
 8004740:	461d      	mov	r5, r3
 8004742:	461f      	mov	r7, r3
 8004744:	e762      	b.n	800460c <ai_platform_network_process+0x378>
 8004746:	9c01      	ldr	r4, [sp, #4]
 8004748:	2217      	movs	r2, #23
 800474a:	f104 0010 	add.w	r0, r4, #16
 800474e:	2113      	movs	r1, #19
 8004750:	f000 f814 	bl	800477c <core_set_error>
 8004754:	4653      	mov	r3, sl
 8004756:	e662      	b.n	800441e <ai_platform_network_process+0x18a>
 8004758:	f104 0010 	add.w	r0, r4, #16
 800475c:	2230      	movs	r2, #48	; 0x30
 800475e:	2111      	movs	r1, #17
 8004760:	f000 f80c 	bl	800477c <core_set_error>
 8004764:	4633      	mov	r3, r6
 8004766:	e65a      	b.n	800441e <ai_platform_network_process+0x18a>
 8004768:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800476a:	e5d2      	b.n	8004312 <ai_platform_network_process+0x7e>

0800476c <core_init>:
 800476c:	2001      	movs	r0, #1
 800476e:	4770      	bx	lr

08004770 <core_get_error>:
 8004770:	4603      	mov	r3, r0
 8004772:	2200      	movs	r2, #0
 8004774:	6800      	ldr	r0, [r0, #0]
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <core_set_error>:
 800477c:	7803      	ldrb	r3, [r0, #0]
 800477e:	b933      	cbnz	r3, 800478e <core_set_error+0x12>
 8004780:	7001      	strb	r1, [r0, #0]
 8004782:	6803      	ldr	r3, [r0, #0]
 8004784:	f362 231f 	bfi	r3, r2, #8, #24
 8004788:	6003      	str	r3, [r0, #0]
 800478a:	2001      	movs	r0, #1
 800478c:	4770      	bx	lr
 800478e:	2000      	movs	r0, #0
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop

08004794 <forward_dense>:
 8004794:	6983      	ldr	r3, [r0, #24]
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	2a00      	cmp	r2, #0
 800479a:	f000 8193 	beq.w	8004ac4 <forward_dense+0x330>
 800479e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a2:	ed2d 8b10 	vpush	{d8-d15}
 80047a6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80047aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80047ae:	b099      	sub	sp, #100	; 0x64
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8194 	beq.w	8004ade <forward_dense+0x34a>
 80047b6:	f8d3 8000 	ldr.w	r8, [r3]
 80047ba:	2a01      	cmp	r2, #1
 80047bc:	f240 817f 	bls.w	8004abe <forward_dense+0x32a>
 80047c0:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80047c4:	b104      	cbz	r4, 80047c8 <forward_dense+0x34>
 80047c6:	6824      	ldr	r4, [r4, #0]
 80047c8:	2a02      	cmp	r2, #2
 80047ca:	f000 817d 	beq.w	8004ac8 <forward_dense+0x334>
 80047ce:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 817b 	bne.w	8004ace <forward_dense+0x33a>
 80047d8:	f11c 0118 	adds.w	r1, ip, #24
 80047dc:	930e      	str	r3, [sp, #56]	; 0x38
 80047de:	f000 817c 	beq.w	8004ada <forward_dense+0x346>
 80047e2:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 80047e6:	2901      	cmp	r1, #1
 80047e8:	f240 83ab 	bls.w	8004f42 <forward_dense+0x7ae>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8178 	beq.w	8004ae2 <forward_dense+0x34e>
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80047f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047f8:	68e7      	ldr	r7, [r4, #12]
 80047fa:	6998      	ldr	r0, [r3, #24]
 80047fc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8004800:	6803      	ldr	r3, [r0, #0]
 8004802:	6849      	ldr	r1, [r1, #4]
 8004804:	9115      	str	r1, [sp, #84]	; 0x54
 8004806:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 800480a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800480e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8004812:	fa4e f101 	asr.w	r1, lr, r1
 8004816:	2a03      	cmp	r2, #3
 8004818:	68ff      	ldr	r7, [r7, #12]
 800481a:	9113      	str	r1, [sp, #76]	; 0x4c
 800481c:	fb05 f506 	mul.w	r5, r5, r6
 8004820:	f000 8373 	beq.w	8004f0a <forward_dense+0x776>
 8004824:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8004828:	2a00      	cmp	r2, #0
 800482a:	f000 8371 	beq.w	8004f10 <forward_dense+0x77c>
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	2a00      	cmp	r2, #0
 8004832:	f000 836d 	beq.w	8004f10 <forward_dense+0x77c>
 8004836:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800483a:	2b04      	cmp	r3, #4
 800483c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8004840:	f000 836c 	beq.w	8004f1c <forward_dense+0x788>
 8004844:	2b08      	cmp	r3, #8
 8004846:	f000 8369 	beq.w	8004f1c <forward_dense+0x788>
 800484a:	f04f 0a00 	mov.w	sl, #0
 800484e:	69a3      	ldr	r3, [r4, #24]
 8004850:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8004854:	6899      	ldr	r1, [r3, #8]
 8004856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004858:	9102      	str	r1, [sp, #8]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	6892      	ldr	r2, [r2, #8]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	9305      	str	r3, [sp, #20]
 8004862:	00ad      	lsls	r5, r5, #2
 8004864:	fb07 1005 	mla	r0, r7, r5, r1
 8004868:	00b4      	lsls	r4, r6, #2
 800486a:	4281      	cmp	r1, r0
 800486c:	9011      	str	r0, [sp, #68]	; 0x44
 800486e:	9410      	str	r4, [sp, #64]	; 0x40
 8004870:	eb01 0804 	add.w	r8, r1, r4
 8004874:	f080 811e 	bcs.w	8004ab4 <forward_dense+0x320>
 8004878:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800487a:	eddf faa0 	vldr	s31, [pc, #640]	; 8004afc <forward_dense+0x368>
 800487e:	08e8      	lsrs	r0, r5, #3
 8004880:	0141      	lsls	r1, r0, #5
 8004882:	f025 0301 	bic.w	r3, r5, #1
 8004886:	4606      	mov	r6, r0
 8004888:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 800488c:	9001      	str	r0, [sp, #4]
 800488e:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 8004892:	00f7      	lsls	r7, r6, #3
 8004894:	9316      	str	r3, [sp, #88]	; 0x58
 8004896:	0143      	lsls	r3, r0, #5
 8004898:	00b6      	lsls	r6, r6, #2
 800489a:	f1a5 0410 	sub.w	r4, r5, #16
 800489e:	9307      	str	r3, [sp, #28]
 80048a0:	f107 0308 	add.w	r3, r7, #8
 80048a4:	0924      	lsrs	r4, r4, #4
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	1d33      	adds	r3, r6, #4
 80048aa:	3401      	adds	r4, #1
 80048ac:	930d      	str	r3, [sp, #52]	; 0x34
 80048ae:	f005 0301 	and.w	r3, r5, #1
 80048b2:	01a4      	lsls	r4, r4, #6
 80048b4:	f005 0907 	and.w	r9, r5, #7
 80048b8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ba:	00ab      	lsls	r3, r5, #2
 80048bc:	9312      	str	r3, [sp, #72]	; 0x48
 80048be:	9703      	str	r7, [sp, #12]
 80048c0:	960c      	str	r6, [sp, #48]	; 0x30
 80048c2:	9417      	str	r4, [sp, #92]	; 0x5c
 80048c4:	eb02 0b01 	add.w	fp, r2, r1
 80048c8:	4653      	mov	r3, sl
 80048ca:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80048ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048d0:	9907      	ldr	r1, [sp, #28]
 80048d2:	6992      	ldr	r2, [r2, #24]
 80048d4:	6894      	ldr	r4, [r2, #8]
 80048d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048d8:	4459      	add	r1, fp
 80048da:	9106      	str	r1, [sp, #24]
 80048dc:	2a00      	cmp	r2, #0
 80048de:	f000 810f 	beq.w	8004b00 <forward_dense+0x36c>
 80048e2:	6992      	ldr	r2, [r2, #24]
 80048e4:	6896      	ldr	r6, [r2, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 810e 	beq.w	8004b08 <forward_dense+0x374>
 80048ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048ee:	2a04      	cmp	r2, #4
 80048f0:	f000 821e 	beq.w	8004d30 <forward_dense+0x59c>
 80048f4:	9a02      	ldr	r2, [sp, #8]
 80048f6:	4590      	cmp	r8, r2
 80048f8:	f240 80d3 	bls.w	8004aa2 <forward_dense+0x30e>
 80048fc:	4694      	mov	ip, r2
 80048fe:	9a07      	ldr	r2, [sp, #28]
 8004900:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004904:	f102 0e20 	add.w	lr, r2, #32
 8004908:	46b1      	mov	r9, r6
 800490a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800490c:	44de      	add	lr, fp
 800490e:	f1b9 0f00 	cmp.w	r9, #0
 8004912:	f000 80e8 	beq.w	8004ae6 <forward_dense+0x352>
 8004916:	9a01      	ldr	r2, [sp, #4]
 8004918:	edd9 2a00 	vldr	s5, [r9]
 800491c:	eddf 6a77 	vldr	s13, [pc, #476]	; 8004afc <forward_dense+0x368>
 8004920:	f109 0904 	add.w	r9, r9, #4
 8004924:	2a00      	cmp	r2, #0
 8004926:	f000 80e6 	beq.w	8004af6 <forward_dense+0x362>
 800492a:	9904      	ldr	r1, [sp, #16]
 800492c:	f104 0208 	add.w	r2, r4, #8
 8004930:	190f      	adds	r7, r1, r4
 8004932:	4671      	mov	r1, lr
 8004934:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 8004938:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800493c:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8004940:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 8004944:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004948:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 800494c:	ed51 3a04 	vldr	s7, [r1, #-16]
 8004950:	ed51 4a03 	vldr	s9, [r1, #-12]
 8004954:	ed51 5a02 	vldr	s11, [r1, #-8]
 8004958:	ed11 6a01 	vldr	s12, [r1, #-4]
 800495c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004960:	ed95 7a00 	vldr	s14, [r5]
 8004964:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 8004968:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	ed90 7a00 	vldr	s14, [r0]
 8004974:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 8004978:	eee7 7a03 	vfma.f32	s15, s14, s6
 800497c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004980:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004984:	ed95 3a00 	vldr	s6, [r5]
 8004988:	ed90 7a00 	vldr	s14, [r0]
 800498c:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 8004990:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8004994:	eee3 7a04 	vfma.f32	s15, s6, s8
 8004998:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800499c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80049a0:	ed95 3a00 	vldr	s6, [r5]
 80049a4:	ed90 4a00 	vldr	s8, [r0]
 80049a8:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 80049ac:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80049b0:	eee7 7a05 	vfma.f32	s15, s14, s10
 80049b4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80049b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80049bc:	ed95 5a00 	vldr	s10, [r5]
 80049c0:	ed90 7a00 	vldr	s14, [r0]
 80049c4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80049c8:	3208      	adds	r2, #8
 80049ca:	4297      	cmp	r7, r2
 80049cc:	f101 0120 	add.w	r1, r1, #32
 80049d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80049d4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80049d8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80049dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80049e0:	d1a8      	bne.n	8004934 <forward_dense+0x1a0>
 80049e2:	9a03      	ldr	r2, [sp, #12]
 80049e4:	18a1      	adds	r1, r4, r2
 80049e6:	465a      	mov	r2, fp
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	d04a      	beq.n	8004a82 <forward_dense+0x2ee>
 80049ec:	7808      	ldrb	r0, [r1, #0]
 80049ee:	ed92 7a00 	vldr	s14, [r2]
 80049f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80049f6:	edd0 7a00 	vldr	s15, [r0]
 80049fa:	2e01      	cmp	r6, #1
 80049fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a00:	d03f      	beq.n	8004a82 <forward_dense+0x2ee>
 8004a02:	7848      	ldrb	r0, [r1, #1]
 8004a04:	edd2 7a01 	vldr	s15, [r2, #4]
 8004a08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a0c:	ed90 7a00 	vldr	s14, [r0]
 8004a10:	2e02      	cmp	r6, #2
 8004a12:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a16:	d034      	beq.n	8004a82 <forward_dense+0x2ee>
 8004a18:	7888      	ldrb	r0, [r1, #2]
 8004a1a:	edd2 7a02 	vldr	s15, [r2, #8]
 8004a1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a22:	ed90 7a00 	vldr	s14, [r0]
 8004a26:	2e03      	cmp	r6, #3
 8004a28:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a2c:	d029      	beq.n	8004a82 <forward_dense+0x2ee>
 8004a2e:	78c8      	ldrb	r0, [r1, #3]
 8004a30:	edd2 7a03 	vldr	s15, [r2, #12]
 8004a34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a38:	ed90 7a00 	vldr	s14, [r0]
 8004a3c:	2e04      	cmp	r6, #4
 8004a3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a42:	d01e      	beq.n	8004a82 <forward_dense+0x2ee>
 8004a44:	7908      	ldrb	r0, [r1, #4]
 8004a46:	edd2 7a04 	vldr	s15, [r2, #16]
 8004a4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a4e:	ed90 7a00 	vldr	s14, [r0]
 8004a52:	2e05      	cmp	r6, #5
 8004a54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a58:	d013      	beq.n	8004a82 <forward_dense+0x2ee>
 8004a5a:	7948      	ldrb	r0, [r1, #5]
 8004a5c:	edd2 7a05 	vldr	s15, [r2, #20]
 8004a60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a64:	ed90 7a00 	vldr	s14, [r0]
 8004a68:	2e06      	cmp	r6, #6
 8004a6a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a6e:	d008      	beq.n	8004a82 <forward_dense+0x2ee>
 8004a70:	7989      	ldrb	r1, [r1, #6]
 8004a72:	edd2 7a06 	vldr	s15, [r2, #24]
 8004a76:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8004a7a:	ed92 7a00 	vldr	s14, [r2]
 8004a7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004a82:	4454      	add	r4, sl
 8004a84:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8004a88:	ecec 6a01 	vstmia	ip!, {s13}
 8004a8c:	45c4      	cmp	ip, r8
 8004a8e:	f4ff af3e 	bcc.w	800490e <forward_dense+0x17a>
 8004a92:	9902      	ldr	r1, [sp, #8]
 8004a94:	43ca      	mvns	r2, r1
 8004a96:	4442      	add	r2, r8
 8004a98:	f022 0203 	bic.w	r2, r2, #3
 8004a9c:	3204      	adds	r2, #4
 8004a9e:	188a      	adds	r2, r1, r2
 8004aa0:	9202      	str	r2, [sp, #8]
 8004aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004aa4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004aa6:	4490      	add	r8, r2
 8004aa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004aaa:	4493      	add	fp, r2
 8004aac:	9a02      	ldr	r2, [sp, #8]
 8004aae:	428a      	cmp	r2, r1
 8004ab0:	f4ff af0d 	bcc.w	80048ce <forward_dense+0x13a>
 8004ab4:	b019      	add	sp, #100	; 0x64
 8004ab6:	ecbd 8b10 	vpop	{d8-d15}
 8004aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abe:	2300      	movs	r3, #0
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	deff      	udf	#255	; 0xff
 8004ac4:	6853      	ldr	r3, [r2, #4]
 8004ac6:	deff      	udf	#255	; 0xff
 8004ac8:	2300      	movs	r3, #0
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	deff      	udf	#255	; 0xff
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	910e      	str	r1, [sp, #56]	; 0x38
 8004ad2:	f11c 0118 	adds.w	r1, ip, #24
 8004ad6:	f47f ae84 	bne.w	80047e2 <forward_dense+0x4e>
 8004ada:	910f      	str	r1, [sp, #60]	; 0x3c
 8004adc:	e68b      	b.n	80047f6 <forward_dense+0x62>
 8004ade:	4698      	mov	r8, r3
 8004ae0:	e66b      	b.n	80047ba <forward_dense+0x26>
 8004ae2:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ae4:	e687      	b.n	80047f6 <forward_dense+0x62>
 8004ae6:	9a01      	ldr	r2, [sp, #4]
 8004ae8:	eddf 6a04 	vldr	s13, [pc, #16]	; 8004afc <forward_dense+0x368>
 8004aec:	eef0 2a6f 	vmov.f32	s5, s31
 8004af0:	2a00      	cmp	r2, #0
 8004af2:	f47f af1a 	bne.w	800492a <forward_dense+0x196>
 8004af6:	9a06      	ldr	r2, [sp, #24]
 8004af8:	4621      	mov	r1, r4
 8004afa:	e775      	b.n	80049e8 <forward_dense+0x254>
 8004afc:	00000000 	.word	0x00000000
 8004b00:	4616      	mov	r6, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f47f aef2 	bne.w	80048ec <forward_dense+0x158>
 8004b08:	9a02      	ldr	r2, [sp, #8]
 8004b0a:	4590      	cmp	r8, r2
 8004b0c:	d9c9      	bls.n	8004aa2 <forward_dense+0x30e>
 8004b0e:	4615      	mov	r5, r2
 8004b10:	9a07      	ldr	r2, [sp, #28]
 8004b12:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004b14:	9308      	str	r3, [sp, #32]
 8004b16:	f102 0740 	add.w	r7, r2, #64	; 0x40
 8004b1a:	9a06      	ldr	r2, [sp, #24]
 8004b1c:	9b05      	ldr	r3, [sp, #20]
 8004b1e:	4610      	mov	r0, r2
 8004b20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b22:	445f      	add	r7, fp
 8004b24:	eb00 0c02 	add.w	ip, r0, r2
 8004b28:	f001 0e0f 	and.w	lr, r1, #15
 8004b2c:	468a      	mov	sl, r1
 8004b2e:	4691      	mov	r9, r2
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	f000 81de 	beq.w	8004ef2 <forward_dense+0x75e>
 8004b36:	f1ba 0f0f 	cmp.w	sl, #15
 8004b3a:	ed96 fa00 	vldr	s30, [r6]
 8004b3e:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8004afc <forward_dense+0x368>
 8004b42:	f106 0604 	add.w	r6, r6, #4
 8004b46:	f240 81dc 	bls.w	8004f02 <forward_dense+0x76e>
 8004b4a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004b4e:	463a      	mov	r2, r7
 8004b50:	4650      	mov	r0, sl
 8004b52:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 8004b56:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8004b5a:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 8004b5e:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 8004b62:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 8004b66:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 8004b6a:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 8004b6e:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 8004b72:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 8004b76:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 8004b7a:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 8004b7e:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004b82:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 8004b86:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 8004b8a:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 8004b8e:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 8004b92:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004b96:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 8004b9a:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004b9e:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 8004ba2:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004ba6:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 8004baa:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 8004bae:	ed12 4a04 	vldr	s8, [r2, #-16]
 8004bb2:	ed51 4a04 	vldr	s9, [r1, #-16]
 8004bb6:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004bba:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004bbe:	ed12 6a02 	vldr	s12, [r2, #-8]
 8004bc2:	ed11 7a02 	vldr	s14, [r1, #-8]
 8004bc6:	ee67 7aae 	vmul.f32	s15, s15, s29
 8004bca:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 8004bce:	eeee 7a2d 	vfma.f32	s15, s28, s27
 8004bd2:	3810      	subs	r0, #16
 8004bd4:	280f      	cmp	r0, #15
 8004bd6:	ed11 ea01 	vldr	s28, [r1, #-4]
 8004bda:	ed52 da01 	vldr	s27, [r2, #-4]
 8004bde:	eeed 7a2e 	vfma.f32	s15, s26, s29
 8004be2:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8004be6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004bea:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8004bee:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8004bf2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8004bf6:	eee9 7a89 	vfma.f32	s15, s19, s18
 8004bfa:	eee8 7a88 	vfma.f32	s15, s17, s16
 8004bfe:	eee0 7a20 	vfma.f32	s15, s0, s1
 8004c02:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004c06:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004c0a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004c0e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004c12:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004c16:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004c1a:	eeee 7a2d 	vfma.f32	s15, s28, s27
 8004c1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004c22:	d896      	bhi.n	8004b52 <forward_dense+0x3be>
 8004c24:	eb04 0009 	add.w	r0, r4, r9
 8004c28:	4672      	mov	r2, lr
 8004c2a:	4661      	mov	r1, ip
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d075      	beq.n	8004d1c <forward_dense+0x588>
 8004c30:	ed90 7a00 	vldr	s14, [r0]
 8004c34:	edd1 7a00 	vldr	s15, [r1]
 8004c38:	2a01      	cmp	r2, #1
 8004c3a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004c3e:	d06d      	beq.n	8004d1c <forward_dense+0x588>
 8004c40:	ed90 7a01 	vldr	s14, [r0, #4]
 8004c44:	edd1 7a01 	vldr	s15, [r1, #4]
 8004c48:	2a02      	cmp	r2, #2
 8004c4a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004c4e:	d065      	beq.n	8004d1c <forward_dense+0x588>
 8004c50:	ed90 7a02 	vldr	s14, [r0, #8]
 8004c54:	edd1 7a02 	vldr	s15, [r1, #8]
 8004c58:	2a03      	cmp	r2, #3
 8004c5a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004c5e:	d05d      	beq.n	8004d1c <forward_dense+0x588>
 8004c60:	ed90 7a03 	vldr	s14, [r0, #12]
 8004c64:	edd1 7a03 	vldr	s15, [r1, #12]
 8004c68:	2a04      	cmp	r2, #4
 8004c6a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004c6e:	d055      	beq.n	8004d1c <forward_dense+0x588>
 8004c70:	ed90 7a04 	vldr	s14, [r0, #16]
 8004c74:	edd1 7a04 	vldr	s15, [r1, #16]
 8004c78:	2a05      	cmp	r2, #5
 8004c7a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004c7e:	d04d      	beq.n	8004d1c <forward_dense+0x588>
 8004c80:	ed90 7a05 	vldr	s14, [r0, #20]
 8004c84:	edd1 7a05 	vldr	s15, [r1, #20]
 8004c88:	2a06      	cmp	r2, #6
 8004c8a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004c8e:	d045      	beq.n	8004d1c <forward_dense+0x588>
 8004c90:	ed90 7a06 	vldr	s14, [r0, #24]
 8004c94:	edd1 7a06 	vldr	s15, [r1, #24]
 8004c98:	2a07      	cmp	r2, #7
 8004c9a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004c9e:	d03d      	beq.n	8004d1c <forward_dense+0x588>
 8004ca0:	ed90 7a07 	vldr	s14, [r0, #28]
 8004ca4:	edd1 7a07 	vldr	s15, [r1, #28]
 8004ca8:	2a08      	cmp	r2, #8
 8004caa:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004cae:	d035      	beq.n	8004d1c <forward_dense+0x588>
 8004cb0:	ed90 7a08 	vldr	s14, [r0, #32]
 8004cb4:	edd1 7a08 	vldr	s15, [r1, #32]
 8004cb8:	2a09      	cmp	r2, #9
 8004cba:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004cbe:	d02d      	beq.n	8004d1c <forward_dense+0x588>
 8004cc0:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8004cc4:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8004cc8:	2a0a      	cmp	r2, #10
 8004cca:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004cce:	d025      	beq.n	8004d1c <forward_dense+0x588>
 8004cd0:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8004cd4:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8004cd8:	2a0b      	cmp	r2, #11
 8004cda:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004cde:	d01d      	beq.n	8004d1c <forward_dense+0x588>
 8004ce0:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8004ce4:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8004ce8:	2a0c      	cmp	r2, #12
 8004cea:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004cee:	d015      	beq.n	8004d1c <forward_dense+0x588>
 8004cf0:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8004cf4:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8004cf8:	2a0d      	cmp	r2, #13
 8004cfa:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004cfe:	d00d      	beq.n	8004d1c <forward_dense+0x588>
 8004d00:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8004d04:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8004d08:	2a0e      	cmp	r2, #14
 8004d0a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004d0e:	d005      	beq.n	8004d1c <forward_dense+0x588>
 8004d10:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8004d14:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8004d18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004d1c:	441c      	add	r4, r3
 8004d1e:	ee7f 6a26 	vadd.f32	s13, s30, s13
 8004d22:	ece5 6a01 	vstmia	r5!, {s13}
 8004d26:	4545      	cmp	r5, r8
 8004d28:	f4ff af02 	bcc.w	8004b30 <forward_dense+0x39c>
 8004d2c:	9b08      	ldr	r3, [sp, #32]
 8004d2e:	e6b0      	b.n	8004a92 <forward_dense+0x2fe>
 8004d30:	9902      	ldr	r1, [sp, #8]
 8004d32:	4588      	cmp	r8, r1
 8004d34:	f67f aeb5 	bls.w	8004aa2 <forward_dense+0x30e>
 8004d38:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d3a:	eb02 000b 	add.w	r0, r2, fp
 8004d3e:	9a07      	ldr	r2, [sp, #28]
 8004d40:	9008      	str	r0, [sp, #32]
 8004d42:	3220      	adds	r2, #32
 8004d44:	3007      	adds	r0, #7
 8004d46:	445a      	add	r2, fp
 8004d48:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d4a:	920a      	str	r2, [sp, #40]	; 0x28
 8004d4c:	4689      	mov	r9, r1
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	f000 80b9 	beq.w	8004ec6 <forward_dense+0x732>
 8004d54:	9a01      	ldr	r2, [sp, #4]
 8004d56:	edd6 2a00 	vldr	s5, [r6]
 8004d5a:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 8004afc <forward_dense+0x368>
 8004d5e:	3604      	adds	r6, #4
 8004d60:	2a00      	cmp	r2, #0
 8004d62:	f000 80b8 	beq.w	8004ed6 <forward_dense+0x742>
 8004d66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d68:	1917      	adds	r7, r2, r4
 8004d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d6c:	1d21      	adds	r1, r4, #4
 8004d6e:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8004d72:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8004d76:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8004d7a:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 8004d7e:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 8004d82:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 8004d86:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004d8a:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004d8e:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004d92:	ed12 6a01 	vldr	s12, [r2, #-4]
 8004d96:	f005 0e0f 	and.w	lr, r5, #15
 8004d9a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8004d9e:	ed9e 7a00 	vldr	s14, [lr]
 8004da2:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8004da6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dae:	ed9c 7a00 	vldr	s14, [ip]
 8004db2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 8004db6:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 8004dba:	eee7 7a03 	vfma.f32	s15, s14, s6
 8004dbe:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8004dc2:	f000 0c0f 	and.w	ip, r0, #15
 8004dc6:	ed9e 7a00 	vldr	s14, [lr]
 8004dca:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8004dce:	eee7 7a23 	vfma.f32	s15, s14, s7
 8004dd2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004dd6:	3104      	adds	r1, #4
 8004dd8:	ed9c 7a00 	vldr	s14, [ip]
 8004ddc:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8004de0:	eee7 7a04 	vfma.f32	s15, s14, s8
 8004de4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004de8:	f005 050f 	and.w	r5, r5, #15
 8004dec:	ed9c 7a00 	vldr	s14, [ip]
 8004df0:	eee7 7a24 	vfma.f32	s15, s14, s9
 8004df4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004df8:	428f      	cmp	r7, r1
 8004dfa:	ed95 7a00 	vldr	s14, [r5]
 8004dfe:	ea4f 1510 	mov.w	r5, r0, lsr #4
 8004e02:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004e06:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004e0a:	f000 000f 	and.w	r0, r0, #15
 8004e0e:	ed95 7a00 	vldr	s14, [r5]
 8004e12:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004e16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004e1a:	f102 0220 	add.w	r2, r2, #32
 8004e1e:	ed90 7a00 	vldr	s14, [r0]
 8004e22:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004e26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004e2a:	d1a0      	bne.n	8004d6e <forward_dense+0x5da>
 8004e2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e2e:	46de      	mov	lr, fp
 8004e30:	eb04 0a02 	add.w	sl, r4, r2
 8004e34:	9a08      	ldr	r2, [sp, #32]
 8004e36:	4596      	cmp	lr, r2
 8004e38:	d22c      	bcs.n	8004e94 <forward_dense+0x700>
 8004e3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e3c:	f10e 0108 	add.w	r1, lr, #8
 8004e40:	eba2 0c01 	sub.w	ip, r2, r1
 8004e44:	f02c 0207 	bic.w	r2, ip, #7
 8004e48:	f10e 0710 	add.w	r7, lr, #16
 8004e4c:	4417      	add	r7, r2
 8004e4e:	f10a 35ff 	add.w	r5, sl, #4294967295
 8004e52:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004e56:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004e5a:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004e5e:	f002 000f 	and.w	r0, r2, #15
 8004e62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004e66:	ed90 7a00 	vldr	s14, [r0]
 8004e6a:	0912      	lsrs	r2, r2, #4
 8004e6c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e74:	ed92 7a00 	vldr	s14, [r2]
 8004e78:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004e7c:	3108      	adds	r1, #8
 8004e7e:	428f      	cmp	r7, r1
 8004e80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004e84:	d1e5      	bne.n	8004e52 <forward_dense+0x6be>
 8004e86:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004e8a:	f10c 0c01 	add.w	ip, ip, #1
 8004e8e:	44e2      	add	sl, ip
 8004e90:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 8004e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e96:	b312      	cbz	r2, 8004ede <forward_dense+0x74a>
 8004e98:	f89a 2000 	ldrb.w	r2, [sl]
 8004e9c:	edde 7a00 	vldr	s15, [lr]
 8004ea0:	0912      	lsrs	r2, r2, #4
 8004ea2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004ea6:	ed92 7a00 	vldr	s14, [r2]
 8004eaa:	9a05      	ldr	r2, [sp, #20]
 8004eac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004eb0:	4414      	add	r4, r2
 8004eb2:	ee76 2aa2 	vadd.f32	s5, s13, s5
 8004eb6:	ece9 2a01 	vstmia	r9!, {s5}
 8004eba:	45c8      	cmp	r8, r9
 8004ebc:	f67f ade9 	bls.w	8004a92 <forward_dense+0x2fe>
 8004ec0:	2e00      	cmp	r6, #0
 8004ec2:	f47f af47 	bne.w	8004d54 <forward_dense+0x5c0>
 8004ec6:	9a01      	ldr	r2, [sp, #4]
 8004ec8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004f48 <forward_dense+0x7b4>
 8004ecc:	eef0 2a6f 	vmov.f32	s5, s31
 8004ed0:	2a00      	cmp	r2, #0
 8004ed2:	f47f af48 	bne.w	8004d66 <forward_dense+0x5d2>
 8004ed6:	f8dd e018 	ldr.w	lr, [sp, #24]
 8004eda:	46a2      	mov	sl, r4
 8004edc:	e7aa      	b.n	8004e34 <forward_dense+0x6a0>
 8004ede:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8004ee2:	9a05      	ldr	r2, [sp, #20]
 8004ee4:	ece9 6a01 	vstmia	r9!, {s13}
 8004ee8:	45c1      	cmp	r9, r8
 8004eea:	4414      	add	r4, r2
 8004eec:	f4ff af2f 	bcc.w	8004d4e <forward_dense+0x5ba>
 8004ef0:	e5cf      	b.n	8004a92 <forward_dense+0x2fe>
 8004ef2:	f1ba 0f0f 	cmp.w	sl, #15
 8004ef6:	eeb0 fa6f 	vmov.f32	s30, s31
 8004efa:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004f48 <forward_dense+0x7b4>
 8004efe:	f63f ae24 	bhi.w	8004b4a <forward_dense+0x3b6>
 8004f02:	4652      	mov	r2, sl
 8004f04:	4620      	mov	r0, r4
 8004f06:	9906      	ldr	r1, [sp, #24]
 8004f08:	e690      	b.n	8004c2c <forward_dense+0x498>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	deff      	udf	#255	; 0xff
 8004f10:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	4691      	mov	r9, r2
 8004f18:	f47f ac94 	bne.w	8004844 <forward_dense+0xb0>
 8004f1c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8004f20:	f1b9 0f00 	cmp.w	r9, #0
 8004f24:	f43f ac93 	beq.w	800484e <forward_dense+0xba>
 8004f28:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004f2c:	f000 fae4 	bl	80054f8 <ai_array_get_byte_size>
 8004f30:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004f34:	4602      	mov	r2, r0
 8004f36:	4651      	mov	r1, sl
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fb43 	bl	80055c4 <memcpy>
 8004f3e:	4682      	mov	sl, r0
 8004f40:	e485      	b.n	800484e <forward_dense+0xba>
 8004f42:	2300      	movs	r3, #0
 8004f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f46:	e456      	b.n	80047f6 <forward_dense+0x62>
 8004f48:	00000000 	.word	0x00000000

08004f4c <nl_func_sm_array_f32>:
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	ed2d 8b04 	vpush	{d8-d9}
 8004f54:	b089      	sub	sp, #36	; 0x24
 8004f56:	698f      	ldr	r7, [r1, #24]
 8004f58:	6984      	ldr	r4, [r0, #24]
 8004f5a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8004f5e:	68bd      	ldr	r5, [r7, #8]
 8004f60:	9402      	str	r4, [sp, #8]
 8004f62:	4626      	mov	r6, r4
 8004f64:	4696      	mov	lr, r2
 8004f66:	eba2 020c 	sub.w	r2, r2, ip
 8004f6a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8004f6e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	68b6      	ldr	r6, [r6, #8]
 8004f74:	ebae 0e04 	sub.w	lr, lr, r4
 8004f78:	4295      	cmp	r5, r2
 8004f7a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8004f7e:	d354      	bcc.n	800502a <nl_func_sm_array_f32+0xde>
 8004f80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004f84:	f1cc 0200 	rsb	r2, ip, #0
 8004f88:	00a4      	lsls	r4, r4, #2
 8004f8a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	9204      	str	r2, [sp, #16]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4262      	negs	r2, r4
 8004f96:	9205      	str	r2, [sp, #20]
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004f9e:	9b02      	ldr	r3, [sp, #8]
 8004fa0:	9a07      	ldr	r2, [sp, #28]
 8004fa2:	60bd      	str	r5, [r7, #8]
 8004fa4:	609e      	str	r6, [r3, #8]
 8004fa6:	9b06      	ldr	r3, [sp, #24]
 8004fa8:	6992      	ldr	r2, [r2, #24]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	6894      	ldr	r4, [r2, #8]
 8004fae:	9a03      	ldr	r2, [sp, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2a01      	cmp	r2, #1
 8004fb4:	ed93 8a00 	vldr	s16, [r3]
 8004fb8:	d940      	bls.n	800503c <nl_func_sm_array_f32+0xf0>
 8004fba:	9901      	ldr	r1, [sp, #4]
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	eb03 0b01 	add.w	fp, r3, r1
 8004fc2:	ecf2 7a01 	vldmia	r2!, {s15}
 8004fc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	bfb8      	it	lt
 8004fd0:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004fd4:	4593      	cmp	fp, r2
 8004fd6:	d1f4      	bne.n	8004fc2 <nl_func_sm_array_f32+0x76>
 8004fd8:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8005048 <nl_func_sm_array_f32+0xfc>
 8004fdc:	469a      	mov	sl, r3
 8004fde:	46a1      	mov	r9, r4
 8004fe0:	46a0      	mov	r8, r4
 8004fe2:	ecba 0a01 	vldmia	sl!, {s0}
 8004fe6:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004fea:	f003 f895 	bl	8008118 <expf>
 8004fee:	45d3      	cmp	fp, sl
 8004ff0:	eca8 0a01 	vstmia	r8!, {s0}
 8004ff4:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004ff8:	d1f3      	bne.n	8004fe2 <nl_func_sm_array_f32+0x96>
 8004ffa:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	d00b      	beq.n	800501c <nl_func_sm_array_f32+0xd0>
 8005004:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	441c      	add	r4, r3
 800500c:	edd9 7a00 	vldr	s15, [r9]
 8005010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005014:	ece9 7a01 	vstmia	r9!, {s15}
 8005018:	454c      	cmp	r4, r9
 800501a:	d1f7      	bne.n	800500c <nl_func_sm_array_f32+0xc0>
 800501c:	9b04      	ldr	r3, [sp, #16]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	441d      	add	r5, r3
 8005022:	9b05      	ldr	r3, [sp, #20]
 8005024:	42aa      	cmp	r2, r5
 8005026:	441e      	add	r6, r3
 8005028:	d9b9      	bls.n	8004f9e <nl_func_sm_array_f32+0x52>
 800502a:	60ba      	str	r2, [r7, #8]
 800502c:	9a02      	ldr	r2, [sp, #8]
 800502e:	68d3      	ldr	r3, [r2, #12]
 8005030:	6093      	str	r3, [r2, #8]
 8005032:	b009      	add	sp, #36	; 0x24
 8005034:	ecbd 8b04 	vpop	{d8-d9}
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503c:	2a00      	cmp	r2, #0
 800503e:	d0ed      	beq.n	800501c <nl_func_sm_array_f32+0xd0>
 8005040:	9a01      	ldr	r2, [sp, #4]
 8005042:	eb03 0b02 	add.w	fp, r3, r2
 8005046:	e7c7      	b.n	8004fd8 <nl_func_sm_array_f32+0x8c>
 8005048:	00000000 	.word	0x00000000

0800504c <nl_func_relu_generic_array_f32>:
 800504c:	b430      	push	{r4, r5}
 800504e:	6989      	ldr	r1, [r1, #24]
 8005050:	6980      	ldr	r0, [r0, #24]
 8005052:	edd3 6a02 	vldr	s13, [r3, #8]
 8005056:	688c      	ldr	r4, [r1, #8]
 8005058:	6880      	ldr	r0, [r0, #8]
 800505a:	ed93 7a00 	vldr	s14, [r3]
 800505e:	ed93 6a01 	vldr	s12, [r3, #4]
 8005062:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005066:	3a01      	subs	r2, #1
 8005068:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800506c:	0092      	lsls	r2, r2, #2
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	4410      	add	r0, r2
 8005074:	4422      	add	r2, r4
 8005076:	d421      	bmi.n	80050bc <nl_func_relu_generic_array_f32+0x70>
 8005078:	4294      	cmp	r4, r2
 800507a:	d83d      	bhi.n	80050f8 <nl_func_relu_generic_array_f32+0xac>
 800507c:	1d13      	adds	r3, r2, #4
 800507e:	1d02      	adds	r2, r0, #4
 8005080:	e010      	b.n	80050a4 <nl_func_relu_generic_array_f32+0x58>
 8005082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800508e:	d501      	bpl.n	8005094 <nl_func_relu_generic_array_f32+0x48>
 8005090:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005094:	ed62 7a01 	vstmdb	r2!, {s15}
 8005098:	6888      	ldr	r0, [r1, #8]
 800509a:	f1a3 0408 	sub.w	r4, r3, #8
 800509e:	4284      	cmp	r4, r0
 80050a0:	462b      	mov	r3, r5
 80050a2:	d329      	bcc.n	80050f8 <nl_func_relu_generic_array_f32+0xac>
 80050a4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80050a8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	f1a3 0504 	sub.w	r5, r3, #4
 80050b4:	d4e5      	bmi.n	8005082 <nl_func_relu_generic_array_f32+0x36>
 80050b6:	eef0 7a66 	vmov.f32	s15, s13
 80050ba:	e7eb      	b.n	8005094 <nl_func_relu_generic_array_f32+0x48>
 80050bc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	d01a      	beq.n	80050fc <nl_func_relu_generic_array_f32+0xb0>
 80050c6:	4294      	cmp	r4, r2
 80050c8:	d816      	bhi.n	80050f8 <nl_func_relu_generic_array_f32+0xac>
 80050ca:	1d13      	adds	r3, r2, #4
 80050cc:	1d02      	adds	r2, r0, #4
 80050ce:	ed53 7a01 	vldr	s15, [r3, #-4]
 80050d2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80050d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050da:	f1a3 0408 	sub.w	r4, r3, #8
 80050de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e2:	f1a3 0004 	sub.w	r0, r3, #4
 80050e6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80050ea:	4623      	mov	r3, r4
 80050ec:	d51e      	bpl.n	800512c <nl_func_relu_generic_array_f32+0xe0>
 80050ee:	ed62 6a01 	vstmdb	r2!, {s13}
 80050f2:	688b      	ldr	r3, [r1, #8]
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	d91e      	bls.n	8005136 <nl_func_relu_generic_array_f32+0xea>
 80050f8:	bc30      	pop	{r4, r5}
 80050fa:	4770      	bx	lr
 80050fc:	4294      	cmp	r4, r2
 80050fe:	d8fb      	bhi.n	80050f8 <nl_func_relu_generic_array_f32+0xac>
 8005100:	1d13      	adds	r3, r2, #4
 8005102:	2500      	movs	r5, #0
 8005104:	1d02      	adds	r2, r0, #4
 8005106:	ed53 7a01 	vldr	s15, [r3, #-4]
 800510a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800510e:	f1a3 0408 	sub.w	r4, r3, #8
 8005112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005116:	f1a3 0004 	sub.w	r0, r3, #4
 800511a:	4623      	mov	r3, r4
 800511c:	db0d      	blt.n	800513a <nl_func_relu_generic_array_f32+0xee>
 800511e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005122:	688b      	ldr	r3, [r1, #8]
 8005124:	42a3      	cmp	r3, r4
 8005126:	d8e7      	bhi.n	80050f8 <nl_func_relu_generic_array_f32+0xac>
 8005128:	4603      	mov	r3, r0
 800512a:	e7ec      	b.n	8005106 <nl_func_relu_generic_array_f32+0xba>
 800512c:	ed62 7a01 	vstmdb	r2!, {s15}
 8005130:	688c      	ldr	r4, [r1, #8]
 8005132:	429c      	cmp	r4, r3
 8005134:	d8e0      	bhi.n	80050f8 <nl_func_relu_generic_array_f32+0xac>
 8005136:	4603      	mov	r3, r0
 8005138:	e7c9      	b.n	80050ce <nl_func_relu_generic_array_f32+0x82>
 800513a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800513e:	688c      	ldr	r4, [r1, #8]
 8005140:	429c      	cmp	r4, r3
 8005142:	d8d9      	bhi.n	80050f8 <nl_func_relu_generic_array_f32+0xac>
 8005144:	4603      	mov	r3, r0
 8005146:	e7de      	b.n	8005106 <nl_func_relu_generic_array_f32+0xba>

08005148 <forward_relu>:
 8005148:	6982      	ldr	r2, [r0, #24]
 800514a:	8813      	ldrh	r3, [r2, #0]
 800514c:	b333      	cbz	r3, 800519c <forward_relu+0x54>
 800514e:	6852      	ldr	r2, [r2, #4]
 8005150:	6851      	ldr	r1, [r2, #4]
 8005152:	b101      	cbz	r1, 8005156 <forward_relu+0xe>
 8005154:	6809      	ldr	r1, [r1, #0]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d91d      	bls.n	8005196 <forward_relu+0x4e>
 800515a:	b4f0      	push	{r4, r5, r6, r7}
 800515c:	6917      	ldr	r7, [r2, #16]
 800515e:	b107      	cbz	r7, 8005162 <forward_relu+0x1a>
 8005160:	683f      	ldr	r7, [r7, #0]
 8005162:	688c      	ldr	r4, [r1, #8]
 8005164:	69c3      	ldr	r3, [r0, #28]
 8005166:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d044      	beq.n	80051f8 <forward_relu+0xb0>
 800516e:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8005172:	2d01      	cmp	r5, #1
 8005174:	d014      	beq.n	80051a0 <forward_relu+0x58>
 8005176:	2c00      	cmp	r4, #0
 8005178:	d074      	beq.n	8005264 <forward_relu+0x11c>
 800517a:	68ce      	ldr	r6, [r1, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005182:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005186:	42a6      	cmp	r6, r4
 8005188:	fb05 f202 	mul.w	r2, r5, r2
 800518c:	d1f9      	bne.n	8005182 <forward_relu+0x3a>
 800518e:	4638      	mov	r0, r7
 8005190:	bcf0      	pop	{r4, r5, r6, r7}
 8005192:	f7ff bf5b 	b.w	800504c <nl_func_relu_generic_array_f32>
 8005196:	2300      	movs	r3, #0
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	deff      	udf	#255	; 0xff
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	deff      	udf	#255	; 0xff
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	6988      	ldr	r0, [r1, #24]
 80051a4:	6896      	ldr	r6, [r2, #8]
 80051a6:	ed93 7a00 	vldr	s14, [r3]
 80051aa:	6882      	ldr	r2, [r0, #8]
 80051ac:	b184      	cbz	r4, 80051d0 <forward_relu+0x88>
 80051ae:	68cf      	ldr	r7, [r1, #12]
 80051b0:	462b      	mov	r3, r5
 80051b2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80051b6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80051ba:	42a7      	cmp	r7, r4
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	d1f9      	bne.n	80051b6 <forward_relu+0x6e>
 80051c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051c6:	3b01      	subs	r3, #1
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	18d2      	adds	r2, r2, r3
 80051cc:	441e      	add	r6, r3
 80051ce:	d23f      	bcs.n	8005250 <forward_relu+0x108>
 80051d0:	1d13      	adds	r3, r2, #4
 80051d2:	2500      	movs	r5, #0
 80051d4:	1d32      	adds	r2, r6, #4
 80051d6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80051da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e2:	f1a3 0104 	sub.w	r1, r3, #4
 80051e6:	d835      	bhi.n	8005254 <forward_relu+0x10c>
 80051e8:	ed62 7a01 	vstmdb	r2!, {s15}
 80051ec:	6884      	ldr	r4, [r0, #8]
 80051ee:	3b08      	subs	r3, #8
 80051f0:	429c      	cmp	r4, r3
 80051f2:	d82d      	bhi.n	8005250 <forward_relu+0x108>
 80051f4:	460b      	mov	r3, r1
 80051f6:	e7ee      	b.n	80051d6 <forward_relu+0x8e>
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	698d      	ldr	r5, [r1, #24]
 80051fc:	6898      	ldr	r0, [r3, #8]
 80051fe:	68ab      	ldr	r3, [r5, #8]
 8005200:	b184      	cbz	r4, 8005224 <forward_relu+0xdc>
 8005202:	68ce      	ldr	r6, [r1, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800520a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800520e:	42a6      	cmp	r6, r4
 8005210:	fb01 f202 	mul.w	r2, r1, r2
 8005214:	d1f9      	bne.n	800520a <forward_relu+0xc2>
 8005216:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800521a:	3a01      	subs	r2, #1
 800521c:	0092      	lsls	r2, r2, #2
 800521e:	189b      	adds	r3, r3, r2
 8005220:	4410      	add	r0, r2
 8005222:	d215      	bcs.n	8005250 <forward_relu+0x108>
 8005224:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005268 <forward_relu+0x120>
 8005228:	3304      	adds	r3, #4
 800522a:	1d01      	adds	r1, r0, #4
 800522c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005230:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	bfb8      	it	lt
 800523a:	eef0 7a47 	vmovlt.f32	s15, s14
 800523e:	ed61 7a01 	vstmdb	r1!, {s15}
 8005242:	68a8      	ldr	r0, [r5, #8]
 8005244:	f1a3 0208 	sub.w	r2, r3, #8
 8005248:	4290      	cmp	r0, r2
 800524a:	f1a3 0304 	sub.w	r3, r3, #4
 800524e:	d9ed      	bls.n	800522c <forward_relu+0xe4>
 8005250:	bcf0      	pop	{r4, r5, r6, r7}
 8005252:	4770      	bx	lr
 8005254:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005258:	6884      	ldr	r4, [r0, #8]
 800525a:	3b08      	subs	r3, #8
 800525c:	429c      	cmp	r4, r3
 800525e:	d8f7      	bhi.n	8005250 <forward_relu+0x108>
 8005260:	460b      	mov	r3, r1
 8005262:	e7b8      	b.n	80051d6 <forward_relu+0x8e>
 8005264:	2201      	movs	r2, #1
 8005266:	e792      	b.n	800518e <forward_relu+0x46>
 8005268:	00000000 	.word	0x00000000

0800526c <forward_sm>:
 800526c:	6982      	ldr	r2, [r0, #24]
 800526e:	8813      	ldrh	r3, [r2, #0]
 8005270:	b32b      	cbz	r3, 80052be <forward_sm+0x52>
 8005272:	6852      	ldr	r2, [r2, #4]
 8005274:	6851      	ldr	r1, [r2, #4]
 8005276:	b101      	cbz	r1, 800527a <forward_sm+0xe>
 8005278:	6809      	ldr	r1, [r1, #0]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d91c      	bls.n	80052b8 <forward_sm+0x4c>
 800527e:	6913      	ldr	r3, [r2, #16]
 8005280:	b1c3      	cbz	r3, 80052b4 <forward_sm+0x48>
 8005282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	688c      	ldr	r4, [r1, #8]
 8005288:	68c3      	ldr	r3, [r0, #12]
 800528a:	68ce      	ldr	r6, [r1, #12]
 800528c:	685f      	ldr	r7, [r3, #4]
 800528e:	6873      	ldr	r3, [r6, #4]
 8005290:	0a24      	lsrs	r4, r4, #8
 8005292:	b083      	sub	sp, #12
 8005294:	d015      	beq.n	80052c2 <forward_sm+0x56>
 8005296:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800529a:	2201      	movs	r2, #1
 800529c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052a0:	42a6      	cmp	r6, r4
 80052a2:	fb05 f202 	mul.w	r2, r5, r2
 80052a6:	d1f9      	bne.n	800529c <forward_sm+0x30>
 80052a8:	e9cd 3700 	strd	r3, r7, [sp]
 80052ac:	f7ff fe4e 	bl	8004f4c <nl_func_sm_array_f32>
 80052b0:	b003      	add	sp, #12
 80052b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	deff      	udf	#255	; 0xff
 80052b8:	2300      	movs	r3, #0
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	deff      	udf	#255	; 0xff
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	deff      	udf	#255	; 0xff
 80052c2:	2201      	movs	r2, #1
 80052c4:	e9cd 3700 	strd	r3, r7, [sp]
 80052c8:	f7ff fe40 	bl	8004f4c <nl_func_sm_array_f32>
 80052cc:	b003      	add	sp, #12
 80052ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052d0 <ai_check_custom_types>:
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <ai_check_custom_types+0x50>)
 80052d2:	b082      	sub	sp, #8
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	b118      	cbz	r0, 80052e2 <ai_check_custom_types+0x12>
 80052da:	7803      	ldrb	r3, [r0, #0]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d002      	beq.n	80052e6 <ai_check_custom_types+0x16>
 80052e0:	2000      	movs	r0, #0
 80052e2:	b002      	add	sp, #8
 80052e4:	4770      	bx	lr
 80052e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <ai_check_custom_types+0x28>
 80052ee:	2001      	movs	r0, #1
 80052f0:	f080 0001 	eor.w	r0, r0, #1
 80052f4:	b002      	add	sp, #8
 80052f6:	4770      	bx	lr
 80052f8:	7842      	ldrb	r2, [r0, #1]
 80052fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80052fe:	429a      	cmp	r2, r3
 8005300:	f100 0001 	add.w	r0, r0, #1
 8005304:	d1f3      	bne.n	80052ee <ai_check_custom_types+0x1e>
 8005306:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800530a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800530e:	429a      	cmp	r2, r3
 8005310:	d1ed      	bne.n	80052ee <ai_check_custom_types+0x1e>
 8005312:	7842      	ldrb	r2, [r0, #1]
 8005314:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005318:	429a      	cmp	r2, r3
 800531a:	d1e8      	bne.n	80052ee <ai_check_custom_types+0x1e>
 800531c:	2000      	movs	r0, #0
 800531e:	e7e7      	b.n	80052f0 <ai_check_custom_types+0x20>
 8005320:	08008430 	.word	0x08008430

08005324 <ai_layers_init_all>:
 8005324:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005326:	b17a      	cbz	r2, 8005348 <ai_layers_init_all+0x24>
 8005328:	6913      	ldr	r3, [r2, #16]
 800532a:	60d0      	str	r0, [r2, #12]
 800532c:	429a      	cmp	r2, r3
 800532e:	f04f 0201 	mov.w	r2, #1
 8005332:	d009      	beq.n	8005348 <ai_layers_init_all+0x24>
 8005334:	b143      	cbz	r3, 8005348 <ai_layers_init_all+0x24>
 8005336:	6919      	ldr	r1, [r3, #16]
 8005338:	60d8      	str	r0, [r3, #12]
 800533a:	4299      	cmp	r1, r3
 800533c:	f102 0201 	add.w	r2, r2, #1
 8005340:	d002      	beq.n	8005348 <ai_layers_init_all+0x24>
 8005342:	460b      	mov	r3, r1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f6      	bne.n	8005336 <ai_layers_init_all+0x12>
 8005348:	4610      	mov	r0, r2
 800534a:	4770      	bx	lr

0800534c <ai_layers_post_init_all>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005350:	b18c      	cbz	r4, 8005376 <ai_layers_post_init_all+0x2a>
 8005352:	2500      	movs	r5, #0
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	f013 0f01 	tst.w	r3, #1
 800535a:	4620      	mov	r0, r4
 800535c:	d003      	beq.n	8005366 <ai_layers_post_init_all+0x1a>
 800535e:	6a23      	ldr	r3, [r4, #32]
 8005360:	b10b      	cbz	r3, 8005366 <ai_layers_post_init_all+0x1a>
 8005362:	4798      	blx	r3
 8005364:	3501      	adds	r5, #1
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	42a3      	cmp	r3, r4
 800536a:	d002      	beq.n	8005372 <ai_layers_post_init_all+0x26>
 800536c:	461c      	mov	r4, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <ai_layers_post_init_all+0x8>
 8005372:	4628      	mov	r0, r5
 8005374:	bd38      	pop	{r3, r4, r5, pc}
 8005376:	4625      	mov	r5, r4
 8005378:	e7fb      	b.n	8005372 <ai_layers_post_init_all+0x26>
 800537a:	bf00      	nop

0800537c <ai_layers_forward_all>:
 800537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005380:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8005382:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005384:	4604      	mov	r4, r0
 8005386:	2f00      	cmp	r7, #0
 8005388:	d02c      	beq.n	80053e4 <ai_layers_forward_all+0x68>
 800538a:	2d00      	cmp	r5, #0
 800538c:	d03f      	beq.n	800540e <ai_layers_forward_all+0x92>
 800538e:	6385      	str	r5, [r0, #56]	; 0x38
 8005390:	4629      	mov	r1, r5
 8005392:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005394:	2001      	movs	r0, #1
 8005396:	47b8      	blx	r7
 8005398:	2600      	movs	r6, #0
 800539a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800539c:	46b0      	mov	r8, r6
 800539e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053a0:	2002      	movs	r0, #2
 80053a2:	47b8      	blx	r7
 80053a4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80053a6:	696b      	ldr	r3, [r5, #20]
 80053a8:	4628      	mov	r0, r5
 80053aa:	4798      	blx	r3
 80053ac:	692b      	ldr	r3, [r5, #16]
 80053ae:	429d      	cmp	r5, r3
 80053b0:	f04f 0003 	mov.w	r0, #3
 80053b4:	4619      	mov	r1, r3
 80053b6:	d009      	beq.n	80053cc <ai_layers_forward_all+0x50>
 80053b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80053ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053bc:	47b8      	blx	r7
 80053be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053c0:	3601      	adds	r6, #1
 80053c2:	2900      	cmp	r1, #0
 80053c4:	d1eb      	bne.n	800539e <ai_layers_forward_all+0x22>
 80053c6:	4630      	mov	r0, r6
 80053c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053cc:	2100      	movs	r1, #0
 80053ce:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80053d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053d4:	47b8      	blx	r7
 80053d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053d8:	3601      	adds	r6, #1
 80053da:	2900      	cmp	r1, #0
 80053dc:	d1df      	bne.n	800539e <ai_layers_forward_all+0x22>
 80053de:	4630      	mov	r0, r6
 80053e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e4:	b19d      	cbz	r5, 800540e <ai_layers_forward_all+0x92>
 80053e6:	6385      	str	r5, [r0, #56]	; 0x38
 80053e8:	463e      	mov	r6, r7
 80053ea:	696b      	ldr	r3, [r5, #20]
 80053ec:	4628      	mov	r0, r5
 80053ee:	4798      	blx	r3
 80053f0:	692b      	ldr	r3, [r5, #16]
 80053f2:	42ab      	cmp	r3, r5
 80053f4:	f106 0601 	add.w	r6, r6, #1
 80053f8:	d004      	beq.n	8005404 <ai_layers_forward_all+0x88>
 80053fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80053fc:	461d      	mov	r5, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f3      	bne.n	80053ea <ai_layers_forward_all+0x6e>
 8005402:	e7e0      	b.n	80053c6 <ai_layers_forward_all+0x4a>
 8005404:	2300      	movs	r3, #0
 8005406:	63a3      	str	r3, [r4, #56]	; 0x38
 8005408:	4630      	mov	r0, r6
 800540a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800540e:	462e      	mov	r6, r5
 8005410:	4630      	mov	r0, r6
 8005412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005416:	bf00      	nop

08005418 <ai_version_get>:
 8005418:	0212      	lsls	r2, r2, #8
 800541a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800541e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8005422:	4770      	bx	lr

08005424 <get_tensor_byte_size>:
 8005424:	6983      	ldr	r3, [r0, #24]
 8005426:	68c1      	ldr	r1, [r0, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6940      	ldr	r0, [r0, #20]
 800542c:	4a06      	ldr	r2, [pc, #24]	; (8005448 <get_tensor_byte_size+0x24>)
 800542e:	68c9      	ldr	r1, [r1, #12]
 8005430:	68c0      	ldr	r0, [r0, #12]
 8005432:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005436:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800543a:	fb00 f001 	mul.w	r0, r0, r1
 800543e:	4293      	cmp	r3, r2
 8005440:	bf04      	itt	eq
 8005442:	3007      	addeq	r0, #7
 8005444:	08c0      	lsreq	r0, r0, #3
 8005446:	4770      	bx	lr
 8005448:	000400c0 	.word	0x000400c0

0800544c <ai_array_to_buffer_fmt>:
 800544c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005450:	2b02      	cmp	r3, #2
 8005452:	d036      	beq.n	80054c2 <ai_array_to_buffer_fmt+0x76>
 8005454:	4a21      	ldr	r2, [pc, #132]	; (80054dc <ai_array_to_buffer_fmt+0x90>)
 8005456:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800545a:	4293      	cmp	r3, r2
 800545c:	d00f      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 800545e:	dd12      	ble.n	8005486 <ai_array_to_buffer_fmt+0x3a>
 8005460:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <ai_array_to_buffer_fmt+0x94>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00b      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 8005466:	dd1e      	ble.n	80054a6 <ai_array_to_buffer_fmt+0x5a>
 8005468:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <ai_array_to_buffer_fmt+0x98>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d007      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 800546e:	dd30      	ble.n	80054d2 <ai_array_to_buffer_fmt+0x86>
 8005470:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <ai_array_to_buffer_fmt+0x9c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 8005476:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800547a:	4293      	cmp	r3, r2
 800547c:	d11f      	bne.n	80054be <ai_array_to_buffer_fmt+0x72>
 800547e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005482:	4318      	orrs	r0, r3
 8005484:	4770      	bx	lr
 8005486:	4a19      	ldr	r2, [pc, #100]	; (80054ec <ai_array_to_buffer_fmt+0xa0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d0f8      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 800548c:	dd0b      	ble.n	80054a6 <ai_array_to_buffer_fmt+0x5a>
 800548e:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <ai_array_to_buffer_fmt+0xa4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d0f4      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 8005494:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8005498:	4293      	cmp	r3, r2
 800549a:	d0f0      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 800549c:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d10c      	bne.n	80054be <ai_array_to_buffer_fmt+0x72>
 80054a4:	e7eb      	b.n	800547e <ai_array_to_buffer_fmt+0x32>
 80054a6:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d0e7      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 80054ae:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d0e3      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 80054b6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d0df      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 80054be:	2340      	movs	r3, #64	; 0x40
 80054c0:	e7dd      	b.n	800547e <ai_array_to_buffer_fmt+0x32>
 80054c2:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <ai_array_to_buffer_fmt+0xa8>)
 80054c4:	4003      	ands	r3, r0
 80054c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ca:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80054ce:	4318      	orrs	r0, r3
 80054d0:	4770      	bx	lr
 80054d2:	3a0f      	subs	r2, #15
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d0d2      	beq.n	800547e <ai_array_to_buffer_fmt+0x32>
 80054d8:	e7f1      	b.n	80054be <ai_array_to_buffer_fmt+0x72>
 80054da:	bf00      	nop
 80054dc:	00060440 	.word	0x00060440
 80054e0:	00840447 	.word	0x00840447
 80054e4:	0084084f 	.word	0x0084084f
 80054e8:	00841040 	.word	0x00841040
 80054ec:	00040447 	.word	0x00040447
 80054f0:	0004084f 	.word	0x0004084f
 80054f4:	00803fff 	.word	0x00803fff

080054f8 <ai_array_get_byte_size>:
 80054f8:	b1c1      	cbz	r1, 800552c <ai_array_get_byte_size+0x34>
 80054fa:	11c3      	asrs	r3, r0, #7
 80054fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005500:	fb01 f102 	mul.w	r1, r1, r2
 8005504:	3107      	adds	r1, #7
 8005506:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800550a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800550e:	f021 0107 	bic.w	r1, r1, #7
 8005512:	2804      	cmp	r0, #4
 8005514:	fa21 f102 	lsr.w	r1, r1, r2
 8005518:	d00a      	beq.n	8005530 <ai_array_get_byte_size+0x38>
 800551a:	2808      	cmp	r0, #8
 800551c:	d103      	bne.n	8005526 <ai_array_get_byte_size+0x2e>
 800551e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005522:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8005526:	3107      	adds	r1, #7
 8005528:	08c8      	lsrs	r0, r1, #3
 800552a:	4770      	bx	lr
 800552c:	4608      	mov	r0, r1
 800552e:	4770      	bx	lr
 8005530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005534:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005538:	3107      	adds	r1, #7
 800553a:	08c8      	lsrs	r0, r1, #3
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <ai_array_get_data_byte_size>:
 8005540:	b161      	cbz	r1, 800555c <ai_array_get_data_byte_size+0x1c>
 8005542:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005546:	fb01 f103 	mul.w	r1, r1, r3
 800554a:	3107      	adds	r1, #7
 800554c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8005550:	f021 0107 	bic.w	r1, r1, #7
 8005554:	40c1      	lsrs	r1, r0
 8005556:	3107      	adds	r1, #7
 8005558:	08c8      	lsrs	r0, r1, #3
 800555a:	4770      	bx	lr
 800555c:	4608      	mov	r0, r1
 800555e:	4770      	bx	lr

08005560 <__errno>:
 8005560:	4b01      	ldr	r3, [pc, #4]	; (8005568 <__errno+0x8>)
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000740 	.word	0x20000740

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4d0d      	ldr	r5, [pc, #52]	; (80055a4 <__libc_init_array+0x38>)
 8005570:	4c0d      	ldr	r4, [pc, #52]	; (80055a8 <__libc_init_array+0x3c>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	2600      	movs	r6, #0
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	4d0b      	ldr	r5, [pc, #44]	; (80055ac <__libc_init_array+0x40>)
 800557e:	4c0c      	ldr	r4, [pc, #48]	; (80055b0 <__libc_init_array+0x44>)
 8005580:	f002 ff40 	bl	8008404 <_init>
 8005584:	1b64      	subs	r4, r4, r5
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	2600      	movs	r6, #0
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	08012884 	.word	0x08012884
 80055a8:	08012884 	.word	0x08012884
 80055ac:	08012884 	.word	0x08012884
 80055b0:	08012888 	.word	0x08012888

080055b4 <malloc>:
 80055b4:	4b02      	ldr	r3, [pc, #8]	; (80055c0 <malloc+0xc>)
 80055b6:	4601      	mov	r1, r0
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	f000 b885 	b.w	80056c8 <_malloc_r>
 80055be:	bf00      	nop
 80055c0:	20000740 	.word	0x20000740

080055c4 <memcpy>:
 80055c4:	440a      	add	r2, r1
 80055c6:	4291      	cmp	r1, r2
 80055c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055cc:	d100      	bne.n	80055d0 <memcpy+0xc>
 80055ce:	4770      	bx	lr
 80055d0:	b510      	push	{r4, lr}
 80055d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055da:	4291      	cmp	r1, r2
 80055dc:	d1f9      	bne.n	80055d2 <memcpy+0xe>
 80055de:	bd10      	pop	{r4, pc}

080055e0 <memset>:
 80055e0:	4402      	add	r2, r0
 80055e2:	4603      	mov	r3, r0
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d100      	bne.n	80055ea <memset+0xa>
 80055e8:	4770      	bx	lr
 80055ea:	f803 1b01 	strb.w	r1, [r3], #1
 80055ee:	e7f9      	b.n	80055e4 <memset+0x4>

080055f0 <_free_r>:
 80055f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055f2:	2900      	cmp	r1, #0
 80055f4:	d044      	beq.n	8005680 <_free_r+0x90>
 80055f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fa:	9001      	str	r0, [sp, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005602:	bfb8      	it	lt
 8005604:	18e4      	addlt	r4, r4, r3
 8005606:	f001 ff41 	bl	800748c <__malloc_lock>
 800560a:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <_free_r+0x94>)
 800560c:	9801      	ldr	r0, [sp, #4]
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	b933      	cbnz	r3, 8005620 <_free_r+0x30>
 8005612:	6063      	str	r3, [r4, #4]
 8005614:	6014      	str	r4, [r2, #0]
 8005616:	b003      	add	sp, #12
 8005618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800561c:	f001 bf3c 	b.w	8007498 <__malloc_unlock>
 8005620:	42a3      	cmp	r3, r4
 8005622:	d908      	bls.n	8005636 <_free_r+0x46>
 8005624:	6825      	ldr	r5, [r4, #0]
 8005626:	1961      	adds	r1, r4, r5
 8005628:	428b      	cmp	r3, r1
 800562a:	bf01      	itttt	eq
 800562c:	6819      	ldreq	r1, [r3, #0]
 800562e:	685b      	ldreq	r3, [r3, #4]
 8005630:	1949      	addeq	r1, r1, r5
 8005632:	6021      	streq	r1, [r4, #0]
 8005634:	e7ed      	b.n	8005612 <_free_r+0x22>
 8005636:	461a      	mov	r2, r3
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	b10b      	cbz	r3, 8005640 <_free_r+0x50>
 800563c:	42a3      	cmp	r3, r4
 800563e:	d9fa      	bls.n	8005636 <_free_r+0x46>
 8005640:	6811      	ldr	r1, [r2, #0]
 8005642:	1855      	adds	r5, r2, r1
 8005644:	42a5      	cmp	r5, r4
 8005646:	d10b      	bne.n	8005660 <_free_r+0x70>
 8005648:	6824      	ldr	r4, [r4, #0]
 800564a:	4421      	add	r1, r4
 800564c:	1854      	adds	r4, r2, r1
 800564e:	42a3      	cmp	r3, r4
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	d1e0      	bne.n	8005616 <_free_r+0x26>
 8005654:	681c      	ldr	r4, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	6053      	str	r3, [r2, #4]
 800565a:	4421      	add	r1, r4
 800565c:	6011      	str	r1, [r2, #0]
 800565e:	e7da      	b.n	8005616 <_free_r+0x26>
 8005660:	d902      	bls.n	8005668 <_free_r+0x78>
 8005662:	230c      	movs	r3, #12
 8005664:	6003      	str	r3, [r0, #0]
 8005666:	e7d6      	b.n	8005616 <_free_r+0x26>
 8005668:	6825      	ldr	r5, [r4, #0]
 800566a:	1961      	adds	r1, r4, r5
 800566c:	428b      	cmp	r3, r1
 800566e:	bf04      	itt	eq
 8005670:	6819      	ldreq	r1, [r3, #0]
 8005672:	685b      	ldreq	r3, [r3, #4]
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	bf04      	itt	eq
 8005678:	1949      	addeq	r1, r1, r5
 800567a:	6021      	streq	r1, [r4, #0]
 800567c:	6054      	str	r4, [r2, #4]
 800567e:	e7ca      	b.n	8005616 <_free_r+0x26>
 8005680:	b003      	add	sp, #12
 8005682:	bd30      	pop	{r4, r5, pc}
 8005684:	2000150c 	.word	0x2000150c

08005688 <sbrk_aligned>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4e0e      	ldr	r6, [pc, #56]	; (80056c4 <sbrk_aligned+0x3c>)
 800568c:	460c      	mov	r4, r1
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	4605      	mov	r5, r0
 8005692:	b911      	cbnz	r1, 800569a <sbrk_aligned+0x12>
 8005694:	f000 fd84 	bl	80061a0 <_sbrk_r>
 8005698:	6030      	str	r0, [r6, #0]
 800569a:	4621      	mov	r1, r4
 800569c:	4628      	mov	r0, r5
 800569e:	f000 fd7f 	bl	80061a0 <_sbrk_r>
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	d00a      	beq.n	80056bc <sbrk_aligned+0x34>
 80056a6:	1cc4      	adds	r4, r0, #3
 80056a8:	f024 0403 	bic.w	r4, r4, #3
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d007      	beq.n	80056c0 <sbrk_aligned+0x38>
 80056b0:	1a21      	subs	r1, r4, r0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 fd74 	bl	80061a0 <_sbrk_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d101      	bne.n	80056c0 <sbrk_aligned+0x38>
 80056bc:	f04f 34ff 	mov.w	r4, #4294967295
 80056c0:	4620      	mov	r0, r4
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	20001510 	.word	0x20001510

080056c8 <_malloc_r>:
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	1ccd      	adds	r5, r1, #3
 80056ce:	f025 0503 	bic.w	r5, r5, #3
 80056d2:	3508      	adds	r5, #8
 80056d4:	2d0c      	cmp	r5, #12
 80056d6:	bf38      	it	cc
 80056d8:	250c      	movcc	r5, #12
 80056da:	2d00      	cmp	r5, #0
 80056dc:	4607      	mov	r7, r0
 80056de:	db01      	blt.n	80056e4 <_malloc_r+0x1c>
 80056e0:	42a9      	cmp	r1, r5
 80056e2:	d905      	bls.n	80056f0 <_malloc_r+0x28>
 80056e4:	230c      	movs	r3, #12
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	2600      	movs	r6, #0
 80056ea:	4630      	mov	r0, r6
 80056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f0:	4e2e      	ldr	r6, [pc, #184]	; (80057ac <_malloc_r+0xe4>)
 80056f2:	f001 fecb 	bl	800748c <__malloc_lock>
 80056f6:	6833      	ldr	r3, [r6, #0]
 80056f8:	461c      	mov	r4, r3
 80056fa:	bb34      	cbnz	r4, 800574a <_malloc_r+0x82>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4638      	mov	r0, r7
 8005700:	f7ff ffc2 	bl	8005688 <sbrk_aligned>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	4604      	mov	r4, r0
 8005708:	d14d      	bne.n	80057a6 <_malloc_r+0xde>
 800570a:	6834      	ldr	r4, [r6, #0]
 800570c:	4626      	mov	r6, r4
 800570e:	2e00      	cmp	r6, #0
 8005710:	d140      	bne.n	8005794 <_malloc_r+0xcc>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	4631      	mov	r1, r6
 8005716:	4638      	mov	r0, r7
 8005718:	eb04 0803 	add.w	r8, r4, r3
 800571c:	f000 fd40 	bl	80061a0 <_sbrk_r>
 8005720:	4580      	cmp	r8, r0
 8005722:	d13a      	bne.n	800579a <_malloc_r+0xd2>
 8005724:	6821      	ldr	r1, [r4, #0]
 8005726:	3503      	adds	r5, #3
 8005728:	1a6d      	subs	r5, r5, r1
 800572a:	f025 0503 	bic.w	r5, r5, #3
 800572e:	3508      	adds	r5, #8
 8005730:	2d0c      	cmp	r5, #12
 8005732:	bf38      	it	cc
 8005734:	250c      	movcc	r5, #12
 8005736:	4629      	mov	r1, r5
 8005738:	4638      	mov	r0, r7
 800573a:	f7ff ffa5 	bl	8005688 <sbrk_aligned>
 800573e:	3001      	adds	r0, #1
 8005740:	d02b      	beq.n	800579a <_malloc_r+0xd2>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	442b      	add	r3, r5
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	e00e      	b.n	8005768 <_malloc_r+0xa0>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	1b52      	subs	r2, r2, r5
 800574e:	d41e      	bmi.n	800578e <_malloc_r+0xc6>
 8005750:	2a0b      	cmp	r2, #11
 8005752:	d916      	bls.n	8005782 <_malloc_r+0xba>
 8005754:	1961      	adds	r1, r4, r5
 8005756:	42a3      	cmp	r3, r4
 8005758:	6025      	str	r5, [r4, #0]
 800575a:	bf18      	it	ne
 800575c:	6059      	strne	r1, [r3, #4]
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	bf08      	it	eq
 8005762:	6031      	streq	r1, [r6, #0]
 8005764:	5162      	str	r2, [r4, r5]
 8005766:	604b      	str	r3, [r1, #4]
 8005768:	4638      	mov	r0, r7
 800576a:	f104 060b 	add.w	r6, r4, #11
 800576e:	f001 fe93 	bl	8007498 <__malloc_unlock>
 8005772:	f026 0607 	bic.w	r6, r6, #7
 8005776:	1d23      	adds	r3, r4, #4
 8005778:	1af2      	subs	r2, r6, r3
 800577a:	d0b6      	beq.n	80056ea <_malloc_r+0x22>
 800577c:	1b9b      	subs	r3, r3, r6
 800577e:	50a3      	str	r3, [r4, r2]
 8005780:	e7b3      	b.n	80056ea <_malloc_r+0x22>
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	42a3      	cmp	r3, r4
 8005786:	bf0c      	ite	eq
 8005788:	6032      	streq	r2, [r6, #0]
 800578a:	605a      	strne	r2, [r3, #4]
 800578c:	e7ec      	b.n	8005768 <_malloc_r+0xa0>
 800578e:	4623      	mov	r3, r4
 8005790:	6864      	ldr	r4, [r4, #4]
 8005792:	e7b2      	b.n	80056fa <_malloc_r+0x32>
 8005794:	4634      	mov	r4, r6
 8005796:	6876      	ldr	r6, [r6, #4]
 8005798:	e7b9      	b.n	800570e <_malloc_r+0x46>
 800579a:	230c      	movs	r3, #12
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4638      	mov	r0, r7
 80057a0:	f001 fe7a 	bl	8007498 <__malloc_unlock>
 80057a4:	e7a1      	b.n	80056ea <_malloc_r+0x22>
 80057a6:	6025      	str	r5, [r4, #0]
 80057a8:	e7de      	b.n	8005768 <_malloc_r+0xa0>
 80057aa:	bf00      	nop
 80057ac:	2000150c 	.word	0x2000150c

080057b0 <__cvt>:
 80057b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	ec55 4b10 	vmov	r4, r5, d0
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	460e      	mov	r6, r1
 80057bc:	4619      	mov	r1, r3
 80057be:	462b      	mov	r3, r5
 80057c0:	bfbb      	ittet	lt
 80057c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057c6:	461d      	movlt	r5, r3
 80057c8:	2300      	movge	r3, #0
 80057ca:	232d      	movlt	r3, #45	; 0x2d
 80057cc:	700b      	strb	r3, [r1, #0]
 80057ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057d4:	4691      	mov	r9, r2
 80057d6:	f023 0820 	bic.w	r8, r3, #32
 80057da:	bfbc      	itt	lt
 80057dc:	4622      	movlt	r2, r4
 80057de:	4614      	movlt	r4, r2
 80057e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057e4:	d005      	beq.n	80057f2 <__cvt+0x42>
 80057e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057ea:	d100      	bne.n	80057ee <__cvt+0x3e>
 80057ec:	3601      	adds	r6, #1
 80057ee:	2102      	movs	r1, #2
 80057f0:	e000      	b.n	80057f4 <__cvt+0x44>
 80057f2:	2103      	movs	r1, #3
 80057f4:	ab03      	add	r3, sp, #12
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	ab02      	add	r3, sp, #8
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	ec45 4b10 	vmov	d0, r4, r5
 8005800:	4653      	mov	r3, sl
 8005802:	4632      	mov	r2, r6
 8005804:	f000 fe30 	bl	8006468 <_dtoa_r>
 8005808:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800580c:	4607      	mov	r7, r0
 800580e:	d102      	bne.n	8005816 <__cvt+0x66>
 8005810:	f019 0f01 	tst.w	r9, #1
 8005814:	d022      	beq.n	800585c <__cvt+0xac>
 8005816:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800581a:	eb07 0906 	add.w	r9, r7, r6
 800581e:	d110      	bne.n	8005842 <__cvt+0x92>
 8005820:	783b      	ldrb	r3, [r7, #0]
 8005822:	2b30      	cmp	r3, #48	; 0x30
 8005824:	d10a      	bne.n	800583c <__cvt+0x8c>
 8005826:	2200      	movs	r2, #0
 8005828:	2300      	movs	r3, #0
 800582a:	4620      	mov	r0, r4
 800582c:	4629      	mov	r1, r5
 800582e:	f7fb f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005832:	b918      	cbnz	r0, 800583c <__cvt+0x8c>
 8005834:	f1c6 0601 	rsb	r6, r6, #1
 8005838:	f8ca 6000 	str.w	r6, [sl]
 800583c:	f8da 3000 	ldr.w	r3, [sl]
 8005840:	4499      	add	r9, r3
 8005842:	2200      	movs	r2, #0
 8005844:	2300      	movs	r3, #0
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fb f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800584e:	b108      	cbz	r0, 8005854 <__cvt+0xa4>
 8005850:	f8cd 900c 	str.w	r9, [sp, #12]
 8005854:	2230      	movs	r2, #48	; 0x30
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	454b      	cmp	r3, r9
 800585a:	d307      	bcc.n	800586c <__cvt+0xbc>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005860:	1bdb      	subs	r3, r3, r7
 8005862:	4638      	mov	r0, r7
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	b004      	add	sp, #16
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	1c59      	adds	r1, r3, #1
 800586e:	9103      	str	r1, [sp, #12]
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e7f0      	b.n	8005856 <__cvt+0xa6>

08005874 <__exponent>:
 8005874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005876:	4603      	mov	r3, r0
 8005878:	2900      	cmp	r1, #0
 800587a:	bfb8      	it	lt
 800587c:	4249      	neglt	r1, r1
 800587e:	f803 2b02 	strb.w	r2, [r3], #2
 8005882:	bfb4      	ite	lt
 8005884:	222d      	movlt	r2, #45	; 0x2d
 8005886:	222b      	movge	r2, #43	; 0x2b
 8005888:	2909      	cmp	r1, #9
 800588a:	7042      	strb	r2, [r0, #1]
 800588c:	dd2a      	ble.n	80058e4 <__exponent+0x70>
 800588e:	f10d 0407 	add.w	r4, sp, #7
 8005892:	46a4      	mov	ip, r4
 8005894:	270a      	movs	r7, #10
 8005896:	46a6      	mov	lr, r4
 8005898:	460a      	mov	r2, r1
 800589a:	fb91 f6f7 	sdiv	r6, r1, r7
 800589e:	fb07 1516 	mls	r5, r7, r6, r1
 80058a2:	3530      	adds	r5, #48	; 0x30
 80058a4:	2a63      	cmp	r2, #99	; 0x63
 80058a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80058aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058ae:	4631      	mov	r1, r6
 80058b0:	dcf1      	bgt.n	8005896 <__exponent+0x22>
 80058b2:	3130      	adds	r1, #48	; 0x30
 80058b4:	f1ae 0502 	sub.w	r5, lr, #2
 80058b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058bc:	1c44      	adds	r4, r0, #1
 80058be:	4629      	mov	r1, r5
 80058c0:	4561      	cmp	r1, ip
 80058c2:	d30a      	bcc.n	80058da <__exponent+0x66>
 80058c4:	f10d 0209 	add.w	r2, sp, #9
 80058c8:	eba2 020e 	sub.w	r2, r2, lr
 80058cc:	4565      	cmp	r5, ip
 80058ce:	bf88      	it	hi
 80058d0:	2200      	movhi	r2, #0
 80058d2:	4413      	add	r3, r2
 80058d4:	1a18      	subs	r0, r3, r0
 80058d6:	b003      	add	sp, #12
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058e2:	e7ed      	b.n	80058c0 <__exponent+0x4c>
 80058e4:	2330      	movs	r3, #48	; 0x30
 80058e6:	3130      	adds	r1, #48	; 0x30
 80058e8:	7083      	strb	r3, [r0, #2]
 80058ea:	70c1      	strb	r1, [r0, #3]
 80058ec:	1d03      	adds	r3, r0, #4
 80058ee:	e7f1      	b.n	80058d4 <__exponent+0x60>

080058f0 <_printf_float>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	ed2d 8b02 	vpush	{d8}
 80058f8:	b08d      	sub	sp, #52	; 0x34
 80058fa:	460c      	mov	r4, r1
 80058fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005900:	4616      	mov	r6, r2
 8005902:	461f      	mov	r7, r3
 8005904:	4605      	mov	r5, r0
 8005906:	f001 fd55 	bl	80073b4 <_localeconv_r>
 800590a:	f8d0 a000 	ldr.w	sl, [r0]
 800590e:	4650      	mov	r0, sl
 8005910:	f7fa fc5e 	bl	80001d0 <strlen>
 8005914:	2300      	movs	r3, #0
 8005916:	930a      	str	r3, [sp, #40]	; 0x28
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	f8d8 3000 	ldr.w	r3, [r8]
 8005920:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005924:	3307      	adds	r3, #7
 8005926:	f023 0307 	bic.w	r3, r3, #7
 800592a:	f103 0208 	add.w	r2, r3, #8
 800592e:	f8c8 2000 	str.w	r2, [r8]
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800593a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800593e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005942:	9307      	str	r3, [sp, #28]
 8005944:	f8cd 8018 	str.w	r8, [sp, #24]
 8005948:	ee08 0a10 	vmov	s16, r0
 800594c:	4b9f      	ldr	r3, [pc, #636]	; (8005bcc <_printf_float+0x2dc>)
 800594e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005952:	f04f 32ff 	mov.w	r2, #4294967295
 8005956:	f7fb f8e9 	bl	8000b2c <__aeabi_dcmpun>
 800595a:	bb88      	cbnz	r0, 80059c0 <_printf_float+0xd0>
 800595c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005960:	4b9a      	ldr	r3, [pc, #616]	; (8005bcc <_printf_float+0x2dc>)
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	f7fb f8c3 	bl	8000af0 <__aeabi_dcmple>
 800596a:	bb48      	cbnz	r0, 80059c0 <_printf_float+0xd0>
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fb f8b2 	bl	8000adc <__aeabi_dcmplt>
 8005978:	b110      	cbz	r0, 8005980 <_printf_float+0x90>
 800597a:	232d      	movs	r3, #45	; 0x2d
 800597c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005980:	4b93      	ldr	r3, [pc, #588]	; (8005bd0 <_printf_float+0x2e0>)
 8005982:	4894      	ldr	r0, [pc, #592]	; (8005bd4 <_printf_float+0x2e4>)
 8005984:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005988:	bf94      	ite	ls
 800598a:	4698      	movls	r8, r3
 800598c:	4680      	movhi	r8, r0
 800598e:	2303      	movs	r3, #3
 8005990:	6123      	str	r3, [r4, #16]
 8005992:	9b05      	ldr	r3, [sp, #20]
 8005994:	f023 0204 	bic.w	r2, r3, #4
 8005998:	6022      	str	r2, [r4, #0]
 800599a:	f04f 0900 	mov.w	r9, #0
 800599e:	9700      	str	r7, [sp, #0]
 80059a0:	4633      	mov	r3, r6
 80059a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f9d8 	bl	8005d5c <_printf_common>
 80059ac:	3001      	adds	r0, #1
 80059ae:	f040 8090 	bne.w	8005ad2 <_printf_float+0x1e2>
 80059b2:	f04f 30ff 	mov.w	r0, #4294967295
 80059b6:	b00d      	add	sp, #52	; 0x34
 80059b8:	ecbd 8b02 	vpop	{d8}
 80059bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c0:	4642      	mov	r2, r8
 80059c2:	464b      	mov	r3, r9
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fb f8b0 	bl	8000b2c <__aeabi_dcmpun>
 80059cc:	b140      	cbz	r0, 80059e0 <_printf_float+0xf0>
 80059ce:	464b      	mov	r3, r9
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bfbc      	itt	lt
 80059d4:	232d      	movlt	r3, #45	; 0x2d
 80059d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059da:	487f      	ldr	r0, [pc, #508]	; (8005bd8 <_printf_float+0x2e8>)
 80059dc:	4b7f      	ldr	r3, [pc, #508]	; (8005bdc <_printf_float+0x2ec>)
 80059de:	e7d1      	b.n	8005984 <_printf_float+0x94>
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059e6:	9206      	str	r2, [sp, #24]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	d13f      	bne.n	8005a6c <_printf_float+0x17c>
 80059ec:	2306      	movs	r3, #6
 80059ee:	6063      	str	r3, [r4, #4]
 80059f0:	9b05      	ldr	r3, [sp, #20]
 80059f2:	6861      	ldr	r1, [r4, #4]
 80059f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059f8:	2300      	movs	r3, #0
 80059fa:	9303      	str	r3, [sp, #12]
 80059fc:	ab0a      	add	r3, sp, #40	; 0x28
 80059fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a02:	ab09      	add	r3, sp, #36	; 0x24
 8005a04:	ec49 8b10 	vmov	d0, r8, r9
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	6022      	str	r2, [r4, #0]
 8005a0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a10:	4628      	mov	r0, r5
 8005a12:	f7ff fecd 	bl	80057b0 <__cvt>
 8005a16:	9b06      	ldr	r3, [sp, #24]
 8005a18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a1a:	2b47      	cmp	r3, #71	; 0x47
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	d108      	bne.n	8005a32 <_printf_float+0x142>
 8005a20:	1cc8      	adds	r0, r1, #3
 8005a22:	db02      	blt.n	8005a2a <_printf_float+0x13a>
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	4299      	cmp	r1, r3
 8005a28:	dd41      	ble.n	8005aae <_printf_float+0x1be>
 8005a2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a2e:	fa5f fb8b 	uxtb.w	fp, fp
 8005a32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a36:	d820      	bhi.n	8005a7a <_printf_float+0x18a>
 8005a38:	3901      	subs	r1, #1
 8005a3a:	465a      	mov	r2, fp
 8005a3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a40:	9109      	str	r1, [sp, #36]	; 0x24
 8005a42:	f7ff ff17 	bl	8005874 <__exponent>
 8005a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a48:	1813      	adds	r3, r2, r0
 8005a4a:	2a01      	cmp	r2, #1
 8005a4c:	4681      	mov	r9, r0
 8005a4e:	6123      	str	r3, [r4, #16]
 8005a50:	dc02      	bgt.n	8005a58 <_printf_float+0x168>
 8005a52:	6822      	ldr	r2, [r4, #0]
 8005a54:	07d2      	lsls	r2, r2, #31
 8005a56:	d501      	bpl.n	8005a5c <_printf_float+0x16c>
 8005a58:	3301      	adds	r3, #1
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d09c      	beq.n	800599e <_printf_float+0xae>
 8005a64:	232d      	movs	r3, #45	; 0x2d
 8005a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6a:	e798      	b.n	800599e <_printf_float+0xae>
 8005a6c:	9a06      	ldr	r2, [sp, #24]
 8005a6e:	2a47      	cmp	r2, #71	; 0x47
 8005a70:	d1be      	bne.n	80059f0 <_printf_float+0x100>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1bc      	bne.n	80059f0 <_printf_float+0x100>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e7b9      	b.n	80059ee <_printf_float+0xfe>
 8005a7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a7e:	d118      	bne.n	8005ab2 <_printf_float+0x1c2>
 8005a80:	2900      	cmp	r1, #0
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	dd0b      	ble.n	8005a9e <_printf_float+0x1ae>
 8005a86:	6121      	str	r1, [r4, #16]
 8005a88:	b913      	cbnz	r3, 8005a90 <_printf_float+0x1a0>
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	07d0      	lsls	r0, r2, #31
 8005a8e:	d502      	bpl.n	8005a96 <_printf_float+0x1a6>
 8005a90:	3301      	adds	r3, #1
 8005a92:	440b      	add	r3, r1
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a98:	f04f 0900 	mov.w	r9, #0
 8005a9c:	e7de      	b.n	8005a5c <_printf_float+0x16c>
 8005a9e:	b913      	cbnz	r3, 8005aa6 <_printf_float+0x1b6>
 8005aa0:	6822      	ldr	r2, [r4, #0]
 8005aa2:	07d2      	lsls	r2, r2, #31
 8005aa4:	d501      	bpl.n	8005aaa <_printf_float+0x1ba>
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	e7f4      	b.n	8005a94 <_printf_float+0x1a4>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e7f2      	b.n	8005a94 <_printf_float+0x1a4>
 8005aae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab4:	4299      	cmp	r1, r3
 8005ab6:	db05      	blt.n	8005ac4 <_printf_float+0x1d4>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	6121      	str	r1, [r4, #16]
 8005abc:	07d8      	lsls	r0, r3, #31
 8005abe:	d5ea      	bpl.n	8005a96 <_printf_float+0x1a6>
 8005ac0:	1c4b      	adds	r3, r1, #1
 8005ac2:	e7e7      	b.n	8005a94 <_printf_float+0x1a4>
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	bfd4      	ite	le
 8005ac8:	f1c1 0202 	rsble	r2, r1, #2
 8005acc:	2201      	movgt	r2, #1
 8005ace:	4413      	add	r3, r2
 8005ad0:	e7e0      	b.n	8005a94 <_printf_float+0x1a4>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	055a      	lsls	r2, r3, #21
 8005ad6:	d407      	bmi.n	8005ae8 <_printf_float+0x1f8>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	4642      	mov	r2, r8
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d12c      	bne.n	8005b40 <_printf_float+0x250>
 8005ae6:	e764      	b.n	80059b2 <_printf_float+0xc2>
 8005ae8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aec:	f240 80e0 	bls.w	8005cb0 <_printf_float+0x3c0>
 8005af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005af4:	2200      	movs	r2, #0
 8005af6:	2300      	movs	r3, #0
 8005af8:	f7fa ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d034      	beq.n	8005b6a <_printf_float+0x27a>
 8005b00:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <_printf_float+0x2f0>)
 8005b02:	2301      	movs	r3, #1
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af51 	beq.w	80059b2 <_printf_float+0xc2>
 8005b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b14:	429a      	cmp	r2, r3
 8005b16:	db02      	blt.n	8005b1e <_printf_float+0x22e>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	07d8      	lsls	r0, r3, #31
 8005b1c:	d510      	bpl.n	8005b40 <_printf_float+0x250>
 8005b1e:	ee18 3a10 	vmov	r3, s16
 8005b22:	4652      	mov	r2, sl
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f43f af41 	beq.w	80059b2 <_printf_float+0xc2>
 8005b30:	f04f 0800 	mov.w	r8, #0
 8005b34:	f104 091a 	add.w	r9, r4, #26
 8005b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	4543      	cmp	r3, r8
 8005b3e:	dc09      	bgt.n	8005b54 <_printf_float+0x264>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	079b      	lsls	r3, r3, #30
 8005b44:	f100 8105 	bmi.w	8005d52 <_printf_float+0x462>
 8005b48:	68e0      	ldr	r0, [r4, #12]
 8005b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4c:	4298      	cmp	r0, r3
 8005b4e:	bfb8      	it	lt
 8005b50:	4618      	movlt	r0, r3
 8005b52:	e730      	b.n	80059b6 <_printf_float+0xc6>
 8005b54:	2301      	movs	r3, #1
 8005b56:	464a      	mov	r2, r9
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f af27 	beq.w	80059b2 <_printf_float+0xc2>
 8005b64:	f108 0801 	add.w	r8, r8, #1
 8005b68:	e7e6      	b.n	8005b38 <_printf_float+0x248>
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dc39      	bgt.n	8005be4 <_printf_float+0x2f4>
 8005b70:	4a1b      	ldr	r2, [pc, #108]	; (8005be0 <_printf_float+0x2f0>)
 8005b72:	2301      	movs	r3, #1
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f af19 	beq.w	80059b2 <_printf_float+0xc2>
 8005b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d102      	bne.n	8005b8e <_printf_float+0x29e>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	07d9      	lsls	r1, r3, #31
 8005b8c:	d5d8      	bpl.n	8005b40 <_printf_float+0x250>
 8005b8e:	ee18 3a10 	vmov	r3, s16
 8005b92:	4652      	mov	r2, sl
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af09 	beq.w	80059b2 <_printf_float+0xc2>
 8005ba0:	f04f 0900 	mov.w	r9, #0
 8005ba4:	f104 0a1a 	add.w	sl, r4, #26
 8005ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005baa:	425b      	negs	r3, r3
 8005bac:	454b      	cmp	r3, r9
 8005bae:	dc01      	bgt.n	8005bb4 <_printf_float+0x2c4>
 8005bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb2:	e792      	b.n	8005ada <_printf_float+0x1ea>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4652      	mov	r2, sl
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f aef7 	beq.w	80059b2 <_printf_float+0xc2>
 8005bc4:	f109 0901 	add.w	r9, r9, #1
 8005bc8:	e7ee      	b.n	8005ba8 <_printf_float+0x2b8>
 8005bca:	bf00      	nop
 8005bcc:	7fefffff 	.word	0x7fefffff
 8005bd0:	0801248c 	.word	0x0801248c
 8005bd4:	08012490 	.word	0x08012490
 8005bd8:	08012498 	.word	0x08012498
 8005bdc:	08012494 	.word	0x08012494
 8005be0:	0801249c 	.word	0x0801249c
 8005be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005be8:	429a      	cmp	r2, r3
 8005bea:	bfa8      	it	ge
 8005bec:	461a      	movge	r2, r3
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	4691      	mov	r9, r2
 8005bf2:	dc37      	bgt.n	8005c64 <_printf_float+0x374>
 8005bf4:	f04f 0b00 	mov.w	fp, #0
 8005bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bfc:	f104 021a 	add.w	r2, r4, #26
 8005c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c02:	9305      	str	r3, [sp, #20]
 8005c04:	eba3 0309 	sub.w	r3, r3, r9
 8005c08:	455b      	cmp	r3, fp
 8005c0a:	dc33      	bgt.n	8005c74 <_printf_float+0x384>
 8005c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c10:	429a      	cmp	r2, r3
 8005c12:	db3b      	blt.n	8005c8c <_printf_float+0x39c>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	07da      	lsls	r2, r3, #31
 8005c18:	d438      	bmi.n	8005c8c <_printf_float+0x39c>
 8005c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1c:	9a05      	ldr	r2, [sp, #20]
 8005c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c20:	1a9a      	subs	r2, r3, r2
 8005c22:	eba3 0901 	sub.w	r9, r3, r1
 8005c26:	4591      	cmp	r9, r2
 8005c28:	bfa8      	it	ge
 8005c2a:	4691      	movge	r9, r2
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	dc35      	bgt.n	8005c9e <_printf_float+0x3ae>
 8005c32:	f04f 0800 	mov.w	r8, #0
 8005c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c3a:	f104 0a1a 	add.w	sl, r4, #26
 8005c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c42:	1a9b      	subs	r3, r3, r2
 8005c44:	eba3 0309 	sub.w	r3, r3, r9
 8005c48:	4543      	cmp	r3, r8
 8005c4a:	f77f af79 	ble.w	8005b40 <_printf_float+0x250>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4652      	mov	r2, sl
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f aeaa 	beq.w	80059b2 <_printf_float+0xc2>
 8005c5e:	f108 0801 	add.w	r8, r8, #1
 8005c62:	e7ec      	b.n	8005c3e <_printf_float+0x34e>
 8005c64:	4613      	mov	r3, r2
 8005c66:	4631      	mov	r1, r6
 8005c68:	4642      	mov	r2, r8
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d1c0      	bne.n	8005bf4 <_printf_float+0x304>
 8005c72:	e69e      	b.n	80059b2 <_printf_float+0xc2>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	9205      	str	r2, [sp, #20]
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f ae97 	beq.w	80059b2 <_printf_float+0xc2>
 8005c84:	9a05      	ldr	r2, [sp, #20]
 8005c86:	f10b 0b01 	add.w	fp, fp, #1
 8005c8a:	e7b9      	b.n	8005c00 <_printf_float+0x310>
 8005c8c:	ee18 3a10 	vmov	r3, s16
 8005c90:	4652      	mov	r2, sl
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d1be      	bne.n	8005c1a <_printf_float+0x32a>
 8005c9c:	e689      	b.n	80059b2 <_printf_float+0xc2>
 8005c9e:	9a05      	ldr	r2, [sp, #20]
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	4442      	add	r2, r8
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	d1c1      	bne.n	8005c32 <_printf_float+0x342>
 8005cae:	e680      	b.n	80059b2 <_printf_float+0xc2>
 8005cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cb2:	2a01      	cmp	r2, #1
 8005cb4:	dc01      	bgt.n	8005cba <_printf_float+0x3ca>
 8005cb6:	07db      	lsls	r3, r3, #31
 8005cb8:	d538      	bpl.n	8005d2c <_printf_float+0x43c>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f ae74 	beq.w	80059b2 <_printf_float+0xc2>
 8005cca:	ee18 3a10 	vmov	r3, s16
 8005cce:	4652      	mov	r2, sl
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f ae6b 	beq.w	80059b2 <_printf_float+0xc2>
 8005cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f7fa fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ce8:	b9d8      	cbnz	r0, 8005d22 <_printf_float+0x432>
 8005cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cec:	f108 0201 	add.w	r2, r8, #1
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d10e      	bne.n	8005d1a <_printf_float+0x42a>
 8005cfc:	e659      	b.n	80059b2 <_printf_float+0xc2>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4652      	mov	r2, sl
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f ae52 	beq.w	80059b2 <_printf_float+0xc2>
 8005d0e:	f108 0801 	add.w	r8, r8, #1
 8005d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d14:	3b01      	subs	r3, #1
 8005d16:	4543      	cmp	r3, r8
 8005d18:	dcf1      	bgt.n	8005cfe <_printf_float+0x40e>
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d20:	e6dc      	b.n	8005adc <_printf_float+0x1ec>
 8005d22:	f04f 0800 	mov.w	r8, #0
 8005d26:	f104 0a1a 	add.w	sl, r4, #26
 8005d2a:	e7f2      	b.n	8005d12 <_printf_float+0x422>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4642      	mov	r2, r8
 8005d30:	e7df      	b.n	8005cf2 <_printf_float+0x402>
 8005d32:	2301      	movs	r3, #1
 8005d34:	464a      	mov	r2, r9
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b8      	blx	r7
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	f43f ae38 	beq.w	80059b2 <_printf_float+0xc2>
 8005d42:	f108 0801 	add.w	r8, r8, #1
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d4a:	1a5b      	subs	r3, r3, r1
 8005d4c:	4543      	cmp	r3, r8
 8005d4e:	dcf0      	bgt.n	8005d32 <_printf_float+0x442>
 8005d50:	e6fa      	b.n	8005b48 <_printf_float+0x258>
 8005d52:	f04f 0800 	mov.w	r8, #0
 8005d56:	f104 0919 	add.w	r9, r4, #25
 8005d5a:	e7f4      	b.n	8005d46 <_printf_float+0x456>

08005d5c <_printf_common>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	4616      	mov	r6, r2
 8005d62:	4699      	mov	r9, r3
 8005d64:	688a      	ldr	r2, [r1, #8]
 8005d66:	690b      	ldr	r3, [r1, #16]
 8005d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfb8      	it	lt
 8005d70:	4613      	movlt	r3, r2
 8005d72:	6033      	str	r3, [r6, #0]
 8005d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d78:	4607      	mov	r7, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b10a      	cbz	r2, 8005d82 <_printf_common+0x26>
 8005d7e:	3301      	adds	r3, #1
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	0699      	lsls	r1, r3, #26
 8005d86:	bf42      	ittt	mi
 8005d88:	6833      	ldrmi	r3, [r6, #0]
 8005d8a:	3302      	addmi	r3, #2
 8005d8c:	6033      	strmi	r3, [r6, #0]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	f015 0506 	ands.w	r5, r5, #6
 8005d94:	d106      	bne.n	8005da4 <_printf_common+0x48>
 8005d96:	f104 0a19 	add.w	sl, r4, #25
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	6832      	ldr	r2, [r6, #0]
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	dc26      	bgt.n	8005df2 <_printf_common+0x96>
 8005da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005da8:	1e13      	subs	r3, r2, #0
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	bf18      	it	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	0692      	lsls	r2, r2, #26
 8005db2:	d42b      	bmi.n	8005e0c <_printf_common+0xb0>
 8005db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005db8:	4649      	mov	r1, r9
 8005dba:	4638      	mov	r0, r7
 8005dbc:	47c0      	blx	r8
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d01e      	beq.n	8005e00 <_printf_common+0xa4>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	68e5      	ldr	r5, [r4, #12]
 8005dc6:	6832      	ldr	r2, [r6, #0]
 8005dc8:	f003 0306 	and.w	r3, r3, #6
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	bf08      	it	eq
 8005dd0:	1aad      	subeq	r5, r5, r2
 8005dd2:	68a3      	ldr	r3, [r4, #8]
 8005dd4:	6922      	ldr	r2, [r4, #16]
 8005dd6:	bf0c      	ite	eq
 8005dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ddc:	2500      	movne	r5, #0
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bfc4      	itt	gt
 8005de2:	1a9b      	subgt	r3, r3, r2
 8005de4:	18ed      	addgt	r5, r5, r3
 8005de6:	2600      	movs	r6, #0
 8005de8:	341a      	adds	r4, #26
 8005dea:	42b5      	cmp	r5, r6
 8005dec:	d11a      	bne.n	8005e24 <_printf_common+0xc8>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e008      	b.n	8005e04 <_printf_common+0xa8>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4652      	mov	r2, sl
 8005df6:	4649      	mov	r1, r9
 8005df8:	4638      	mov	r0, r7
 8005dfa:	47c0      	blx	r8
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_printf_common+0xac>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	3501      	adds	r5, #1
 8005e0a:	e7c6      	b.n	8005d9a <_printf_common+0x3e>
 8005e0c:	18e1      	adds	r1, r4, r3
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	2030      	movs	r0, #48	; 0x30
 8005e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e16:	4422      	add	r2, r4
 8005e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e20:	3302      	adds	r3, #2
 8005e22:	e7c7      	b.n	8005db4 <_printf_common+0x58>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4622      	mov	r2, r4
 8005e28:	4649      	mov	r1, r9
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c0      	blx	r8
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0e6      	beq.n	8005e00 <_printf_common+0xa4>
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7d9      	b.n	8005dea <_printf_common+0x8e>
	...

08005e38 <_printf_i>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	7e0f      	ldrb	r7, [r1, #24]
 8005e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e40:	2f78      	cmp	r7, #120	; 0x78
 8005e42:	4691      	mov	r9, r2
 8005e44:	4680      	mov	r8, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	469a      	mov	sl, r3
 8005e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e4e:	d807      	bhi.n	8005e60 <_printf_i+0x28>
 8005e50:	2f62      	cmp	r7, #98	; 0x62
 8005e52:	d80a      	bhi.n	8005e6a <_printf_i+0x32>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	f000 80d8 	beq.w	800600a <_printf_i+0x1d2>
 8005e5a:	2f58      	cmp	r7, #88	; 0x58
 8005e5c:	f000 80a3 	beq.w	8005fa6 <_printf_i+0x16e>
 8005e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e68:	e03a      	b.n	8005ee0 <_printf_i+0xa8>
 8005e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e6e:	2b15      	cmp	r3, #21
 8005e70:	d8f6      	bhi.n	8005e60 <_printf_i+0x28>
 8005e72:	a101      	add	r1, pc, #4	; (adr r1, 8005e78 <_printf_i+0x40>)
 8005e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ee5 	.word	0x08005ee5
 8005e80:	08005e61 	.word	0x08005e61
 8005e84:	08005e61 	.word	0x08005e61
 8005e88:	08005e61 	.word	0x08005e61
 8005e8c:	08005e61 	.word	0x08005e61
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e61 	.word	0x08005e61
 8005e98:	08005e61 	.word	0x08005e61
 8005e9c:	08005e61 	.word	0x08005e61
 8005ea0:	08005e61 	.word	0x08005e61
 8005ea4:	08005ff1 	.word	0x08005ff1
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	08005fd3 	.word	0x08005fd3
 8005eb0:	08005e61 	.word	0x08005e61
 8005eb4:	08005e61 	.word	0x08005e61
 8005eb8:	08006013 	.word	0x08006013
 8005ebc:	08005e61 	.word	0x08005e61
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	08005e61 	.word	0x08005e61
 8005ec8:	08005e61 	.word	0x08005e61
 8005ecc:	08005fdb 	.word	0x08005fdb
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	602a      	str	r2, [r5, #0]
 8005ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0a3      	b.n	800602c <_printf_i+0x1f4>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	6829      	ldr	r1, [r5, #0]
 8005ee8:	0606      	lsls	r6, r0, #24
 8005eea:	f101 0304 	add.w	r3, r1, #4
 8005eee:	d50a      	bpl.n	8005f06 <_printf_i+0xce>
 8005ef0:	680e      	ldr	r6, [r1, #0]
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	da03      	bge.n	8005f00 <_printf_i+0xc8>
 8005ef8:	232d      	movs	r3, #45	; 0x2d
 8005efa:	4276      	negs	r6, r6
 8005efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f00:	485e      	ldr	r0, [pc, #376]	; (800607c <_printf_i+0x244>)
 8005f02:	230a      	movs	r3, #10
 8005f04:	e019      	b.n	8005f3a <_printf_i+0x102>
 8005f06:	680e      	ldr	r6, [r1, #0]
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f0e:	bf18      	it	ne
 8005f10:	b236      	sxthne	r6, r6
 8005f12:	e7ef      	b.n	8005ef4 <_printf_i+0xbc>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	6820      	ldr	r0, [r4, #0]
 8005f18:	1d19      	adds	r1, r3, #4
 8005f1a:	6029      	str	r1, [r5, #0]
 8005f1c:	0601      	lsls	r1, r0, #24
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0xec>
 8005f20:	681e      	ldr	r6, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0xf2>
 8005f24:	0646      	lsls	r6, r0, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0xe8>
 8005f28:	881e      	ldrh	r6, [r3, #0]
 8005f2a:	4854      	ldr	r0, [pc, #336]	; (800607c <_printf_i+0x244>)
 8005f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f2e:	bf0c      	ite	eq
 8005f30:	2308      	moveq	r3, #8
 8005f32:	230a      	movne	r3, #10
 8005f34:	2100      	movs	r1, #0
 8005f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f3a:	6865      	ldr	r5, [r4, #4]
 8005f3c:	60a5      	str	r5, [r4, #8]
 8005f3e:	2d00      	cmp	r5, #0
 8005f40:	bfa2      	ittt	ge
 8005f42:	6821      	ldrge	r1, [r4, #0]
 8005f44:	f021 0104 	bicge.w	r1, r1, #4
 8005f48:	6021      	strge	r1, [r4, #0]
 8005f4a:	b90e      	cbnz	r6, 8005f50 <_printf_i+0x118>
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	d04d      	beq.n	8005fec <_printf_i+0x1b4>
 8005f50:	4615      	mov	r5, r2
 8005f52:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f56:	fb03 6711 	mls	r7, r3, r1, r6
 8005f5a:	5dc7      	ldrb	r7, [r0, r7]
 8005f5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f60:	4637      	mov	r7, r6
 8005f62:	42bb      	cmp	r3, r7
 8005f64:	460e      	mov	r6, r1
 8005f66:	d9f4      	bls.n	8005f52 <_printf_i+0x11a>
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d10b      	bne.n	8005f84 <_printf_i+0x14c>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	07de      	lsls	r6, r3, #31
 8005f70:	d508      	bpl.n	8005f84 <_printf_i+0x14c>
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	6861      	ldr	r1, [r4, #4]
 8005f76:	4299      	cmp	r1, r3
 8005f78:	bfde      	ittt	le
 8005f7a:	2330      	movle	r3, #48	; 0x30
 8005f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f84:	1b52      	subs	r2, r2, r5
 8005f86:	6122      	str	r2, [r4, #16]
 8005f88:	f8cd a000 	str.w	sl, [sp]
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	aa03      	add	r2, sp, #12
 8005f90:	4621      	mov	r1, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	f7ff fee2 	bl	8005d5c <_printf_common>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d14c      	bne.n	8006036 <_printf_i+0x1fe>
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa0:	b004      	add	sp, #16
 8005fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa6:	4835      	ldr	r0, [pc, #212]	; (800607c <_printf_i+0x244>)
 8005fa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fac:	6829      	ldr	r1, [r5, #0]
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fb4:	6029      	str	r1, [r5, #0]
 8005fb6:	061d      	lsls	r5, r3, #24
 8005fb8:	d514      	bpl.n	8005fe4 <_printf_i+0x1ac>
 8005fba:	07df      	lsls	r7, r3, #31
 8005fbc:	bf44      	itt	mi
 8005fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc2:	6023      	strmi	r3, [r4, #0]
 8005fc4:	b91e      	cbnz	r6, 8005fce <_printf_i+0x196>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	f023 0320 	bic.w	r3, r3, #32
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	2310      	movs	r3, #16
 8005fd0:	e7b0      	b.n	8005f34 <_printf_i+0xfc>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f043 0320 	orr.w	r3, r3, #32
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	2378      	movs	r3, #120	; 0x78
 8005fdc:	4828      	ldr	r0, [pc, #160]	; (8006080 <_printf_i+0x248>)
 8005fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fe2:	e7e3      	b.n	8005fac <_printf_i+0x174>
 8005fe4:	0659      	lsls	r1, r3, #25
 8005fe6:	bf48      	it	mi
 8005fe8:	b2b6      	uxthmi	r6, r6
 8005fea:	e7e6      	b.n	8005fba <_printf_i+0x182>
 8005fec:	4615      	mov	r5, r2
 8005fee:	e7bb      	b.n	8005f68 <_printf_i+0x130>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	6826      	ldr	r6, [r4, #0]
 8005ff4:	6961      	ldr	r1, [r4, #20]
 8005ff6:	1d18      	adds	r0, r3, #4
 8005ff8:	6028      	str	r0, [r5, #0]
 8005ffa:	0635      	lsls	r5, r6, #24
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	d501      	bpl.n	8006004 <_printf_i+0x1cc>
 8006000:	6019      	str	r1, [r3, #0]
 8006002:	e002      	b.n	800600a <_printf_i+0x1d2>
 8006004:	0670      	lsls	r0, r6, #25
 8006006:	d5fb      	bpl.n	8006000 <_printf_i+0x1c8>
 8006008:	8019      	strh	r1, [r3, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	4615      	mov	r5, r2
 8006010:	e7ba      	b.n	8005f88 <_printf_i+0x150>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	602a      	str	r2, [r5, #0]
 8006018:	681d      	ldr	r5, [r3, #0]
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	2100      	movs	r1, #0
 800601e:	4628      	mov	r0, r5
 8006020:	f7fa f8de 	bl	80001e0 <memchr>
 8006024:	b108      	cbz	r0, 800602a <_printf_i+0x1f2>
 8006026:	1b40      	subs	r0, r0, r5
 8006028:	6060      	str	r0, [r4, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	2300      	movs	r3, #0
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006034:	e7a8      	b.n	8005f88 <_printf_i+0x150>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	462a      	mov	r2, r5
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	47d0      	blx	sl
 8006040:	3001      	adds	r0, #1
 8006042:	d0ab      	beq.n	8005f9c <_printf_i+0x164>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	079b      	lsls	r3, r3, #30
 8006048:	d413      	bmi.n	8006072 <_printf_i+0x23a>
 800604a:	68e0      	ldr	r0, [r4, #12]
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	4298      	cmp	r0, r3
 8006050:	bfb8      	it	lt
 8006052:	4618      	movlt	r0, r3
 8006054:	e7a4      	b.n	8005fa0 <_printf_i+0x168>
 8006056:	2301      	movs	r3, #1
 8006058:	4632      	mov	r2, r6
 800605a:	4649      	mov	r1, r9
 800605c:	4640      	mov	r0, r8
 800605e:	47d0      	blx	sl
 8006060:	3001      	adds	r0, #1
 8006062:	d09b      	beq.n	8005f9c <_printf_i+0x164>
 8006064:	3501      	adds	r5, #1
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	9903      	ldr	r1, [sp, #12]
 800606a:	1a5b      	subs	r3, r3, r1
 800606c:	42ab      	cmp	r3, r5
 800606e:	dcf2      	bgt.n	8006056 <_printf_i+0x21e>
 8006070:	e7eb      	b.n	800604a <_printf_i+0x212>
 8006072:	2500      	movs	r5, #0
 8006074:	f104 0619 	add.w	r6, r4, #25
 8006078:	e7f5      	b.n	8006066 <_printf_i+0x22e>
 800607a:	bf00      	nop
 800607c:	0801249e 	.word	0x0801249e
 8006080:	080124af 	.word	0x080124af

08006084 <iprintf>:
 8006084:	b40f      	push	{r0, r1, r2, r3}
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <iprintf+0x2c>)
 8006088:	b513      	push	{r0, r1, r4, lr}
 800608a:	681c      	ldr	r4, [r3, #0]
 800608c:	b124      	cbz	r4, 8006098 <iprintf+0x14>
 800608e:	69a3      	ldr	r3, [r4, #24]
 8006090:	b913      	cbnz	r3, 8006098 <iprintf+0x14>
 8006092:	4620      	mov	r0, r4
 8006094:	f001 f8f0 	bl	8007278 <__sinit>
 8006098:	ab05      	add	r3, sp, #20
 800609a:	9a04      	ldr	r2, [sp, #16]
 800609c:	68a1      	ldr	r1, [r4, #8]
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 fdc3 	bl	8007c2c <_vfiprintf_r>
 80060a6:	b002      	add	sp, #8
 80060a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ac:	b004      	add	sp, #16
 80060ae:	4770      	bx	lr
 80060b0:	20000740 	.word	0x20000740

080060b4 <_puts_r>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	460e      	mov	r6, r1
 80060b8:	4605      	mov	r5, r0
 80060ba:	b118      	cbz	r0, 80060c4 <_puts_r+0x10>
 80060bc:	6983      	ldr	r3, [r0, #24]
 80060be:	b90b      	cbnz	r3, 80060c4 <_puts_r+0x10>
 80060c0:	f001 f8da 	bl	8007278 <__sinit>
 80060c4:	69ab      	ldr	r3, [r5, #24]
 80060c6:	68ac      	ldr	r4, [r5, #8]
 80060c8:	b913      	cbnz	r3, 80060d0 <_puts_r+0x1c>
 80060ca:	4628      	mov	r0, r5
 80060cc:	f001 f8d4 	bl	8007278 <__sinit>
 80060d0:	4b2c      	ldr	r3, [pc, #176]	; (8006184 <_puts_r+0xd0>)
 80060d2:	429c      	cmp	r4, r3
 80060d4:	d120      	bne.n	8006118 <_puts_r+0x64>
 80060d6:	686c      	ldr	r4, [r5, #4]
 80060d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060da:	07db      	lsls	r3, r3, #31
 80060dc:	d405      	bmi.n	80060ea <_puts_r+0x36>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	0598      	lsls	r0, r3, #22
 80060e2:	d402      	bmi.n	80060ea <_puts_r+0x36>
 80060e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060e6:	f001 f96a 	bl	80073be <__retarget_lock_acquire_recursive>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	0719      	lsls	r1, r3, #28
 80060ee:	d51d      	bpl.n	800612c <_puts_r+0x78>
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	b1db      	cbz	r3, 800612c <_puts_r+0x78>
 80060f4:	3e01      	subs	r6, #1
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060fc:	3b01      	subs	r3, #1
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	bb39      	cbnz	r1, 8006152 <_puts_r+0x9e>
 8006102:	2b00      	cmp	r3, #0
 8006104:	da38      	bge.n	8006178 <_puts_r+0xc4>
 8006106:	4622      	mov	r2, r4
 8006108:	210a      	movs	r1, #10
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f860 	bl	80061d0 <__swbuf_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d011      	beq.n	8006138 <_puts_r+0x84>
 8006114:	250a      	movs	r5, #10
 8006116:	e011      	b.n	800613c <_puts_r+0x88>
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <_puts_r+0xd4>)
 800611a:	429c      	cmp	r4, r3
 800611c:	d101      	bne.n	8006122 <_puts_r+0x6e>
 800611e:	68ac      	ldr	r4, [r5, #8]
 8006120:	e7da      	b.n	80060d8 <_puts_r+0x24>
 8006122:	4b1a      	ldr	r3, [pc, #104]	; (800618c <_puts_r+0xd8>)
 8006124:	429c      	cmp	r4, r3
 8006126:	bf08      	it	eq
 8006128:	68ec      	ldreq	r4, [r5, #12]
 800612a:	e7d5      	b.n	80060d8 <_puts_r+0x24>
 800612c:	4621      	mov	r1, r4
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f8a0 	bl	8006274 <__swsetup_r>
 8006134:	2800      	cmp	r0, #0
 8006136:	d0dd      	beq.n	80060f4 <_puts_r+0x40>
 8006138:	f04f 35ff 	mov.w	r5, #4294967295
 800613c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800613e:	07da      	lsls	r2, r3, #31
 8006140:	d405      	bmi.n	800614e <_puts_r+0x9a>
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	059b      	lsls	r3, r3, #22
 8006146:	d402      	bmi.n	800614e <_puts_r+0x9a>
 8006148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800614a:	f001 f939 	bl	80073c0 <__retarget_lock_release_recursive>
 800614e:	4628      	mov	r0, r5
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	2b00      	cmp	r3, #0
 8006154:	da04      	bge.n	8006160 <_puts_r+0xac>
 8006156:	69a2      	ldr	r2, [r4, #24]
 8006158:	429a      	cmp	r2, r3
 800615a:	dc06      	bgt.n	800616a <_puts_r+0xb6>
 800615c:	290a      	cmp	r1, #10
 800615e:	d004      	beq.n	800616a <_puts_r+0xb6>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	6022      	str	r2, [r4, #0]
 8006166:	7019      	strb	r1, [r3, #0]
 8006168:	e7c5      	b.n	80060f6 <_puts_r+0x42>
 800616a:	4622      	mov	r2, r4
 800616c:	4628      	mov	r0, r5
 800616e:	f000 f82f 	bl	80061d0 <__swbuf_r>
 8006172:	3001      	adds	r0, #1
 8006174:	d1bf      	bne.n	80060f6 <_puts_r+0x42>
 8006176:	e7df      	b.n	8006138 <_puts_r+0x84>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	250a      	movs	r5, #10
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	6022      	str	r2, [r4, #0]
 8006180:	701d      	strb	r5, [r3, #0]
 8006182:	e7db      	b.n	800613c <_puts_r+0x88>
 8006184:	08012570 	.word	0x08012570
 8006188:	08012590 	.word	0x08012590
 800618c:	08012550 	.word	0x08012550

08006190 <puts>:
 8006190:	4b02      	ldr	r3, [pc, #8]	; (800619c <puts+0xc>)
 8006192:	4601      	mov	r1, r0
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	f7ff bf8d 	b.w	80060b4 <_puts_r>
 800619a:	bf00      	nop
 800619c:	20000740 	.word	0x20000740

080061a0 <_sbrk_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4d06      	ldr	r5, [pc, #24]	; (80061bc <_sbrk_r+0x1c>)
 80061a4:	2300      	movs	r3, #0
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	f7fb f8da 	bl	8001364 <_sbrk>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_sbrk_r+0x1a>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_sbrk_r+0x1a>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20001518 	.word	0x20001518

080061c0 <strcpy>:
 80061c0:	4603      	mov	r3, r0
 80061c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061c6:	f803 2b01 	strb.w	r2, [r3], #1
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	d1f9      	bne.n	80061c2 <strcpy+0x2>
 80061ce:	4770      	bx	lr

080061d0 <__swbuf_r>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	460e      	mov	r6, r1
 80061d4:	4614      	mov	r4, r2
 80061d6:	4605      	mov	r5, r0
 80061d8:	b118      	cbz	r0, 80061e2 <__swbuf_r+0x12>
 80061da:	6983      	ldr	r3, [r0, #24]
 80061dc:	b90b      	cbnz	r3, 80061e2 <__swbuf_r+0x12>
 80061de:	f001 f84b 	bl	8007278 <__sinit>
 80061e2:	4b21      	ldr	r3, [pc, #132]	; (8006268 <__swbuf_r+0x98>)
 80061e4:	429c      	cmp	r4, r3
 80061e6:	d12b      	bne.n	8006240 <__swbuf_r+0x70>
 80061e8:	686c      	ldr	r4, [r5, #4]
 80061ea:	69a3      	ldr	r3, [r4, #24]
 80061ec:	60a3      	str	r3, [r4, #8]
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	071a      	lsls	r2, r3, #28
 80061f2:	d52f      	bpl.n	8006254 <__swbuf_r+0x84>
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	b36b      	cbz	r3, 8006254 <__swbuf_r+0x84>
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	1ac0      	subs	r0, r0, r3
 80061fe:	6963      	ldr	r3, [r4, #20]
 8006200:	b2f6      	uxtb	r6, r6
 8006202:	4283      	cmp	r3, r0
 8006204:	4637      	mov	r7, r6
 8006206:	dc04      	bgt.n	8006212 <__swbuf_r+0x42>
 8006208:	4621      	mov	r1, r4
 800620a:	4628      	mov	r0, r5
 800620c:	f000 ffa0 	bl	8007150 <_fflush_r>
 8006210:	bb30      	cbnz	r0, 8006260 <__swbuf_r+0x90>
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	3b01      	subs	r3, #1
 8006216:	60a3      	str	r3, [r4, #8]
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	6022      	str	r2, [r4, #0]
 800621e:	701e      	strb	r6, [r3, #0]
 8006220:	6963      	ldr	r3, [r4, #20]
 8006222:	3001      	adds	r0, #1
 8006224:	4283      	cmp	r3, r0
 8006226:	d004      	beq.n	8006232 <__swbuf_r+0x62>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	07db      	lsls	r3, r3, #31
 800622c:	d506      	bpl.n	800623c <__swbuf_r+0x6c>
 800622e:	2e0a      	cmp	r6, #10
 8006230:	d104      	bne.n	800623c <__swbuf_r+0x6c>
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	f000 ff8b 	bl	8007150 <_fflush_r>
 800623a:	b988      	cbnz	r0, 8006260 <__swbuf_r+0x90>
 800623c:	4638      	mov	r0, r7
 800623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <__swbuf_r+0x9c>)
 8006242:	429c      	cmp	r4, r3
 8006244:	d101      	bne.n	800624a <__swbuf_r+0x7a>
 8006246:	68ac      	ldr	r4, [r5, #8]
 8006248:	e7cf      	b.n	80061ea <__swbuf_r+0x1a>
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <__swbuf_r+0xa0>)
 800624c:	429c      	cmp	r4, r3
 800624e:	bf08      	it	eq
 8006250:	68ec      	ldreq	r4, [r5, #12]
 8006252:	e7ca      	b.n	80061ea <__swbuf_r+0x1a>
 8006254:	4621      	mov	r1, r4
 8006256:	4628      	mov	r0, r5
 8006258:	f000 f80c 	bl	8006274 <__swsetup_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	d0cb      	beq.n	80061f8 <__swbuf_r+0x28>
 8006260:	f04f 37ff 	mov.w	r7, #4294967295
 8006264:	e7ea      	b.n	800623c <__swbuf_r+0x6c>
 8006266:	bf00      	nop
 8006268:	08012570 	.word	0x08012570
 800626c:	08012590 	.word	0x08012590
 8006270:	08012550 	.word	0x08012550

08006274 <__swsetup_r>:
 8006274:	4b32      	ldr	r3, [pc, #200]	; (8006340 <__swsetup_r+0xcc>)
 8006276:	b570      	push	{r4, r5, r6, lr}
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	4606      	mov	r6, r0
 800627c:	460c      	mov	r4, r1
 800627e:	b125      	cbz	r5, 800628a <__swsetup_r+0x16>
 8006280:	69ab      	ldr	r3, [r5, #24]
 8006282:	b913      	cbnz	r3, 800628a <__swsetup_r+0x16>
 8006284:	4628      	mov	r0, r5
 8006286:	f000 fff7 	bl	8007278 <__sinit>
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <__swsetup_r+0xd0>)
 800628c:	429c      	cmp	r4, r3
 800628e:	d10f      	bne.n	80062b0 <__swsetup_r+0x3c>
 8006290:	686c      	ldr	r4, [r5, #4]
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006298:	0719      	lsls	r1, r3, #28
 800629a:	d42c      	bmi.n	80062f6 <__swsetup_r+0x82>
 800629c:	06dd      	lsls	r5, r3, #27
 800629e:	d411      	bmi.n	80062c4 <__swsetup_r+0x50>
 80062a0:	2309      	movs	r3, #9
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	e03e      	b.n	800632e <__swsetup_r+0xba>
 80062b0:	4b25      	ldr	r3, [pc, #148]	; (8006348 <__swsetup_r+0xd4>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d101      	bne.n	80062ba <__swsetup_r+0x46>
 80062b6:	68ac      	ldr	r4, [r5, #8]
 80062b8:	e7eb      	b.n	8006292 <__swsetup_r+0x1e>
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <__swsetup_r+0xd8>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	bf08      	it	eq
 80062c0:	68ec      	ldreq	r4, [r5, #12]
 80062c2:	e7e6      	b.n	8006292 <__swsetup_r+0x1e>
 80062c4:	0758      	lsls	r0, r3, #29
 80062c6:	d512      	bpl.n	80062ee <__swsetup_r+0x7a>
 80062c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ca:	b141      	cbz	r1, 80062de <__swsetup_r+0x6a>
 80062cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062d0:	4299      	cmp	r1, r3
 80062d2:	d002      	beq.n	80062da <__swsetup_r+0x66>
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff f98b 	bl	80055f0 <_free_r>
 80062da:	2300      	movs	r3, #0
 80062dc:	6363      	str	r3, [r4, #52]	; 0x34
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	2300      	movs	r3, #0
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	f043 0308 	orr.w	r3, r3, #8
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	b94b      	cbnz	r3, 800630e <__swsetup_r+0x9a>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006304:	d003      	beq.n	800630e <__swsetup_r+0x9a>
 8006306:	4621      	mov	r1, r4
 8006308:	4630      	mov	r0, r6
 800630a:	f001 f87f 	bl	800740c <__smakebuf_r>
 800630e:	89a0      	ldrh	r0, [r4, #12]
 8006310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006314:	f010 0301 	ands.w	r3, r0, #1
 8006318:	d00a      	beq.n	8006330 <__swsetup_r+0xbc>
 800631a:	2300      	movs	r3, #0
 800631c:	60a3      	str	r3, [r4, #8]
 800631e:	6963      	ldr	r3, [r4, #20]
 8006320:	425b      	negs	r3, r3
 8006322:	61a3      	str	r3, [r4, #24]
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	b943      	cbnz	r3, 800633a <__swsetup_r+0xc6>
 8006328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800632c:	d1ba      	bne.n	80062a4 <__swsetup_r+0x30>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	0781      	lsls	r1, r0, #30
 8006332:	bf58      	it	pl
 8006334:	6963      	ldrpl	r3, [r4, #20]
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	e7f4      	b.n	8006324 <__swsetup_r+0xb0>
 800633a:	2000      	movs	r0, #0
 800633c:	e7f7      	b.n	800632e <__swsetup_r+0xba>
 800633e:	bf00      	nop
 8006340:	20000740 	.word	0x20000740
 8006344:	08012570 	.word	0x08012570
 8006348:	08012590 	.word	0x08012590
 800634c:	08012550 	.word	0x08012550

08006350 <quorem>:
 8006350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	6903      	ldr	r3, [r0, #16]
 8006356:	690c      	ldr	r4, [r1, #16]
 8006358:	42a3      	cmp	r3, r4
 800635a:	4607      	mov	r7, r0
 800635c:	f2c0 8081 	blt.w	8006462 <quorem+0x112>
 8006360:	3c01      	subs	r4, #1
 8006362:	f101 0814 	add.w	r8, r1, #20
 8006366:	f100 0514 	add.w	r5, r0, #20
 800636a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006378:	3301      	adds	r3, #1
 800637a:	429a      	cmp	r2, r3
 800637c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006380:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006384:	fbb2 f6f3 	udiv	r6, r2, r3
 8006388:	d331      	bcc.n	80063ee <quorem+0x9e>
 800638a:	f04f 0e00 	mov.w	lr, #0
 800638e:	4640      	mov	r0, r8
 8006390:	46ac      	mov	ip, r5
 8006392:	46f2      	mov	sl, lr
 8006394:	f850 2b04 	ldr.w	r2, [r0], #4
 8006398:	b293      	uxth	r3, r2
 800639a:	fb06 e303 	mla	r3, r6, r3, lr
 800639e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	ebaa 0303 	sub.w	r3, sl, r3
 80063a8:	f8dc a000 	ldr.w	sl, [ip]
 80063ac:	0c12      	lsrs	r2, r2, #16
 80063ae:	fa13 f38a 	uxtah	r3, r3, sl
 80063b2:	fb06 e202 	mla	r2, r6, r2, lr
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	9b00      	ldr	r3, [sp, #0]
 80063ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063be:	b292      	uxth	r2, r2
 80063c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80063cc:	4581      	cmp	r9, r0
 80063ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063d2:	f84c 3b04 	str.w	r3, [ip], #4
 80063d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063da:	d2db      	bcs.n	8006394 <quorem+0x44>
 80063dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80063e0:	b92b      	cbnz	r3, 80063ee <quorem+0x9e>
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	429d      	cmp	r5, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	d32e      	bcc.n	800644a <quorem+0xfa>
 80063ec:	613c      	str	r4, [r7, #16]
 80063ee:	4638      	mov	r0, r7
 80063f0:	f001 fada 	bl	80079a8 <__mcmp>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	db24      	blt.n	8006442 <quorem+0xf2>
 80063f8:	3601      	adds	r6, #1
 80063fa:	4628      	mov	r0, r5
 80063fc:	f04f 0c00 	mov.w	ip, #0
 8006400:	f858 2b04 	ldr.w	r2, [r8], #4
 8006404:	f8d0 e000 	ldr.w	lr, [r0]
 8006408:	b293      	uxth	r3, r2
 800640a:	ebac 0303 	sub.w	r3, ip, r3
 800640e:	0c12      	lsrs	r2, r2, #16
 8006410:	fa13 f38e 	uxtah	r3, r3, lr
 8006414:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800641c:	b29b      	uxth	r3, r3
 800641e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006422:	45c1      	cmp	r9, r8
 8006424:	f840 3b04 	str.w	r3, [r0], #4
 8006428:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800642c:	d2e8      	bcs.n	8006400 <quorem+0xb0>
 800642e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006436:	b922      	cbnz	r2, 8006442 <quorem+0xf2>
 8006438:	3b04      	subs	r3, #4
 800643a:	429d      	cmp	r5, r3
 800643c:	461a      	mov	r2, r3
 800643e:	d30a      	bcc.n	8006456 <quorem+0x106>
 8006440:	613c      	str	r4, [r7, #16]
 8006442:	4630      	mov	r0, r6
 8006444:	b003      	add	sp, #12
 8006446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	3b04      	subs	r3, #4
 800644e:	2a00      	cmp	r2, #0
 8006450:	d1cc      	bne.n	80063ec <quorem+0x9c>
 8006452:	3c01      	subs	r4, #1
 8006454:	e7c7      	b.n	80063e6 <quorem+0x96>
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	3b04      	subs	r3, #4
 800645a:	2a00      	cmp	r2, #0
 800645c:	d1f0      	bne.n	8006440 <quorem+0xf0>
 800645e:	3c01      	subs	r4, #1
 8006460:	e7eb      	b.n	800643a <quorem+0xea>
 8006462:	2000      	movs	r0, #0
 8006464:	e7ee      	b.n	8006444 <quorem+0xf4>
	...

08006468 <_dtoa_r>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	ed2d 8b04 	vpush	{d8-d9}
 8006470:	ec57 6b10 	vmov	r6, r7, d0
 8006474:	b093      	sub	sp, #76	; 0x4c
 8006476:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006478:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800647c:	9106      	str	r1, [sp, #24]
 800647e:	ee10 aa10 	vmov	sl, s0
 8006482:	4604      	mov	r4, r0
 8006484:	9209      	str	r2, [sp, #36]	; 0x24
 8006486:	930c      	str	r3, [sp, #48]	; 0x30
 8006488:	46bb      	mov	fp, r7
 800648a:	b975      	cbnz	r5, 80064aa <_dtoa_r+0x42>
 800648c:	2010      	movs	r0, #16
 800648e:	f7ff f891 	bl	80055b4 <malloc>
 8006492:	4602      	mov	r2, r0
 8006494:	6260      	str	r0, [r4, #36]	; 0x24
 8006496:	b920      	cbnz	r0, 80064a2 <_dtoa_r+0x3a>
 8006498:	4ba7      	ldr	r3, [pc, #668]	; (8006738 <_dtoa_r+0x2d0>)
 800649a:	21ea      	movs	r1, #234	; 0xea
 800649c:	48a7      	ldr	r0, [pc, #668]	; (800673c <_dtoa_r+0x2d4>)
 800649e:	f001 fd4b 	bl	8007f38 <__assert_func>
 80064a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064a6:	6005      	str	r5, [r0, #0]
 80064a8:	60c5      	str	r5, [r0, #12]
 80064aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ac:	6819      	ldr	r1, [r3, #0]
 80064ae:	b151      	cbz	r1, 80064c6 <_dtoa_r+0x5e>
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	604a      	str	r2, [r1, #4]
 80064b4:	2301      	movs	r3, #1
 80064b6:	4093      	lsls	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
 80064ba:	4620      	mov	r0, r4
 80064bc:	f001 f832 	bl	8007524 <_Bfree>
 80064c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	1e3b      	subs	r3, r7, #0
 80064c8:	bfaa      	itet	ge
 80064ca:	2300      	movge	r3, #0
 80064cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064d0:	f8c8 3000 	strge.w	r3, [r8]
 80064d4:	4b9a      	ldr	r3, [pc, #616]	; (8006740 <_dtoa_r+0x2d8>)
 80064d6:	bfbc      	itt	lt
 80064d8:	2201      	movlt	r2, #1
 80064da:	f8c8 2000 	strlt.w	r2, [r8]
 80064de:	ea33 030b 	bics.w	r3, r3, fp
 80064e2:	d11b      	bne.n	800651c <_dtoa_r+0xb4>
 80064e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064f0:	4333      	orrs	r3, r6
 80064f2:	f000 8592 	beq.w	800701a <_dtoa_r+0xbb2>
 80064f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064f8:	b963      	cbnz	r3, 8006514 <_dtoa_r+0xac>
 80064fa:	4b92      	ldr	r3, [pc, #584]	; (8006744 <_dtoa_r+0x2dc>)
 80064fc:	e022      	b.n	8006544 <_dtoa_r+0xdc>
 80064fe:	4b92      	ldr	r3, [pc, #584]	; (8006748 <_dtoa_r+0x2e0>)
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	3308      	adds	r3, #8
 8006504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	9801      	ldr	r0, [sp, #4]
 800650a:	b013      	add	sp, #76	; 0x4c
 800650c:	ecbd 8b04 	vpop	{d8-d9}
 8006510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006514:	4b8b      	ldr	r3, [pc, #556]	; (8006744 <_dtoa_r+0x2dc>)
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	3303      	adds	r3, #3
 800651a:	e7f3      	b.n	8006504 <_dtoa_r+0x9c>
 800651c:	2200      	movs	r2, #0
 800651e:	2300      	movs	r3, #0
 8006520:	4650      	mov	r0, sl
 8006522:	4659      	mov	r1, fp
 8006524:	f7fa fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006528:	ec4b ab19 	vmov	d9, sl, fp
 800652c:	4680      	mov	r8, r0
 800652e:	b158      	cbz	r0, 8006548 <_dtoa_r+0xe0>
 8006530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006532:	2301      	movs	r3, #1
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 856b 	beq.w	8007014 <_dtoa_r+0xbac>
 800653e:	4883      	ldr	r0, [pc, #524]	; (800674c <_dtoa_r+0x2e4>)
 8006540:	6018      	str	r0, [r3, #0]
 8006542:	1e43      	subs	r3, r0, #1
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	e7df      	b.n	8006508 <_dtoa_r+0xa0>
 8006548:	ec4b ab10 	vmov	d0, sl, fp
 800654c:	aa10      	add	r2, sp, #64	; 0x40
 800654e:	a911      	add	r1, sp, #68	; 0x44
 8006550:	4620      	mov	r0, r4
 8006552:	f001 facf 	bl	8007af4 <__d2b>
 8006556:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800655a:	ee08 0a10 	vmov	s16, r0
 800655e:	2d00      	cmp	r5, #0
 8006560:	f000 8084 	beq.w	800666c <_dtoa_r+0x204>
 8006564:	ee19 3a90 	vmov	r3, s19
 8006568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800656c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006570:	4656      	mov	r6, sl
 8006572:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006576:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800657a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800657e:	4b74      	ldr	r3, [pc, #464]	; (8006750 <_dtoa_r+0x2e8>)
 8006580:	2200      	movs	r2, #0
 8006582:	4630      	mov	r0, r6
 8006584:	4639      	mov	r1, r7
 8006586:	f7f9 fe7f 	bl	8000288 <__aeabi_dsub>
 800658a:	a365      	add	r3, pc, #404	; (adr r3, 8006720 <_dtoa_r+0x2b8>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7fa f832 	bl	80005f8 <__aeabi_dmul>
 8006594:	a364      	add	r3, pc, #400	; (adr r3, 8006728 <_dtoa_r+0x2c0>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f7f9 fe77 	bl	800028c <__adddf3>
 800659e:	4606      	mov	r6, r0
 80065a0:	4628      	mov	r0, r5
 80065a2:	460f      	mov	r7, r1
 80065a4:	f7f9 ffbe 	bl	8000524 <__aeabi_i2d>
 80065a8:	a361      	add	r3, pc, #388	; (adr r3, 8006730 <_dtoa_r+0x2c8>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4630      	mov	r0, r6
 80065b8:	4639      	mov	r1, r7
 80065ba:	f7f9 fe67 	bl	800028c <__adddf3>
 80065be:	4606      	mov	r6, r0
 80065c0:	460f      	mov	r7, r1
 80065c2:	f7fa fac9 	bl	8000b58 <__aeabi_d2iz>
 80065c6:	2200      	movs	r2, #0
 80065c8:	9000      	str	r0, [sp, #0]
 80065ca:	2300      	movs	r3, #0
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7fa fa84 	bl	8000adc <__aeabi_dcmplt>
 80065d4:	b150      	cbz	r0, 80065ec <_dtoa_r+0x184>
 80065d6:	9800      	ldr	r0, [sp, #0]
 80065d8:	f7f9 ffa4 	bl	8000524 <__aeabi_i2d>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	f7fa fa72 	bl	8000ac8 <__aeabi_dcmpeq>
 80065e4:	b910      	cbnz	r0, 80065ec <_dtoa_r+0x184>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	9b00      	ldr	r3, [sp, #0]
 80065ee:	2b16      	cmp	r3, #22
 80065f0:	d85a      	bhi.n	80066a8 <_dtoa_r+0x240>
 80065f2:	9a00      	ldr	r2, [sp, #0]
 80065f4:	4b57      	ldr	r3, [pc, #348]	; (8006754 <_dtoa_r+0x2ec>)
 80065f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	ec51 0b19 	vmov	r0, r1, d9
 8006602:	f7fa fa6b 	bl	8000adc <__aeabi_dcmplt>
 8006606:	2800      	cmp	r0, #0
 8006608:	d050      	beq.n	80066ac <_dtoa_r+0x244>
 800660a:	9b00      	ldr	r3, [sp, #0]
 800660c:	3b01      	subs	r3, #1
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	930b      	str	r3, [sp, #44]	; 0x2c
 8006614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006616:	1b5d      	subs	r5, r3, r5
 8006618:	1e6b      	subs	r3, r5, #1
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	bf45      	ittet	mi
 800661e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006622:	9304      	strmi	r3, [sp, #16]
 8006624:	2300      	movpl	r3, #0
 8006626:	2300      	movmi	r3, #0
 8006628:	bf4c      	ite	mi
 800662a:	9305      	strmi	r3, [sp, #20]
 800662c:	9304      	strpl	r3, [sp, #16]
 800662e:	9b00      	ldr	r3, [sp, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db3d      	blt.n	80066b0 <_dtoa_r+0x248>
 8006634:	9b05      	ldr	r3, [sp, #20]
 8006636:	9a00      	ldr	r2, [sp, #0]
 8006638:	920a      	str	r2, [sp, #40]	; 0x28
 800663a:	4413      	add	r3, r2
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	2300      	movs	r3, #0
 8006640:	9307      	str	r3, [sp, #28]
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	2b09      	cmp	r3, #9
 8006646:	f200 8089 	bhi.w	800675c <_dtoa_r+0x2f4>
 800664a:	2b05      	cmp	r3, #5
 800664c:	bfc4      	itt	gt
 800664e:	3b04      	subgt	r3, #4
 8006650:	9306      	strgt	r3, [sp, #24]
 8006652:	9b06      	ldr	r3, [sp, #24]
 8006654:	f1a3 0302 	sub.w	r3, r3, #2
 8006658:	bfcc      	ite	gt
 800665a:	2500      	movgt	r5, #0
 800665c:	2501      	movle	r5, #1
 800665e:	2b03      	cmp	r3, #3
 8006660:	f200 8087 	bhi.w	8006772 <_dtoa_r+0x30a>
 8006664:	e8df f003 	tbb	[pc, r3]
 8006668:	59383a2d 	.word	0x59383a2d
 800666c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006670:	441d      	add	r5, r3
 8006672:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006676:	2b20      	cmp	r3, #32
 8006678:	bfc1      	itttt	gt
 800667a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800667e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006682:	fa0b f303 	lslgt.w	r3, fp, r3
 8006686:	fa26 f000 	lsrgt.w	r0, r6, r0
 800668a:	bfda      	itte	le
 800668c:	f1c3 0320 	rsble	r3, r3, #32
 8006690:	fa06 f003 	lslle.w	r0, r6, r3
 8006694:	4318      	orrgt	r0, r3
 8006696:	f7f9 ff35 	bl	8000504 <__aeabi_ui2d>
 800669a:	2301      	movs	r3, #1
 800669c:	4606      	mov	r6, r0
 800669e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066a2:	3d01      	subs	r5, #1
 80066a4:	930e      	str	r3, [sp, #56]	; 0x38
 80066a6:	e76a      	b.n	800657e <_dtoa_r+0x116>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e7b2      	b.n	8006612 <_dtoa_r+0x1aa>
 80066ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80066ae:	e7b1      	b.n	8006614 <_dtoa_r+0x1ac>
 80066b0:	9b04      	ldr	r3, [sp, #16]
 80066b2:	9a00      	ldr	r2, [sp, #0]
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	9304      	str	r3, [sp, #16]
 80066b8:	4253      	negs	r3, r2
 80066ba:	9307      	str	r3, [sp, #28]
 80066bc:	2300      	movs	r3, #0
 80066be:	930a      	str	r3, [sp, #40]	; 0x28
 80066c0:	e7bf      	b.n	8006642 <_dtoa_r+0x1da>
 80066c2:	2300      	movs	r3, #0
 80066c4:	9308      	str	r3, [sp, #32]
 80066c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dc55      	bgt.n	8006778 <_dtoa_r+0x310>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066d2:	461a      	mov	r2, r3
 80066d4:	9209      	str	r2, [sp, #36]	; 0x24
 80066d6:	e00c      	b.n	80066f2 <_dtoa_r+0x28a>
 80066d8:	2301      	movs	r3, #1
 80066da:	e7f3      	b.n	80066c4 <_dtoa_r+0x25c>
 80066dc:	2300      	movs	r3, #0
 80066de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e0:	9308      	str	r3, [sp, #32]
 80066e2:	9b00      	ldr	r3, [sp, #0]
 80066e4:	4413      	add	r3, r2
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	3301      	adds	r3, #1
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	9303      	str	r3, [sp, #12]
 80066ee:	bfb8      	it	lt
 80066f0:	2301      	movlt	r3, #1
 80066f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066f4:	2200      	movs	r2, #0
 80066f6:	6042      	str	r2, [r0, #4]
 80066f8:	2204      	movs	r2, #4
 80066fa:	f102 0614 	add.w	r6, r2, #20
 80066fe:	429e      	cmp	r6, r3
 8006700:	6841      	ldr	r1, [r0, #4]
 8006702:	d93d      	bls.n	8006780 <_dtoa_r+0x318>
 8006704:	4620      	mov	r0, r4
 8006706:	f000 fecd 	bl	80074a4 <_Balloc>
 800670a:	9001      	str	r0, [sp, #4]
 800670c:	2800      	cmp	r0, #0
 800670e:	d13b      	bne.n	8006788 <_dtoa_r+0x320>
 8006710:	4b11      	ldr	r3, [pc, #68]	; (8006758 <_dtoa_r+0x2f0>)
 8006712:	4602      	mov	r2, r0
 8006714:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006718:	e6c0      	b.n	800649c <_dtoa_r+0x34>
 800671a:	2301      	movs	r3, #1
 800671c:	e7df      	b.n	80066de <_dtoa_r+0x276>
 800671e:	bf00      	nop
 8006720:	636f4361 	.word	0x636f4361
 8006724:	3fd287a7 	.word	0x3fd287a7
 8006728:	8b60c8b3 	.word	0x8b60c8b3
 800672c:	3fc68a28 	.word	0x3fc68a28
 8006730:	509f79fb 	.word	0x509f79fb
 8006734:	3fd34413 	.word	0x3fd34413
 8006738:	080124cd 	.word	0x080124cd
 800673c:	080124e4 	.word	0x080124e4
 8006740:	7ff00000 	.word	0x7ff00000
 8006744:	080124c9 	.word	0x080124c9
 8006748:	080124c0 	.word	0x080124c0
 800674c:	0801249d 	.word	0x0801249d
 8006750:	3ff80000 	.word	0x3ff80000
 8006754:	08012638 	.word	0x08012638
 8006758:	0801253f 	.word	0x0801253f
 800675c:	2501      	movs	r5, #1
 800675e:	2300      	movs	r3, #0
 8006760:	9306      	str	r3, [sp, #24]
 8006762:	9508      	str	r5, [sp, #32]
 8006764:	f04f 33ff 	mov.w	r3, #4294967295
 8006768:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800676c:	2200      	movs	r2, #0
 800676e:	2312      	movs	r3, #18
 8006770:	e7b0      	b.n	80066d4 <_dtoa_r+0x26c>
 8006772:	2301      	movs	r3, #1
 8006774:	9308      	str	r3, [sp, #32]
 8006776:	e7f5      	b.n	8006764 <_dtoa_r+0x2fc>
 8006778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800677e:	e7b8      	b.n	80066f2 <_dtoa_r+0x28a>
 8006780:	3101      	adds	r1, #1
 8006782:	6041      	str	r1, [r0, #4]
 8006784:	0052      	lsls	r2, r2, #1
 8006786:	e7b8      	b.n	80066fa <_dtoa_r+0x292>
 8006788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800678a:	9a01      	ldr	r2, [sp, #4]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	2b0e      	cmp	r3, #14
 8006792:	f200 809d 	bhi.w	80068d0 <_dtoa_r+0x468>
 8006796:	2d00      	cmp	r5, #0
 8006798:	f000 809a 	beq.w	80068d0 <_dtoa_r+0x468>
 800679c:	9b00      	ldr	r3, [sp, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dd32      	ble.n	8006808 <_dtoa_r+0x3a0>
 80067a2:	4ab7      	ldr	r2, [pc, #732]	; (8006a80 <_dtoa_r+0x618>)
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067b0:	9b00      	ldr	r3, [sp, #0]
 80067b2:	05d8      	lsls	r0, r3, #23
 80067b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067b8:	d516      	bpl.n	80067e8 <_dtoa_r+0x380>
 80067ba:	4bb2      	ldr	r3, [pc, #712]	; (8006a84 <_dtoa_r+0x61c>)
 80067bc:	ec51 0b19 	vmov	r0, r1, d9
 80067c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067c4:	f7fa f842 	bl	800084c <__aeabi_ddiv>
 80067c8:	f007 070f 	and.w	r7, r7, #15
 80067cc:	4682      	mov	sl, r0
 80067ce:	468b      	mov	fp, r1
 80067d0:	2503      	movs	r5, #3
 80067d2:	4eac      	ldr	r6, [pc, #688]	; (8006a84 <_dtoa_r+0x61c>)
 80067d4:	b957      	cbnz	r7, 80067ec <_dtoa_r+0x384>
 80067d6:	4642      	mov	r2, r8
 80067d8:	464b      	mov	r3, r9
 80067da:	4650      	mov	r0, sl
 80067dc:	4659      	mov	r1, fp
 80067de:	f7fa f835 	bl	800084c <__aeabi_ddiv>
 80067e2:	4682      	mov	sl, r0
 80067e4:	468b      	mov	fp, r1
 80067e6:	e028      	b.n	800683a <_dtoa_r+0x3d2>
 80067e8:	2502      	movs	r5, #2
 80067ea:	e7f2      	b.n	80067d2 <_dtoa_r+0x36a>
 80067ec:	07f9      	lsls	r1, r7, #31
 80067ee:	d508      	bpl.n	8006802 <_dtoa_r+0x39a>
 80067f0:	4640      	mov	r0, r8
 80067f2:	4649      	mov	r1, r9
 80067f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067f8:	f7f9 fefe 	bl	80005f8 <__aeabi_dmul>
 80067fc:	3501      	adds	r5, #1
 80067fe:	4680      	mov	r8, r0
 8006800:	4689      	mov	r9, r1
 8006802:	107f      	asrs	r7, r7, #1
 8006804:	3608      	adds	r6, #8
 8006806:	e7e5      	b.n	80067d4 <_dtoa_r+0x36c>
 8006808:	f000 809b 	beq.w	8006942 <_dtoa_r+0x4da>
 800680c:	9b00      	ldr	r3, [sp, #0]
 800680e:	4f9d      	ldr	r7, [pc, #628]	; (8006a84 <_dtoa_r+0x61c>)
 8006810:	425e      	negs	r6, r3
 8006812:	4b9b      	ldr	r3, [pc, #620]	; (8006a80 <_dtoa_r+0x618>)
 8006814:	f006 020f 	and.w	r2, r6, #15
 8006818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	ec51 0b19 	vmov	r0, r1, d9
 8006824:	f7f9 fee8 	bl	80005f8 <__aeabi_dmul>
 8006828:	1136      	asrs	r6, r6, #4
 800682a:	4682      	mov	sl, r0
 800682c:	468b      	mov	fp, r1
 800682e:	2300      	movs	r3, #0
 8006830:	2502      	movs	r5, #2
 8006832:	2e00      	cmp	r6, #0
 8006834:	d17a      	bne.n	800692c <_dtoa_r+0x4c4>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1d3      	bne.n	80067e2 <_dtoa_r+0x37a>
 800683a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8082 	beq.w	8006946 <_dtoa_r+0x4de>
 8006842:	4b91      	ldr	r3, [pc, #580]	; (8006a88 <_dtoa_r+0x620>)
 8006844:	2200      	movs	r2, #0
 8006846:	4650      	mov	r0, sl
 8006848:	4659      	mov	r1, fp
 800684a:	f7fa f947 	bl	8000adc <__aeabi_dcmplt>
 800684e:	2800      	cmp	r0, #0
 8006850:	d079      	beq.n	8006946 <_dtoa_r+0x4de>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d076      	beq.n	8006946 <_dtoa_r+0x4de>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	dd36      	ble.n	80068cc <_dtoa_r+0x464>
 800685e:	9b00      	ldr	r3, [sp, #0]
 8006860:	4650      	mov	r0, sl
 8006862:	4659      	mov	r1, fp
 8006864:	1e5f      	subs	r7, r3, #1
 8006866:	2200      	movs	r2, #0
 8006868:	4b88      	ldr	r3, [pc, #544]	; (8006a8c <_dtoa_r+0x624>)
 800686a:	f7f9 fec5 	bl	80005f8 <__aeabi_dmul>
 800686e:	9e02      	ldr	r6, [sp, #8]
 8006870:	4682      	mov	sl, r0
 8006872:	468b      	mov	fp, r1
 8006874:	3501      	adds	r5, #1
 8006876:	4628      	mov	r0, r5
 8006878:	f7f9 fe54 	bl	8000524 <__aeabi_i2d>
 800687c:	4652      	mov	r2, sl
 800687e:	465b      	mov	r3, fp
 8006880:	f7f9 feba 	bl	80005f8 <__aeabi_dmul>
 8006884:	4b82      	ldr	r3, [pc, #520]	; (8006a90 <_dtoa_r+0x628>)
 8006886:	2200      	movs	r2, #0
 8006888:	f7f9 fd00 	bl	800028c <__adddf3>
 800688c:	46d0      	mov	r8, sl
 800688e:	46d9      	mov	r9, fp
 8006890:	4682      	mov	sl, r0
 8006892:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006896:	2e00      	cmp	r6, #0
 8006898:	d158      	bne.n	800694c <_dtoa_r+0x4e4>
 800689a:	4b7e      	ldr	r3, [pc, #504]	; (8006a94 <_dtoa_r+0x62c>)
 800689c:	2200      	movs	r2, #0
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7f9 fcf1 	bl	8000288 <__aeabi_dsub>
 80068a6:	4652      	mov	r2, sl
 80068a8:	465b      	mov	r3, fp
 80068aa:	4680      	mov	r8, r0
 80068ac:	4689      	mov	r9, r1
 80068ae:	f7fa f933 	bl	8000b18 <__aeabi_dcmpgt>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f040 8295 	bne.w	8006de2 <_dtoa_r+0x97a>
 80068b8:	4652      	mov	r2, sl
 80068ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068be:	4640      	mov	r0, r8
 80068c0:	4649      	mov	r1, r9
 80068c2:	f7fa f90b 	bl	8000adc <__aeabi_dcmplt>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	f040 8289 	bne.w	8006dde <_dtoa_r+0x976>
 80068cc:	ec5b ab19 	vmov	sl, fp, d9
 80068d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f2c0 8148 	blt.w	8006b68 <_dtoa_r+0x700>
 80068d8:	9a00      	ldr	r2, [sp, #0]
 80068da:	2a0e      	cmp	r2, #14
 80068dc:	f300 8144 	bgt.w	8006b68 <_dtoa_r+0x700>
 80068e0:	4b67      	ldr	r3, [pc, #412]	; (8006a80 <_dtoa_r+0x618>)
 80068e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f280 80d5 	bge.w	8006a9c <_dtoa_r+0x634>
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f300 80d1 	bgt.w	8006a9c <_dtoa_r+0x634>
 80068fa:	f040 826f 	bne.w	8006ddc <_dtoa_r+0x974>
 80068fe:	4b65      	ldr	r3, [pc, #404]	; (8006a94 <_dtoa_r+0x62c>)
 8006900:	2200      	movs	r2, #0
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	4652      	mov	r2, sl
 800690c:	465b      	mov	r3, fp
 800690e:	f7fa f8f9 	bl	8000b04 <__aeabi_dcmpge>
 8006912:	9e03      	ldr	r6, [sp, #12]
 8006914:	4637      	mov	r7, r6
 8006916:	2800      	cmp	r0, #0
 8006918:	f040 8245 	bne.w	8006da6 <_dtoa_r+0x93e>
 800691c:	9d01      	ldr	r5, [sp, #4]
 800691e:	2331      	movs	r3, #49	; 0x31
 8006920:	f805 3b01 	strb.w	r3, [r5], #1
 8006924:	9b00      	ldr	r3, [sp, #0]
 8006926:	3301      	adds	r3, #1
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	e240      	b.n	8006dae <_dtoa_r+0x946>
 800692c:	07f2      	lsls	r2, r6, #31
 800692e:	d505      	bpl.n	800693c <_dtoa_r+0x4d4>
 8006930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006934:	f7f9 fe60 	bl	80005f8 <__aeabi_dmul>
 8006938:	3501      	adds	r5, #1
 800693a:	2301      	movs	r3, #1
 800693c:	1076      	asrs	r6, r6, #1
 800693e:	3708      	adds	r7, #8
 8006940:	e777      	b.n	8006832 <_dtoa_r+0x3ca>
 8006942:	2502      	movs	r5, #2
 8006944:	e779      	b.n	800683a <_dtoa_r+0x3d2>
 8006946:	9f00      	ldr	r7, [sp, #0]
 8006948:	9e03      	ldr	r6, [sp, #12]
 800694a:	e794      	b.n	8006876 <_dtoa_r+0x40e>
 800694c:	9901      	ldr	r1, [sp, #4]
 800694e:	4b4c      	ldr	r3, [pc, #304]	; (8006a80 <_dtoa_r+0x618>)
 8006950:	4431      	add	r1, r6
 8006952:	910d      	str	r1, [sp, #52]	; 0x34
 8006954:	9908      	ldr	r1, [sp, #32]
 8006956:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800695a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800695e:	2900      	cmp	r1, #0
 8006960:	d043      	beq.n	80069ea <_dtoa_r+0x582>
 8006962:	494d      	ldr	r1, [pc, #308]	; (8006a98 <_dtoa_r+0x630>)
 8006964:	2000      	movs	r0, #0
 8006966:	f7f9 ff71 	bl	800084c <__aeabi_ddiv>
 800696a:	4652      	mov	r2, sl
 800696c:	465b      	mov	r3, fp
 800696e:	f7f9 fc8b 	bl	8000288 <__aeabi_dsub>
 8006972:	9d01      	ldr	r5, [sp, #4]
 8006974:	4682      	mov	sl, r0
 8006976:	468b      	mov	fp, r1
 8006978:	4649      	mov	r1, r9
 800697a:	4640      	mov	r0, r8
 800697c:	f7fa f8ec 	bl	8000b58 <__aeabi_d2iz>
 8006980:	4606      	mov	r6, r0
 8006982:	f7f9 fdcf 	bl	8000524 <__aeabi_i2d>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4640      	mov	r0, r8
 800698c:	4649      	mov	r1, r9
 800698e:	f7f9 fc7b 	bl	8000288 <__aeabi_dsub>
 8006992:	3630      	adds	r6, #48	; 0x30
 8006994:	f805 6b01 	strb.w	r6, [r5], #1
 8006998:	4652      	mov	r2, sl
 800699a:	465b      	mov	r3, fp
 800699c:	4680      	mov	r8, r0
 800699e:	4689      	mov	r9, r1
 80069a0:	f7fa f89c 	bl	8000adc <__aeabi_dcmplt>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d163      	bne.n	8006a70 <_dtoa_r+0x608>
 80069a8:	4642      	mov	r2, r8
 80069aa:	464b      	mov	r3, r9
 80069ac:	4936      	ldr	r1, [pc, #216]	; (8006a88 <_dtoa_r+0x620>)
 80069ae:	2000      	movs	r0, #0
 80069b0:	f7f9 fc6a 	bl	8000288 <__aeabi_dsub>
 80069b4:	4652      	mov	r2, sl
 80069b6:	465b      	mov	r3, fp
 80069b8:	f7fa f890 	bl	8000adc <__aeabi_dcmplt>
 80069bc:	2800      	cmp	r0, #0
 80069be:	f040 80b5 	bne.w	8006b2c <_dtoa_r+0x6c4>
 80069c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c4:	429d      	cmp	r5, r3
 80069c6:	d081      	beq.n	80068cc <_dtoa_r+0x464>
 80069c8:	4b30      	ldr	r3, [pc, #192]	; (8006a8c <_dtoa_r+0x624>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	4650      	mov	r0, sl
 80069ce:	4659      	mov	r1, fp
 80069d0:	f7f9 fe12 	bl	80005f8 <__aeabi_dmul>
 80069d4:	4b2d      	ldr	r3, [pc, #180]	; (8006a8c <_dtoa_r+0x624>)
 80069d6:	4682      	mov	sl, r0
 80069d8:	468b      	mov	fp, r1
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	2200      	movs	r2, #0
 80069e0:	f7f9 fe0a 	bl	80005f8 <__aeabi_dmul>
 80069e4:	4680      	mov	r8, r0
 80069e6:	4689      	mov	r9, r1
 80069e8:	e7c6      	b.n	8006978 <_dtoa_r+0x510>
 80069ea:	4650      	mov	r0, sl
 80069ec:	4659      	mov	r1, fp
 80069ee:	f7f9 fe03 	bl	80005f8 <__aeabi_dmul>
 80069f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f4:	9d01      	ldr	r5, [sp, #4]
 80069f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80069f8:	4682      	mov	sl, r0
 80069fa:	468b      	mov	fp, r1
 80069fc:	4649      	mov	r1, r9
 80069fe:	4640      	mov	r0, r8
 8006a00:	f7fa f8aa 	bl	8000b58 <__aeabi_d2iz>
 8006a04:	4606      	mov	r6, r0
 8006a06:	f7f9 fd8d 	bl	8000524 <__aeabi_i2d>
 8006a0a:	3630      	adds	r6, #48	; 0x30
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4640      	mov	r0, r8
 8006a12:	4649      	mov	r1, r9
 8006a14:	f7f9 fc38 	bl	8000288 <__aeabi_dsub>
 8006a18:	f805 6b01 	strb.w	r6, [r5], #1
 8006a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a1e:	429d      	cmp	r5, r3
 8006a20:	4680      	mov	r8, r0
 8006a22:	4689      	mov	r9, r1
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	d124      	bne.n	8006a74 <_dtoa_r+0x60c>
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <_dtoa_r+0x630>)
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	4659      	mov	r1, fp
 8006a30:	f7f9 fc2c 	bl	800028c <__adddf3>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4640      	mov	r0, r8
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	f7fa f86c 	bl	8000b18 <__aeabi_dcmpgt>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d173      	bne.n	8006b2c <_dtoa_r+0x6c4>
 8006a44:	4652      	mov	r2, sl
 8006a46:	465b      	mov	r3, fp
 8006a48:	4913      	ldr	r1, [pc, #76]	; (8006a98 <_dtoa_r+0x630>)
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f7f9 fc1c 	bl	8000288 <__aeabi_dsub>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4640      	mov	r0, r8
 8006a56:	4649      	mov	r1, r9
 8006a58:	f7fa f840 	bl	8000adc <__aeabi_dcmplt>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	f43f af35 	beq.w	80068cc <_dtoa_r+0x464>
 8006a62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a64:	1e6b      	subs	r3, r5, #1
 8006a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a6c:	2b30      	cmp	r3, #48	; 0x30
 8006a6e:	d0f8      	beq.n	8006a62 <_dtoa_r+0x5fa>
 8006a70:	9700      	str	r7, [sp, #0]
 8006a72:	e049      	b.n	8006b08 <_dtoa_r+0x6a0>
 8006a74:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <_dtoa_r+0x624>)
 8006a76:	f7f9 fdbf 	bl	80005f8 <__aeabi_dmul>
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4689      	mov	r9, r1
 8006a7e:	e7bd      	b.n	80069fc <_dtoa_r+0x594>
 8006a80:	08012638 	.word	0x08012638
 8006a84:	08012610 	.word	0x08012610
 8006a88:	3ff00000 	.word	0x3ff00000
 8006a8c:	40240000 	.word	0x40240000
 8006a90:	401c0000 	.word	0x401c0000
 8006a94:	40140000 	.word	0x40140000
 8006a98:	3fe00000 	.word	0x3fe00000
 8006a9c:	9d01      	ldr	r5, [sp, #4]
 8006a9e:	4656      	mov	r6, sl
 8006aa0:	465f      	mov	r7, fp
 8006aa2:	4642      	mov	r2, r8
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7f9 fecf 	bl	800084c <__aeabi_ddiv>
 8006aae:	f7fa f853 	bl	8000b58 <__aeabi_d2iz>
 8006ab2:	4682      	mov	sl, r0
 8006ab4:	f7f9 fd36 	bl	8000524 <__aeabi_i2d>
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	f7f9 fd9c 	bl	80005f8 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006acc:	f7f9 fbdc 	bl	8000288 <__aeabi_dsub>
 8006ad0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ad4:	9e01      	ldr	r6, [sp, #4]
 8006ad6:	9f03      	ldr	r7, [sp, #12]
 8006ad8:	1bae      	subs	r6, r5, r6
 8006ada:	42b7      	cmp	r7, r6
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	d135      	bne.n	8006b4e <_dtoa_r+0x6e6>
 8006ae2:	f7f9 fbd3 	bl	800028c <__adddf3>
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	464b      	mov	r3, r9
 8006aea:	4606      	mov	r6, r0
 8006aec:	460f      	mov	r7, r1
 8006aee:	f7fa f813 	bl	8000b18 <__aeabi_dcmpgt>
 8006af2:	b9d0      	cbnz	r0, 8006b2a <_dtoa_r+0x6c2>
 8006af4:	4642      	mov	r2, r8
 8006af6:	464b      	mov	r3, r9
 8006af8:	4630      	mov	r0, r6
 8006afa:	4639      	mov	r1, r7
 8006afc:	f7f9 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b00:	b110      	cbz	r0, 8006b08 <_dtoa_r+0x6a0>
 8006b02:	f01a 0f01 	tst.w	sl, #1
 8006b06:	d110      	bne.n	8006b2a <_dtoa_r+0x6c2>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	ee18 1a10 	vmov	r1, s16
 8006b0e:	f000 fd09 	bl	8007524 <_Bfree>
 8006b12:	2300      	movs	r3, #0
 8006b14:	9800      	ldr	r0, [sp, #0]
 8006b16:	702b      	strb	r3, [r5, #0]
 8006b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	6018      	str	r0, [r3, #0]
 8006b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f43f acf1 	beq.w	8006508 <_dtoa_r+0xa0>
 8006b26:	601d      	str	r5, [r3, #0]
 8006b28:	e4ee      	b.n	8006508 <_dtoa_r+0xa0>
 8006b2a:	9f00      	ldr	r7, [sp, #0]
 8006b2c:	462b      	mov	r3, r5
 8006b2e:	461d      	mov	r5, r3
 8006b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b34:	2a39      	cmp	r2, #57	; 0x39
 8006b36:	d106      	bne.n	8006b46 <_dtoa_r+0x6de>
 8006b38:	9a01      	ldr	r2, [sp, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d1f7      	bne.n	8006b2e <_dtoa_r+0x6c6>
 8006b3e:	9901      	ldr	r1, [sp, #4]
 8006b40:	2230      	movs	r2, #48	; 0x30
 8006b42:	3701      	adds	r7, #1
 8006b44:	700a      	strb	r2, [r1, #0]
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	3201      	adds	r2, #1
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	e790      	b.n	8006a70 <_dtoa_r+0x608>
 8006b4e:	4ba6      	ldr	r3, [pc, #664]	; (8006de8 <_dtoa_r+0x980>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	f7f9 fd51 	bl	80005f8 <__aeabi_dmul>
 8006b56:	2200      	movs	r2, #0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	460f      	mov	r7, r1
 8006b5e:	f7f9 ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d09d      	beq.n	8006aa2 <_dtoa_r+0x63a>
 8006b66:	e7cf      	b.n	8006b08 <_dtoa_r+0x6a0>
 8006b68:	9a08      	ldr	r2, [sp, #32]
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	f000 80d7 	beq.w	8006d1e <_dtoa_r+0x8b6>
 8006b70:	9a06      	ldr	r2, [sp, #24]
 8006b72:	2a01      	cmp	r2, #1
 8006b74:	f300 80ba 	bgt.w	8006cec <_dtoa_r+0x884>
 8006b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	f000 80b2 	beq.w	8006ce4 <_dtoa_r+0x87c>
 8006b80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b84:	9e07      	ldr	r6, [sp, #28]
 8006b86:	9d04      	ldr	r5, [sp, #16]
 8006b88:	9a04      	ldr	r2, [sp, #16]
 8006b8a:	441a      	add	r2, r3
 8006b8c:	9204      	str	r2, [sp, #16]
 8006b8e:	9a05      	ldr	r2, [sp, #20]
 8006b90:	2101      	movs	r1, #1
 8006b92:	441a      	add	r2, r3
 8006b94:	4620      	mov	r0, r4
 8006b96:	9205      	str	r2, [sp, #20]
 8006b98:	f000 fd7c 	bl	8007694 <__i2b>
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	dd0c      	ble.n	8006bbc <_dtoa_r+0x754>
 8006ba2:	9b05      	ldr	r3, [sp, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dd09      	ble.n	8006bbc <_dtoa_r+0x754>
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	9a04      	ldr	r2, [sp, #16]
 8006bac:	bfa8      	it	ge
 8006bae:	462b      	movge	r3, r5
 8006bb0:	1ad2      	subs	r2, r2, r3
 8006bb2:	9204      	str	r2, [sp, #16]
 8006bb4:	9a05      	ldr	r2, [sp, #20]
 8006bb6:	1aed      	subs	r5, r5, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	9305      	str	r3, [sp, #20]
 8006bbc:	9b07      	ldr	r3, [sp, #28]
 8006bbe:	b31b      	cbz	r3, 8006c08 <_dtoa_r+0x7a0>
 8006bc0:	9b08      	ldr	r3, [sp, #32]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 80af 	beq.w	8006d26 <_dtoa_r+0x8be>
 8006bc8:	2e00      	cmp	r6, #0
 8006bca:	dd13      	ble.n	8006bf4 <_dtoa_r+0x78c>
 8006bcc:	4639      	mov	r1, r7
 8006bce:	4632      	mov	r2, r6
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fe1f 	bl	8007814 <__pow5mult>
 8006bd6:	ee18 2a10 	vmov	r2, s16
 8006bda:	4601      	mov	r1, r0
 8006bdc:	4607      	mov	r7, r0
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 fd6e 	bl	80076c0 <__multiply>
 8006be4:	ee18 1a10 	vmov	r1, s16
 8006be8:	4680      	mov	r8, r0
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 fc9a 	bl	8007524 <_Bfree>
 8006bf0:	ee08 8a10 	vmov	s16, r8
 8006bf4:	9b07      	ldr	r3, [sp, #28]
 8006bf6:	1b9a      	subs	r2, r3, r6
 8006bf8:	d006      	beq.n	8006c08 <_dtoa_r+0x7a0>
 8006bfa:	ee18 1a10 	vmov	r1, s16
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 fe08 	bl	8007814 <__pow5mult>
 8006c04:	ee08 0a10 	vmov	s16, r0
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 fd42 	bl	8007694 <__i2b>
 8006c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	4606      	mov	r6, r0
 8006c16:	f340 8088 	ble.w	8006d2a <_dtoa_r+0x8c2>
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 fdf8 	bl	8007814 <__pow5mult>
 8006c24:	9b06      	ldr	r3, [sp, #24]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	4606      	mov	r6, r0
 8006c2a:	f340 8081 	ble.w	8006d30 <_dtoa_r+0x8c8>
 8006c2e:	f04f 0800 	mov.w	r8, #0
 8006c32:	6933      	ldr	r3, [r6, #16]
 8006c34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c38:	6918      	ldr	r0, [r3, #16]
 8006c3a:	f000 fcdb 	bl	80075f4 <__hi0bits>
 8006c3e:	f1c0 0020 	rsb	r0, r0, #32
 8006c42:	9b05      	ldr	r3, [sp, #20]
 8006c44:	4418      	add	r0, r3
 8006c46:	f010 001f 	ands.w	r0, r0, #31
 8006c4a:	f000 8092 	beq.w	8006d72 <_dtoa_r+0x90a>
 8006c4e:	f1c0 0320 	rsb	r3, r0, #32
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	f340 808a 	ble.w	8006d6c <_dtoa_r+0x904>
 8006c58:	f1c0 001c 	rsb	r0, r0, #28
 8006c5c:	9b04      	ldr	r3, [sp, #16]
 8006c5e:	4403      	add	r3, r0
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	9b05      	ldr	r3, [sp, #20]
 8006c64:	4403      	add	r3, r0
 8006c66:	4405      	add	r5, r0
 8006c68:	9305      	str	r3, [sp, #20]
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd07      	ble.n	8006c80 <_dtoa_r+0x818>
 8006c70:	ee18 1a10 	vmov	r1, s16
 8006c74:	461a      	mov	r2, r3
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 fe26 	bl	80078c8 <__lshift>
 8006c7c:	ee08 0a10 	vmov	s16, r0
 8006c80:	9b05      	ldr	r3, [sp, #20]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dd05      	ble.n	8006c92 <_dtoa_r+0x82a>
 8006c86:	4631      	mov	r1, r6
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fe1c 	bl	80078c8 <__lshift>
 8006c90:	4606      	mov	r6, r0
 8006c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d06e      	beq.n	8006d76 <_dtoa_r+0x90e>
 8006c98:	ee18 0a10 	vmov	r0, s16
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	f000 fe83 	bl	80079a8 <__mcmp>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	da67      	bge.n	8006d76 <_dtoa_r+0x90e>
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	ee18 1a10 	vmov	r1, s16
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 fc57 	bl	8007568 <__multadd>
 8006cba:	9b08      	ldr	r3, [sp, #32]
 8006cbc:	ee08 0a10 	vmov	s16, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 81b1 	beq.w	8007028 <_dtoa_r+0xbc0>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4639      	mov	r1, r7
 8006cca:	220a      	movs	r2, #10
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fc4b 	bl	8007568 <__multadd>
 8006cd2:	9b02      	ldr	r3, [sp, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	f300 808e 	bgt.w	8006df8 <_dtoa_r+0x990>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	dc51      	bgt.n	8006d86 <_dtoa_r+0x91e>
 8006ce2:	e089      	b.n	8006df8 <_dtoa_r+0x990>
 8006ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cea:	e74b      	b.n	8006b84 <_dtoa_r+0x71c>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	1e5e      	subs	r6, r3, #1
 8006cf0:	9b07      	ldr	r3, [sp, #28]
 8006cf2:	42b3      	cmp	r3, r6
 8006cf4:	bfbf      	itttt	lt
 8006cf6:	9b07      	ldrlt	r3, [sp, #28]
 8006cf8:	9607      	strlt	r6, [sp, #28]
 8006cfa:	1af2      	sublt	r2, r6, r3
 8006cfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cfe:	bfb6      	itet	lt
 8006d00:	189b      	addlt	r3, r3, r2
 8006d02:	1b9e      	subge	r6, r3, r6
 8006d04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	bfb8      	it	lt
 8006d0a:	2600      	movlt	r6, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bfb7      	itett	lt
 8006d10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d18:	1a9d      	sublt	r5, r3, r2
 8006d1a:	2300      	movlt	r3, #0
 8006d1c:	e734      	b.n	8006b88 <_dtoa_r+0x720>
 8006d1e:	9e07      	ldr	r6, [sp, #28]
 8006d20:	9d04      	ldr	r5, [sp, #16]
 8006d22:	9f08      	ldr	r7, [sp, #32]
 8006d24:	e73b      	b.n	8006b9e <_dtoa_r+0x736>
 8006d26:	9a07      	ldr	r2, [sp, #28]
 8006d28:	e767      	b.n	8006bfa <_dtoa_r+0x792>
 8006d2a:	9b06      	ldr	r3, [sp, #24]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	dc18      	bgt.n	8006d62 <_dtoa_r+0x8fa>
 8006d30:	f1ba 0f00 	cmp.w	sl, #0
 8006d34:	d115      	bne.n	8006d62 <_dtoa_r+0x8fa>
 8006d36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d3a:	b993      	cbnz	r3, 8006d62 <_dtoa_r+0x8fa>
 8006d3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d40:	0d1b      	lsrs	r3, r3, #20
 8006d42:	051b      	lsls	r3, r3, #20
 8006d44:	b183      	cbz	r3, 8006d68 <_dtoa_r+0x900>
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	9b05      	ldr	r3, [sp, #20]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	9305      	str	r3, [sp, #20]
 8006d52:	f04f 0801 	mov.w	r8, #1
 8006d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f47f af6a 	bne.w	8006c32 <_dtoa_r+0x7ca>
 8006d5e:	2001      	movs	r0, #1
 8006d60:	e76f      	b.n	8006c42 <_dtoa_r+0x7da>
 8006d62:	f04f 0800 	mov.w	r8, #0
 8006d66:	e7f6      	b.n	8006d56 <_dtoa_r+0x8ee>
 8006d68:	4698      	mov	r8, r3
 8006d6a:	e7f4      	b.n	8006d56 <_dtoa_r+0x8ee>
 8006d6c:	f43f af7d 	beq.w	8006c6a <_dtoa_r+0x802>
 8006d70:	4618      	mov	r0, r3
 8006d72:	301c      	adds	r0, #28
 8006d74:	e772      	b.n	8006c5c <_dtoa_r+0x7f4>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dc37      	bgt.n	8006dec <_dtoa_r+0x984>
 8006d7c:	9b06      	ldr	r3, [sp, #24]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	dd34      	ble.n	8006dec <_dtoa_r+0x984>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	9302      	str	r3, [sp, #8]
 8006d86:	9b02      	ldr	r3, [sp, #8]
 8006d88:	b96b      	cbnz	r3, 8006da6 <_dtoa_r+0x93e>
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 fbea 	bl	8007568 <__multadd>
 8006d94:	4601      	mov	r1, r0
 8006d96:	4606      	mov	r6, r0
 8006d98:	ee18 0a10 	vmov	r0, s16
 8006d9c:	f000 fe04 	bl	80079a8 <__mcmp>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f73f adbb 	bgt.w	800691c <_dtoa_r+0x4b4>
 8006da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da8:	9d01      	ldr	r5, [sp, #4]
 8006daa:	43db      	mvns	r3, r3
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	4631      	mov	r1, r6
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fbb5 	bl	8007524 <_Bfree>
 8006dba:	2f00      	cmp	r7, #0
 8006dbc:	f43f aea4 	beq.w	8006b08 <_dtoa_r+0x6a0>
 8006dc0:	f1b8 0f00 	cmp.w	r8, #0
 8006dc4:	d005      	beq.n	8006dd2 <_dtoa_r+0x96a>
 8006dc6:	45b8      	cmp	r8, r7
 8006dc8:	d003      	beq.n	8006dd2 <_dtoa_r+0x96a>
 8006dca:	4641      	mov	r1, r8
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 fba9 	bl	8007524 <_Bfree>
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fba5 	bl	8007524 <_Bfree>
 8006dda:	e695      	b.n	8006b08 <_dtoa_r+0x6a0>
 8006ddc:	2600      	movs	r6, #0
 8006dde:	4637      	mov	r7, r6
 8006de0:	e7e1      	b.n	8006da6 <_dtoa_r+0x93e>
 8006de2:	9700      	str	r7, [sp, #0]
 8006de4:	4637      	mov	r7, r6
 8006de6:	e599      	b.n	800691c <_dtoa_r+0x4b4>
 8006de8:	40240000 	.word	0x40240000
 8006dec:	9b08      	ldr	r3, [sp, #32]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 80ca 	beq.w	8006f88 <_dtoa_r+0xb20>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	9302      	str	r3, [sp, #8]
 8006df8:	2d00      	cmp	r5, #0
 8006dfa:	dd05      	ble.n	8006e08 <_dtoa_r+0x9a0>
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	462a      	mov	r2, r5
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 fd61 	bl	80078c8 <__lshift>
 8006e06:	4607      	mov	r7, r0
 8006e08:	f1b8 0f00 	cmp.w	r8, #0
 8006e0c:	d05b      	beq.n	8006ec6 <_dtoa_r+0xa5e>
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fb47 	bl	80074a4 <_Balloc>
 8006e16:	4605      	mov	r5, r0
 8006e18:	b928      	cbnz	r0, 8006e26 <_dtoa_r+0x9be>
 8006e1a:	4b87      	ldr	r3, [pc, #540]	; (8007038 <_dtoa_r+0xbd0>)
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e22:	f7ff bb3b 	b.w	800649c <_dtoa_r+0x34>
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	3202      	adds	r2, #2
 8006e2a:	0092      	lsls	r2, r2, #2
 8006e2c:	f107 010c 	add.w	r1, r7, #12
 8006e30:	300c      	adds	r0, #12
 8006e32:	f7fe fbc7 	bl	80055c4 <memcpy>
 8006e36:	2201      	movs	r2, #1
 8006e38:	4629      	mov	r1, r5
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 fd44 	bl	80078c8 <__lshift>
 8006e40:	9b01      	ldr	r3, [sp, #4]
 8006e42:	f103 0901 	add.w	r9, r3, #1
 8006e46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	f00a 0301 	and.w	r3, sl, #1
 8006e52:	46b8      	mov	r8, r7
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	4607      	mov	r7, r0
 8006e58:	4631      	mov	r1, r6
 8006e5a:	ee18 0a10 	vmov	r0, s16
 8006e5e:	f7ff fa77 	bl	8006350 <quorem>
 8006e62:	4641      	mov	r1, r8
 8006e64:	9002      	str	r0, [sp, #8]
 8006e66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e6a:	ee18 0a10 	vmov	r0, s16
 8006e6e:	f000 fd9b 	bl	80079a8 <__mcmp>
 8006e72:	463a      	mov	r2, r7
 8006e74:	9003      	str	r0, [sp, #12]
 8006e76:	4631      	mov	r1, r6
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fdb1 	bl	80079e0 <__mdiff>
 8006e7e:	68c2      	ldr	r2, [r0, #12]
 8006e80:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e84:	4605      	mov	r5, r0
 8006e86:	bb02      	cbnz	r2, 8006eca <_dtoa_r+0xa62>
 8006e88:	4601      	mov	r1, r0
 8006e8a:	ee18 0a10 	vmov	r0, s16
 8006e8e:	f000 fd8b 	bl	80079a8 <__mcmp>
 8006e92:	4602      	mov	r2, r0
 8006e94:	4629      	mov	r1, r5
 8006e96:	4620      	mov	r0, r4
 8006e98:	9207      	str	r2, [sp, #28]
 8006e9a:	f000 fb43 	bl	8007524 <_Bfree>
 8006e9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ea2:	ea43 0102 	orr.w	r1, r3, r2
 8006ea6:	9b04      	ldr	r3, [sp, #16]
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	464d      	mov	r5, r9
 8006eac:	d10f      	bne.n	8006ece <_dtoa_r+0xa66>
 8006eae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006eb2:	d02a      	beq.n	8006f0a <_dtoa_r+0xaa2>
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dd02      	ble.n	8006ec0 <_dtoa_r+0xa58>
 8006eba:	9b02      	ldr	r3, [sp, #8]
 8006ebc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ec0:	f88b a000 	strb.w	sl, [fp]
 8006ec4:	e775      	b.n	8006db2 <_dtoa_r+0x94a>
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	e7ba      	b.n	8006e40 <_dtoa_r+0x9d8>
 8006eca:	2201      	movs	r2, #1
 8006ecc:	e7e2      	b.n	8006e94 <_dtoa_r+0xa2c>
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	db04      	blt.n	8006ede <_dtoa_r+0xa76>
 8006ed4:	9906      	ldr	r1, [sp, #24]
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	9904      	ldr	r1, [sp, #16]
 8006eda:	430b      	orrs	r3, r1
 8006edc:	d122      	bne.n	8006f24 <_dtoa_r+0xabc>
 8006ede:	2a00      	cmp	r2, #0
 8006ee0:	ddee      	ble.n	8006ec0 <_dtoa_r+0xa58>
 8006ee2:	ee18 1a10 	vmov	r1, s16
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 fced 	bl	80078c8 <__lshift>
 8006eee:	4631      	mov	r1, r6
 8006ef0:	ee08 0a10 	vmov	s16, r0
 8006ef4:	f000 fd58 	bl	80079a8 <__mcmp>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	dc03      	bgt.n	8006f04 <_dtoa_r+0xa9c>
 8006efc:	d1e0      	bne.n	8006ec0 <_dtoa_r+0xa58>
 8006efe:	f01a 0f01 	tst.w	sl, #1
 8006f02:	d0dd      	beq.n	8006ec0 <_dtoa_r+0xa58>
 8006f04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f08:	d1d7      	bne.n	8006eba <_dtoa_r+0xa52>
 8006f0a:	2339      	movs	r3, #57	; 0x39
 8006f0c:	f88b 3000 	strb.w	r3, [fp]
 8006f10:	462b      	mov	r3, r5
 8006f12:	461d      	mov	r5, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f1a:	2a39      	cmp	r2, #57	; 0x39
 8006f1c:	d071      	beq.n	8007002 <_dtoa_r+0xb9a>
 8006f1e:	3201      	adds	r2, #1
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	e746      	b.n	8006db2 <_dtoa_r+0x94a>
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	dd07      	ble.n	8006f38 <_dtoa_r+0xad0>
 8006f28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f2c:	d0ed      	beq.n	8006f0a <_dtoa_r+0xaa2>
 8006f2e:	f10a 0301 	add.w	r3, sl, #1
 8006f32:	f88b 3000 	strb.w	r3, [fp]
 8006f36:	e73c      	b.n	8006db2 <_dtoa_r+0x94a>
 8006f38:	9b05      	ldr	r3, [sp, #20]
 8006f3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f3e:	4599      	cmp	r9, r3
 8006f40:	d047      	beq.n	8006fd2 <_dtoa_r+0xb6a>
 8006f42:	ee18 1a10 	vmov	r1, s16
 8006f46:	2300      	movs	r3, #0
 8006f48:	220a      	movs	r2, #10
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 fb0c 	bl	8007568 <__multadd>
 8006f50:	45b8      	cmp	r8, r7
 8006f52:	ee08 0a10 	vmov	s16, r0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	f04f 020a 	mov.w	r2, #10
 8006f5e:	4641      	mov	r1, r8
 8006f60:	4620      	mov	r0, r4
 8006f62:	d106      	bne.n	8006f72 <_dtoa_r+0xb0a>
 8006f64:	f000 fb00 	bl	8007568 <__multadd>
 8006f68:	4680      	mov	r8, r0
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	f109 0901 	add.w	r9, r9, #1
 8006f70:	e772      	b.n	8006e58 <_dtoa_r+0x9f0>
 8006f72:	f000 faf9 	bl	8007568 <__multadd>
 8006f76:	4639      	mov	r1, r7
 8006f78:	4680      	mov	r8, r0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 faf2 	bl	8007568 <__multadd>
 8006f84:	4607      	mov	r7, r0
 8006f86:	e7f1      	b.n	8006f6c <_dtoa_r+0xb04>
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	9302      	str	r3, [sp, #8]
 8006f8c:	9d01      	ldr	r5, [sp, #4]
 8006f8e:	ee18 0a10 	vmov	r0, s16
 8006f92:	4631      	mov	r1, r6
 8006f94:	f7ff f9dc 	bl	8006350 <quorem>
 8006f98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f9c:	9b01      	ldr	r3, [sp, #4]
 8006f9e:	f805 ab01 	strb.w	sl, [r5], #1
 8006fa2:	1aea      	subs	r2, r5, r3
 8006fa4:	9b02      	ldr	r3, [sp, #8]
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	dd09      	ble.n	8006fbe <_dtoa_r+0xb56>
 8006faa:	ee18 1a10 	vmov	r1, s16
 8006fae:	2300      	movs	r3, #0
 8006fb0:	220a      	movs	r2, #10
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fad8 	bl	8007568 <__multadd>
 8006fb8:	ee08 0a10 	vmov	s16, r0
 8006fbc:	e7e7      	b.n	8006f8e <_dtoa_r+0xb26>
 8006fbe:	9b02      	ldr	r3, [sp, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bfc8      	it	gt
 8006fc4:	461d      	movgt	r5, r3
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	bfd8      	it	le
 8006fca:	2501      	movle	r5, #1
 8006fcc:	441d      	add	r5, r3
 8006fce:	f04f 0800 	mov.w	r8, #0
 8006fd2:	ee18 1a10 	vmov	r1, s16
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fc75 	bl	80078c8 <__lshift>
 8006fde:	4631      	mov	r1, r6
 8006fe0:	ee08 0a10 	vmov	s16, r0
 8006fe4:	f000 fce0 	bl	80079a8 <__mcmp>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dc91      	bgt.n	8006f10 <_dtoa_r+0xaa8>
 8006fec:	d102      	bne.n	8006ff4 <_dtoa_r+0xb8c>
 8006fee:	f01a 0f01 	tst.w	sl, #1
 8006ff2:	d18d      	bne.n	8006f10 <_dtoa_r+0xaa8>
 8006ff4:	462b      	mov	r3, r5
 8006ff6:	461d      	mov	r5, r3
 8006ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffc:	2a30      	cmp	r2, #48	; 0x30
 8006ffe:	d0fa      	beq.n	8006ff6 <_dtoa_r+0xb8e>
 8007000:	e6d7      	b.n	8006db2 <_dtoa_r+0x94a>
 8007002:	9a01      	ldr	r2, [sp, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	d184      	bne.n	8006f12 <_dtoa_r+0xaaa>
 8007008:	9b00      	ldr	r3, [sp, #0]
 800700a:	3301      	adds	r3, #1
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	2331      	movs	r3, #49	; 0x31
 8007010:	7013      	strb	r3, [r2, #0]
 8007012:	e6ce      	b.n	8006db2 <_dtoa_r+0x94a>
 8007014:	4b09      	ldr	r3, [pc, #36]	; (800703c <_dtoa_r+0xbd4>)
 8007016:	f7ff ba95 	b.w	8006544 <_dtoa_r+0xdc>
 800701a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800701c:	2b00      	cmp	r3, #0
 800701e:	f47f aa6e 	bne.w	80064fe <_dtoa_r+0x96>
 8007022:	4b07      	ldr	r3, [pc, #28]	; (8007040 <_dtoa_r+0xbd8>)
 8007024:	f7ff ba8e 	b.w	8006544 <_dtoa_r+0xdc>
 8007028:	9b02      	ldr	r3, [sp, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dcae      	bgt.n	8006f8c <_dtoa_r+0xb24>
 800702e:	9b06      	ldr	r3, [sp, #24]
 8007030:	2b02      	cmp	r3, #2
 8007032:	f73f aea8 	bgt.w	8006d86 <_dtoa_r+0x91e>
 8007036:	e7a9      	b.n	8006f8c <_dtoa_r+0xb24>
 8007038:	0801253f 	.word	0x0801253f
 800703c:	0801249c 	.word	0x0801249c
 8007040:	080124c0 	.word	0x080124c0

08007044 <__sflush_r>:
 8007044:	898a      	ldrh	r2, [r1, #12]
 8007046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704a:	4605      	mov	r5, r0
 800704c:	0710      	lsls	r0, r2, #28
 800704e:	460c      	mov	r4, r1
 8007050:	d458      	bmi.n	8007104 <__sflush_r+0xc0>
 8007052:	684b      	ldr	r3, [r1, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	dc05      	bgt.n	8007064 <__sflush_r+0x20>
 8007058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	dc02      	bgt.n	8007064 <__sflush_r+0x20>
 800705e:	2000      	movs	r0, #0
 8007060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007066:	2e00      	cmp	r6, #0
 8007068:	d0f9      	beq.n	800705e <__sflush_r+0x1a>
 800706a:	2300      	movs	r3, #0
 800706c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007070:	682f      	ldr	r7, [r5, #0]
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	d032      	beq.n	80070dc <__sflush_r+0x98>
 8007076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	075a      	lsls	r2, r3, #29
 800707c:	d505      	bpl.n	800708a <__sflush_r+0x46>
 800707e:	6863      	ldr	r3, [r4, #4]
 8007080:	1ac0      	subs	r0, r0, r3
 8007082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007084:	b10b      	cbz	r3, 800708a <__sflush_r+0x46>
 8007086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007088:	1ac0      	subs	r0, r0, r3
 800708a:	2300      	movs	r3, #0
 800708c:	4602      	mov	r2, r0
 800708e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007090:	6a21      	ldr	r1, [r4, #32]
 8007092:	4628      	mov	r0, r5
 8007094:	47b0      	blx	r6
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	d106      	bne.n	80070aa <__sflush_r+0x66>
 800709c:	6829      	ldr	r1, [r5, #0]
 800709e:	291d      	cmp	r1, #29
 80070a0:	d82c      	bhi.n	80070fc <__sflush_r+0xb8>
 80070a2:	4a2a      	ldr	r2, [pc, #168]	; (800714c <__sflush_r+0x108>)
 80070a4:	40ca      	lsrs	r2, r1
 80070a6:	07d6      	lsls	r6, r2, #31
 80070a8:	d528      	bpl.n	80070fc <__sflush_r+0xb8>
 80070aa:	2200      	movs	r2, #0
 80070ac:	6062      	str	r2, [r4, #4]
 80070ae:	04d9      	lsls	r1, r3, #19
 80070b0:	6922      	ldr	r2, [r4, #16]
 80070b2:	6022      	str	r2, [r4, #0]
 80070b4:	d504      	bpl.n	80070c0 <__sflush_r+0x7c>
 80070b6:	1c42      	adds	r2, r0, #1
 80070b8:	d101      	bne.n	80070be <__sflush_r+0x7a>
 80070ba:	682b      	ldr	r3, [r5, #0]
 80070bc:	b903      	cbnz	r3, 80070c0 <__sflush_r+0x7c>
 80070be:	6560      	str	r0, [r4, #84]	; 0x54
 80070c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070c2:	602f      	str	r7, [r5, #0]
 80070c4:	2900      	cmp	r1, #0
 80070c6:	d0ca      	beq.n	800705e <__sflush_r+0x1a>
 80070c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070cc:	4299      	cmp	r1, r3
 80070ce:	d002      	beq.n	80070d6 <__sflush_r+0x92>
 80070d0:	4628      	mov	r0, r5
 80070d2:	f7fe fa8d 	bl	80055f0 <_free_r>
 80070d6:	2000      	movs	r0, #0
 80070d8:	6360      	str	r0, [r4, #52]	; 0x34
 80070da:	e7c1      	b.n	8007060 <__sflush_r+0x1c>
 80070dc:	6a21      	ldr	r1, [r4, #32]
 80070de:	2301      	movs	r3, #1
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b0      	blx	r6
 80070e4:	1c41      	adds	r1, r0, #1
 80070e6:	d1c7      	bne.n	8007078 <__sflush_r+0x34>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0c4      	beq.n	8007078 <__sflush_r+0x34>
 80070ee:	2b1d      	cmp	r3, #29
 80070f0:	d001      	beq.n	80070f6 <__sflush_r+0xb2>
 80070f2:	2b16      	cmp	r3, #22
 80070f4:	d101      	bne.n	80070fa <__sflush_r+0xb6>
 80070f6:	602f      	str	r7, [r5, #0]
 80070f8:	e7b1      	b.n	800705e <__sflush_r+0x1a>
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	e7ad      	b.n	8007060 <__sflush_r+0x1c>
 8007104:	690f      	ldr	r7, [r1, #16]
 8007106:	2f00      	cmp	r7, #0
 8007108:	d0a9      	beq.n	800705e <__sflush_r+0x1a>
 800710a:	0793      	lsls	r3, r2, #30
 800710c:	680e      	ldr	r6, [r1, #0]
 800710e:	bf08      	it	eq
 8007110:	694b      	ldreq	r3, [r1, #20]
 8007112:	600f      	str	r7, [r1, #0]
 8007114:	bf18      	it	ne
 8007116:	2300      	movne	r3, #0
 8007118:	eba6 0807 	sub.w	r8, r6, r7
 800711c:	608b      	str	r3, [r1, #8]
 800711e:	f1b8 0f00 	cmp.w	r8, #0
 8007122:	dd9c      	ble.n	800705e <__sflush_r+0x1a>
 8007124:	6a21      	ldr	r1, [r4, #32]
 8007126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007128:	4643      	mov	r3, r8
 800712a:	463a      	mov	r2, r7
 800712c:	4628      	mov	r0, r5
 800712e:	47b0      	blx	r6
 8007130:	2800      	cmp	r0, #0
 8007132:	dc06      	bgt.n	8007142 <__sflush_r+0xfe>
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	e78e      	b.n	8007060 <__sflush_r+0x1c>
 8007142:	4407      	add	r7, r0
 8007144:	eba8 0800 	sub.w	r8, r8, r0
 8007148:	e7e9      	b.n	800711e <__sflush_r+0xda>
 800714a:	bf00      	nop
 800714c:	20400001 	.word	0x20400001

08007150 <_fflush_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	690b      	ldr	r3, [r1, #16]
 8007154:	4605      	mov	r5, r0
 8007156:	460c      	mov	r4, r1
 8007158:	b913      	cbnz	r3, 8007160 <_fflush_r+0x10>
 800715a:	2500      	movs	r5, #0
 800715c:	4628      	mov	r0, r5
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	b118      	cbz	r0, 800716a <_fflush_r+0x1a>
 8007162:	6983      	ldr	r3, [r0, #24]
 8007164:	b90b      	cbnz	r3, 800716a <_fflush_r+0x1a>
 8007166:	f000 f887 	bl	8007278 <__sinit>
 800716a:	4b14      	ldr	r3, [pc, #80]	; (80071bc <_fflush_r+0x6c>)
 800716c:	429c      	cmp	r4, r3
 800716e:	d11b      	bne.n	80071a8 <_fflush_r+0x58>
 8007170:	686c      	ldr	r4, [r5, #4]
 8007172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0ef      	beq.n	800715a <_fflush_r+0xa>
 800717a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800717c:	07d0      	lsls	r0, r2, #31
 800717e:	d404      	bmi.n	800718a <_fflush_r+0x3a>
 8007180:	0599      	lsls	r1, r3, #22
 8007182:	d402      	bmi.n	800718a <_fflush_r+0x3a>
 8007184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007186:	f000 f91a 	bl	80073be <__retarget_lock_acquire_recursive>
 800718a:	4628      	mov	r0, r5
 800718c:	4621      	mov	r1, r4
 800718e:	f7ff ff59 	bl	8007044 <__sflush_r>
 8007192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007194:	07da      	lsls	r2, r3, #31
 8007196:	4605      	mov	r5, r0
 8007198:	d4e0      	bmi.n	800715c <_fflush_r+0xc>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	059b      	lsls	r3, r3, #22
 800719e:	d4dd      	bmi.n	800715c <_fflush_r+0xc>
 80071a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a2:	f000 f90d 	bl	80073c0 <__retarget_lock_release_recursive>
 80071a6:	e7d9      	b.n	800715c <_fflush_r+0xc>
 80071a8:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <_fflush_r+0x70>)
 80071aa:	429c      	cmp	r4, r3
 80071ac:	d101      	bne.n	80071b2 <_fflush_r+0x62>
 80071ae:	68ac      	ldr	r4, [r5, #8]
 80071b0:	e7df      	b.n	8007172 <_fflush_r+0x22>
 80071b2:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <_fflush_r+0x74>)
 80071b4:	429c      	cmp	r4, r3
 80071b6:	bf08      	it	eq
 80071b8:	68ec      	ldreq	r4, [r5, #12]
 80071ba:	e7da      	b.n	8007172 <_fflush_r+0x22>
 80071bc:	08012570 	.word	0x08012570
 80071c0:	08012590 	.word	0x08012590
 80071c4:	08012550 	.word	0x08012550

080071c8 <std>:
 80071c8:	2300      	movs	r3, #0
 80071ca:	b510      	push	{r4, lr}
 80071cc:	4604      	mov	r4, r0
 80071ce:	e9c0 3300 	strd	r3, r3, [r0]
 80071d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071d6:	6083      	str	r3, [r0, #8]
 80071d8:	8181      	strh	r1, [r0, #12]
 80071da:	6643      	str	r3, [r0, #100]	; 0x64
 80071dc:	81c2      	strh	r2, [r0, #14]
 80071de:	6183      	str	r3, [r0, #24]
 80071e0:	4619      	mov	r1, r3
 80071e2:	2208      	movs	r2, #8
 80071e4:	305c      	adds	r0, #92	; 0x5c
 80071e6:	f7fe f9fb 	bl	80055e0 <memset>
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <std+0x38>)
 80071ec:	6263      	str	r3, [r4, #36]	; 0x24
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <std+0x3c>)
 80071f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071f2:	4b05      	ldr	r3, [pc, #20]	; (8007208 <std+0x40>)
 80071f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071f6:	4b05      	ldr	r3, [pc, #20]	; (800720c <std+0x44>)
 80071f8:	6224      	str	r4, [r4, #32]
 80071fa:	6323      	str	r3, [r4, #48]	; 0x30
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	bf00      	nop
 8007200:	08007e8d 	.word	0x08007e8d
 8007204:	08007eaf 	.word	0x08007eaf
 8007208:	08007ee7 	.word	0x08007ee7
 800720c:	08007f0b 	.word	0x08007f0b

08007210 <_cleanup_r>:
 8007210:	4901      	ldr	r1, [pc, #4]	; (8007218 <_cleanup_r+0x8>)
 8007212:	f000 b8af 	b.w	8007374 <_fwalk_reent>
 8007216:	bf00      	nop
 8007218:	08007151 	.word	0x08007151

0800721c <__sfmoreglue>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	2268      	movs	r2, #104	; 0x68
 8007220:	1e4d      	subs	r5, r1, #1
 8007222:	4355      	muls	r5, r2
 8007224:	460e      	mov	r6, r1
 8007226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800722a:	f7fe fa4d 	bl	80056c8 <_malloc_r>
 800722e:	4604      	mov	r4, r0
 8007230:	b140      	cbz	r0, 8007244 <__sfmoreglue+0x28>
 8007232:	2100      	movs	r1, #0
 8007234:	e9c0 1600 	strd	r1, r6, [r0]
 8007238:	300c      	adds	r0, #12
 800723a:	60a0      	str	r0, [r4, #8]
 800723c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007240:	f7fe f9ce 	bl	80055e0 <memset>
 8007244:	4620      	mov	r0, r4
 8007246:	bd70      	pop	{r4, r5, r6, pc}

08007248 <__sfp_lock_acquire>:
 8007248:	4801      	ldr	r0, [pc, #4]	; (8007250 <__sfp_lock_acquire+0x8>)
 800724a:	f000 b8b8 	b.w	80073be <__retarget_lock_acquire_recursive>
 800724e:	bf00      	nop
 8007250:	20001515 	.word	0x20001515

08007254 <__sfp_lock_release>:
 8007254:	4801      	ldr	r0, [pc, #4]	; (800725c <__sfp_lock_release+0x8>)
 8007256:	f000 b8b3 	b.w	80073c0 <__retarget_lock_release_recursive>
 800725a:	bf00      	nop
 800725c:	20001515 	.word	0x20001515

08007260 <__sinit_lock_acquire>:
 8007260:	4801      	ldr	r0, [pc, #4]	; (8007268 <__sinit_lock_acquire+0x8>)
 8007262:	f000 b8ac 	b.w	80073be <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	20001516 	.word	0x20001516

0800726c <__sinit_lock_release>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__sinit_lock_release+0x8>)
 800726e:	f000 b8a7 	b.w	80073c0 <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	20001516 	.word	0x20001516

08007278 <__sinit>:
 8007278:	b510      	push	{r4, lr}
 800727a:	4604      	mov	r4, r0
 800727c:	f7ff fff0 	bl	8007260 <__sinit_lock_acquire>
 8007280:	69a3      	ldr	r3, [r4, #24]
 8007282:	b11b      	cbz	r3, 800728c <__sinit+0x14>
 8007284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007288:	f7ff bff0 	b.w	800726c <__sinit_lock_release>
 800728c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007290:	6523      	str	r3, [r4, #80]	; 0x50
 8007292:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <__sinit+0x68>)
 8007294:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <__sinit+0x6c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	62a2      	str	r2, [r4, #40]	; 0x28
 800729a:	42a3      	cmp	r3, r4
 800729c:	bf04      	itt	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	61a3      	streq	r3, [r4, #24]
 80072a2:	4620      	mov	r0, r4
 80072a4:	f000 f820 	bl	80072e8 <__sfp>
 80072a8:	6060      	str	r0, [r4, #4]
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 f81c 	bl	80072e8 <__sfp>
 80072b0:	60a0      	str	r0, [r4, #8]
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 f818 	bl	80072e8 <__sfp>
 80072b8:	2200      	movs	r2, #0
 80072ba:	60e0      	str	r0, [r4, #12]
 80072bc:	2104      	movs	r1, #4
 80072be:	6860      	ldr	r0, [r4, #4]
 80072c0:	f7ff ff82 	bl	80071c8 <std>
 80072c4:	68a0      	ldr	r0, [r4, #8]
 80072c6:	2201      	movs	r2, #1
 80072c8:	2109      	movs	r1, #9
 80072ca:	f7ff ff7d 	bl	80071c8 <std>
 80072ce:	68e0      	ldr	r0, [r4, #12]
 80072d0:	2202      	movs	r2, #2
 80072d2:	2112      	movs	r1, #18
 80072d4:	f7ff ff78 	bl	80071c8 <std>
 80072d8:	2301      	movs	r3, #1
 80072da:	61a3      	str	r3, [r4, #24]
 80072dc:	e7d2      	b.n	8007284 <__sinit+0xc>
 80072de:	bf00      	nop
 80072e0:	08012488 	.word	0x08012488
 80072e4:	08007211 	.word	0x08007211

080072e8 <__sfp>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	4607      	mov	r7, r0
 80072ec:	f7ff ffac 	bl	8007248 <__sfp_lock_acquire>
 80072f0:	4b1e      	ldr	r3, [pc, #120]	; (800736c <__sfp+0x84>)
 80072f2:	681e      	ldr	r6, [r3, #0]
 80072f4:	69b3      	ldr	r3, [r6, #24]
 80072f6:	b913      	cbnz	r3, 80072fe <__sfp+0x16>
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7ff ffbd 	bl	8007278 <__sinit>
 80072fe:	3648      	adds	r6, #72	; 0x48
 8007300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007304:	3b01      	subs	r3, #1
 8007306:	d503      	bpl.n	8007310 <__sfp+0x28>
 8007308:	6833      	ldr	r3, [r6, #0]
 800730a:	b30b      	cbz	r3, 8007350 <__sfp+0x68>
 800730c:	6836      	ldr	r6, [r6, #0]
 800730e:	e7f7      	b.n	8007300 <__sfp+0x18>
 8007310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007314:	b9d5      	cbnz	r5, 800734c <__sfp+0x64>
 8007316:	4b16      	ldr	r3, [pc, #88]	; (8007370 <__sfp+0x88>)
 8007318:	60e3      	str	r3, [r4, #12]
 800731a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800731e:	6665      	str	r5, [r4, #100]	; 0x64
 8007320:	f000 f84c 	bl	80073bc <__retarget_lock_init_recursive>
 8007324:	f7ff ff96 	bl	8007254 <__sfp_lock_release>
 8007328:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800732c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007330:	6025      	str	r5, [r4, #0]
 8007332:	61a5      	str	r5, [r4, #24]
 8007334:	2208      	movs	r2, #8
 8007336:	4629      	mov	r1, r5
 8007338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800733c:	f7fe f950 	bl	80055e0 <memset>
 8007340:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007344:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007348:	4620      	mov	r0, r4
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800734c:	3468      	adds	r4, #104	; 0x68
 800734e:	e7d9      	b.n	8007304 <__sfp+0x1c>
 8007350:	2104      	movs	r1, #4
 8007352:	4638      	mov	r0, r7
 8007354:	f7ff ff62 	bl	800721c <__sfmoreglue>
 8007358:	4604      	mov	r4, r0
 800735a:	6030      	str	r0, [r6, #0]
 800735c:	2800      	cmp	r0, #0
 800735e:	d1d5      	bne.n	800730c <__sfp+0x24>
 8007360:	f7ff ff78 	bl	8007254 <__sfp_lock_release>
 8007364:	230c      	movs	r3, #12
 8007366:	603b      	str	r3, [r7, #0]
 8007368:	e7ee      	b.n	8007348 <__sfp+0x60>
 800736a:	bf00      	nop
 800736c:	08012488 	.word	0x08012488
 8007370:	ffff0001 	.word	0xffff0001

08007374 <_fwalk_reent>:
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007378:	4606      	mov	r6, r0
 800737a:	4688      	mov	r8, r1
 800737c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007380:	2700      	movs	r7, #0
 8007382:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007386:	f1b9 0901 	subs.w	r9, r9, #1
 800738a:	d505      	bpl.n	8007398 <_fwalk_reent+0x24>
 800738c:	6824      	ldr	r4, [r4, #0]
 800738e:	2c00      	cmp	r4, #0
 8007390:	d1f7      	bne.n	8007382 <_fwalk_reent+0xe>
 8007392:	4638      	mov	r0, r7
 8007394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007398:	89ab      	ldrh	r3, [r5, #12]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d907      	bls.n	80073ae <_fwalk_reent+0x3a>
 800739e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073a2:	3301      	adds	r3, #1
 80073a4:	d003      	beq.n	80073ae <_fwalk_reent+0x3a>
 80073a6:	4629      	mov	r1, r5
 80073a8:	4630      	mov	r0, r6
 80073aa:	47c0      	blx	r8
 80073ac:	4307      	orrs	r7, r0
 80073ae:	3568      	adds	r5, #104	; 0x68
 80073b0:	e7e9      	b.n	8007386 <_fwalk_reent+0x12>
	...

080073b4 <_localeconv_r>:
 80073b4:	4800      	ldr	r0, [pc, #0]	; (80073b8 <_localeconv_r+0x4>)
 80073b6:	4770      	bx	lr
 80073b8:	20000894 	.word	0x20000894

080073bc <__retarget_lock_init_recursive>:
 80073bc:	4770      	bx	lr

080073be <__retarget_lock_acquire_recursive>:
 80073be:	4770      	bx	lr

080073c0 <__retarget_lock_release_recursive>:
 80073c0:	4770      	bx	lr

080073c2 <__swhatbuf_r>:
 80073c2:	b570      	push	{r4, r5, r6, lr}
 80073c4:	460e      	mov	r6, r1
 80073c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ca:	2900      	cmp	r1, #0
 80073cc:	b096      	sub	sp, #88	; 0x58
 80073ce:	4614      	mov	r4, r2
 80073d0:	461d      	mov	r5, r3
 80073d2:	da08      	bge.n	80073e6 <__swhatbuf_r+0x24>
 80073d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	602a      	str	r2, [r5, #0]
 80073dc:	061a      	lsls	r2, r3, #24
 80073de:	d410      	bmi.n	8007402 <__swhatbuf_r+0x40>
 80073e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073e4:	e00e      	b.n	8007404 <__swhatbuf_r+0x42>
 80073e6:	466a      	mov	r2, sp
 80073e8:	f000 fde6 	bl	8007fb8 <_fstat_r>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	dbf1      	blt.n	80073d4 <__swhatbuf_r+0x12>
 80073f0:	9a01      	ldr	r2, [sp, #4]
 80073f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073fa:	425a      	negs	r2, r3
 80073fc:	415a      	adcs	r2, r3
 80073fe:	602a      	str	r2, [r5, #0]
 8007400:	e7ee      	b.n	80073e0 <__swhatbuf_r+0x1e>
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	2000      	movs	r0, #0
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	b016      	add	sp, #88	; 0x58
 800740a:	bd70      	pop	{r4, r5, r6, pc}

0800740c <__smakebuf_r>:
 800740c:	898b      	ldrh	r3, [r1, #12]
 800740e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007410:	079d      	lsls	r5, r3, #30
 8007412:	4606      	mov	r6, r0
 8007414:	460c      	mov	r4, r1
 8007416:	d507      	bpl.n	8007428 <__smakebuf_r+0x1c>
 8007418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	6123      	str	r3, [r4, #16]
 8007420:	2301      	movs	r3, #1
 8007422:	6163      	str	r3, [r4, #20]
 8007424:	b002      	add	sp, #8
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	ab01      	add	r3, sp, #4
 800742a:	466a      	mov	r2, sp
 800742c:	f7ff ffc9 	bl	80073c2 <__swhatbuf_r>
 8007430:	9900      	ldr	r1, [sp, #0]
 8007432:	4605      	mov	r5, r0
 8007434:	4630      	mov	r0, r6
 8007436:	f7fe f947 	bl	80056c8 <_malloc_r>
 800743a:	b948      	cbnz	r0, 8007450 <__smakebuf_r+0x44>
 800743c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007440:	059a      	lsls	r2, r3, #22
 8007442:	d4ef      	bmi.n	8007424 <__smakebuf_r+0x18>
 8007444:	f023 0303 	bic.w	r3, r3, #3
 8007448:	f043 0302 	orr.w	r3, r3, #2
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	e7e3      	b.n	8007418 <__smakebuf_r+0xc>
 8007450:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <__smakebuf_r+0x7c>)
 8007452:	62b3      	str	r3, [r6, #40]	; 0x28
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	6020      	str	r0, [r4, #0]
 8007458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745c:	81a3      	strh	r3, [r4, #12]
 800745e:	9b00      	ldr	r3, [sp, #0]
 8007460:	6163      	str	r3, [r4, #20]
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	6120      	str	r0, [r4, #16]
 8007466:	b15b      	cbz	r3, 8007480 <__smakebuf_r+0x74>
 8007468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800746c:	4630      	mov	r0, r6
 800746e:	f000 fdb5 	bl	8007fdc <_isatty_r>
 8007472:	b128      	cbz	r0, 8007480 <__smakebuf_r+0x74>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	89a0      	ldrh	r0, [r4, #12]
 8007482:	4305      	orrs	r5, r0
 8007484:	81a5      	strh	r5, [r4, #12]
 8007486:	e7cd      	b.n	8007424 <__smakebuf_r+0x18>
 8007488:	08007211 	.word	0x08007211

0800748c <__malloc_lock>:
 800748c:	4801      	ldr	r0, [pc, #4]	; (8007494 <__malloc_lock+0x8>)
 800748e:	f7ff bf96 	b.w	80073be <__retarget_lock_acquire_recursive>
 8007492:	bf00      	nop
 8007494:	20001514 	.word	0x20001514

08007498 <__malloc_unlock>:
 8007498:	4801      	ldr	r0, [pc, #4]	; (80074a0 <__malloc_unlock+0x8>)
 800749a:	f7ff bf91 	b.w	80073c0 <__retarget_lock_release_recursive>
 800749e:	bf00      	nop
 80074a0:	20001514 	.word	0x20001514

080074a4 <_Balloc>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074a8:	4604      	mov	r4, r0
 80074aa:	460d      	mov	r5, r1
 80074ac:	b976      	cbnz	r6, 80074cc <_Balloc+0x28>
 80074ae:	2010      	movs	r0, #16
 80074b0:	f7fe f880 	bl	80055b4 <malloc>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6260      	str	r0, [r4, #36]	; 0x24
 80074b8:	b920      	cbnz	r0, 80074c4 <_Balloc+0x20>
 80074ba:	4b18      	ldr	r3, [pc, #96]	; (800751c <_Balloc+0x78>)
 80074bc:	4818      	ldr	r0, [pc, #96]	; (8007520 <_Balloc+0x7c>)
 80074be:	2166      	movs	r1, #102	; 0x66
 80074c0:	f000 fd3a 	bl	8007f38 <__assert_func>
 80074c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c8:	6006      	str	r6, [r0, #0]
 80074ca:	60c6      	str	r6, [r0, #12]
 80074cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074ce:	68f3      	ldr	r3, [r6, #12]
 80074d0:	b183      	cbz	r3, 80074f4 <_Balloc+0x50>
 80074d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074da:	b9b8      	cbnz	r0, 800750c <_Balloc+0x68>
 80074dc:	2101      	movs	r1, #1
 80074de:	fa01 f605 	lsl.w	r6, r1, r5
 80074e2:	1d72      	adds	r2, r6, #5
 80074e4:	0092      	lsls	r2, r2, #2
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 fb60 	bl	8007bac <_calloc_r>
 80074ec:	b160      	cbz	r0, 8007508 <_Balloc+0x64>
 80074ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074f2:	e00e      	b.n	8007512 <_Balloc+0x6e>
 80074f4:	2221      	movs	r2, #33	; 0x21
 80074f6:	2104      	movs	r1, #4
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fb57 	bl	8007bac <_calloc_r>
 80074fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007500:	60f0      	str	r0, [r6, #12]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e4      	bne.n	80074d2 <_Balloc+0x2e>
 8007508:	2000      	movs	r0, #0
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	6802      	ldr	r2, [r0, #0]
 800750e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007512:	2300      	movs	r3, #0
 8007514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007518:	e7f7      	b.n	800750a <_Balloc+0x66>
 800751a:	bf00      	nop
 800751c:	080124cd 	.word	0x080124cd
 8007520:	080125b0 	.word	0x080125b0

08007524 <_Bfree>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007528:	4605      	mov	r5, r0
 800752a:	460c      	mov	r4, r1
 800752c:	b976      	cbnz	r6, 800754c <_Bfree+0x28>
 800752e:	2010      	movs	r0, #16
 8007530:	f7fe f840 	bl	80055b4 <malloc>
 8007534:	4602      	mov	r2, r0
 8007536:	6268      	str	r0, [r5, #36]	; 0x24
 8007538:	b920      	cbnz	r0, 8007544 <_Bfree+0x20>
 800753a:	4b09      	ldr	r3, [pc, #36]	; (8007560 <_Bfree+0x3c>)
 800753c:	4809      	ldr	r0, [pc, #36]	; (8007564 <_Bfree+0x40>)
 800753e:	218a      	movs	r1, #138	; 0x8a
 8007540:	f000 fcfa 	bl	8007f38 <__assert_func>
 8007544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007548:	6006      	str	r6, [r0, #0]
 800754a:	60c6      	str	r6, [r0, #12]
 800754c:	b13c      	cbz	r4, 800755e <_Bfree+0x3a>
 800754e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007550:	6862      	ldr	r2, [r4, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007558:	6021      	str	r1, [r4, #0]
 800755a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	080124cd 	.word	0x080124cd
 8007564:	080125b0 	.word	0x080125b0

08007568 <__multadd>:
 8007568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756c:	690d      	ldr	r5, [r1, #16]
 800756e:	4607      	mov	r7, r0
 8007570:	460c      	mov	r4, r1
 8007572:	461e      	mov	r6, r3
 8007574:	f101 0c14 	add.w	ip, r1, #20
 8007578:	2000      	movs	r0, #0
 800757a:	f8dc 3000 	ldr.w	r3, [ip]
 800757e:	b299      	uxth	r1, r3
 8007580:	fb02 6101 	mla	r1, r2, r1, r6
 8007584:	0c1e      	lsrs	r6, r3, #16
 8007586:	0c0b      	lsrs	r3, r1, #16
 8007588:	fb02 3306 	mla	r3, r2, r6, r3
 800758c:	b289      	uxth	r1, r1
 800758e:	3001      	adds	r0, #1
 8007590:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007594:	4285      	cmp	r5, r0
 8007596:	f84c 1b04 	str.w	r1, [ip], #4
 800759a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800759e:	dcec      	bgt.n	800757a <__multadd+0x12>
 80075a0:	b30e      	cbz	r6, 80075e6 <__multadd+0x7e>
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	dc19      	bgt.n	80075dc <__multadd+0x74>
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	4638      	mov	r0, r7
 80075ac:	3101      	adds	r1, #1
 80075ae:	f7ff ff79 	bl	80074a4 <_Balloc>
 80075b2:	4680      	mov	r8, r0
 80075b4:	b928      	cbnz	r0, 80075c2 <__multadd+0x5a>
 80075b6:	4602      	mov	r2, r0
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <__multadd+0x84>)
 80075ba:	480d      	ldr	r0, [pc, #52]	; (80075f0 <__multadd+0x88>)
 80075bc:	21b5      	movs	r1, #181	; 0xb5
 80075be:	f000 fcbb 	bl	8007f38 <__assert_func>
 80075c2:	6922      	ldr	r2, [r4, #16]
 80075c4:	3202      	adds	r2, #2
 80075c6:	f104 010c 	add.w	r1, r4, #12
 80075ca:	0092      	lsls	r2, r2, #2
 80075cc:	300c      	adds	r0, #12
 80075ce:	f7fd fff9 	bl	80055c4 <memcpy>
 80075d2:	4621      	mov	r1, r4
 80075d4:	4638      	mov	r0, r7
 80075d6:	f7ff ffa5 	bl	8007524 <_Bfree>
 80075da:	4644      	mov	r4, r8
 80075dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075e0:	3501      	adds	r5, #1
 80075e2:	615e      	str	r6, [r3, #20]
 80075e4:	6125      	str	r5, [r4, #16]
 80075e6:	4620      	mov	r0, r4
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	0801253f 	.word	0x0801253f
 80075f0:	080125b0 	.word	0x080125b0

080075f4 <__hi0bits>:
 80075f4:	0c03      	lsrs	r3, r0, #16
 80075f6:	041b      	lsls	r3, r3, #16
 80075f8:	b9d3      	cbnz	r3, 8007630 <__hi0bits+0x3c>
 80075fa:	0400      	lsls	r0, r0, #16
 80075fc:	2310      	movs	r3, #16
 80075fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007602:	bf04      	itt	eq
 8007604:	0200      	lsleq	r0, r0, #8
 8007606:	3308      	addeq	r3, #8
 8007608:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800760c:	bf04      	itt	eq
 800760e:	0100      	lsleq	r0, r0, #4
 8007610:	3304      	addeq	r3, #4
 8007612:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007616:	bf04      	itt	eq
 8007618:	0080      	lsleq	r0, r0, #2
 800761a:	3302      	addeq	r3, #2
 800761c:	2800      	cmp	r0, #0
 800761e:	db05      	blt.n	800762c <__hi0bits+0x38>
 8007620:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007624:	f103 0301 	add.w	r3, r3, #1
 8007628:	bf08      	it	eq
 800762a:	2320      	moveq	r3, #32
 800762c:	4618      	mov	r0, r3
 800762e:	4770      	bx	lr
 8007630:	2300      	movs	r3, #0
 8007632:	e7e4      	b.n	80075fe <__hi0bits+0xa>

08007634 <__lo0bits>:
 8007634:	6803      	ldr	r3, [r0, #0]
 8007636:	f013 0207 	ands.w	r2, r3, #7
 800763a:	4601      	mov	r1, r0
 800763c:	d00b      	beq.n	8007656 <__lo0bits+0x22>
 800763e:	07da      	lsls	r2, r3, #31
 8007640:	d423      	bmi.n	800768a <__lo0bits+0x56>
 8007642:	0798      	lsls	r0, r3, #30
 8007644:	bf49      	itett	mi
 8007646:	085b      	lsrmi	r3, r3, #1
 8007648:	089b      	lsrpl	r3, r3, #2
 800764a:	2001      	movmi	r0, #1
 800764c:	600b      	strmi	r3, [r1, #0]
 800764e:	bf5c      	itt	pl
 8007650:	600b      	strpl	r3, [r1, #0]
 8007652:	2002      	movpl	r0, #2
 8007654:	4770      	bx	lr
 8007656:	b298      	uxth	r0, r3
 8007658:	b9a8      	cbnz	r0, 8007686 <__lo0bits+0x52>
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	2010      	movs	r0, #16
 800765e:	b2da      	uxtb	r2, r3
 8007660:	b90a      	cbnz	r2, 8007666 <__lo0bits+0x32>
 8007662:	3008      	adds	r0, #8
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	071a      	lsls	r2, r3, #28
 8007668:	bf04      	itt	eq
 800766a:	091b      	lsreq	r3, r3, #4
 800766c:	3004      	addeq	r0, #4
 800766e:	079a      	lsls	r2, r3, #30
 8007670:	bf04      	itt	eq
 8007672:	089b      	lsreq	r3, r3, #2
 8007674:	3002      	addeq	r0, #2
 8007676:	07da      	lsls	r2, r3, #31
 8007678:	d403      	bmi.n	8007682 <__lo0bits+0x4e>
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	f100 0001 	add.w	r0, r0, #1
 8007680:	d005      	beq.n	800768e <__lo0bits+0x5a>
 8007682:	600b      	str	r3, [r1, #0]
 8007684:	4770      	bx	lr
 8007686:	4610      	mov	r0, r2
 8007688:	e7e9      	b.n	800765e <__lo0bits+0x2a>
 800768a:	2000      	movs	r0, #0
 800768c:	4770      	bx	lr
 800768e:	2020      	movs	r0, #32
 8007690:	4770      	bx	lr
	...

08007694 <__i2b>:
 8007694:	b510      	push	{r4, lr}
 8007696:	460c      	mov	r4, r1
 8007698:	2101      	movs	r1, #1
 800769a:	f7ff ff03 	bl	80074a4 <_Balloc>
 800769e:	4602      	mov	r2, r0
 80076a0:	b928      	cbnz	r0, 80076ae <__i2b+0x1a>
 80076a2:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <__i2b+0x24>)
 80076a4:	4805      	ldr	r0, [pc, #20]	; (80076bc <__i2b+0x28>)
 80076a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076aa:	f000 fc45 	bl	8007f38 <__assert_func>
 80076ae:	2301      	movs	r3, #1
 80076b0:	6144      	str	r4, [r0, #20]
 80076b2:	6103      	str	r3, [r0, #16]
 80076b4:	bd10      	pop	{r4, pc}
 80076b6:	bf00      	nop
 80076b8:	0801253f 	.word	0x0801253f
 80076bc:	080125b0 	.word	0x080125b0

080076c0 <__multiply>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	4691      	mov	r9, r2
 80076c6:	690a      	ldr	r2, [r1, #16]
 80076c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	bfb8      	it	lt
 80076d0:	460b      	movlt	r3, r1
 80076d2:	460c      	mov	r4, r1
 80076d4:	bfbc      	itt	lt
 80076d6:	464c      	movlt	r4, r9
 80076d8:	4699      	movlt	r9, r3
 80076da:	6927      	ldr	r7, [r4, #16]
 80076dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076e0:	68a3      	ldr	r3, [r4, #8]
 80076e2:	6861      	ldr	r1, [r4, #4]
 80076e4:	eb07 060a 	add.w	r6, r7, sl
 80076e8:	42b3      	cmp	r3, r6
 80076ea:	b085      	sub	sp, #20
 80076ec:	bfb8      	it	lt
 80076ee:	3101      	addlt	r1, #1
 80076f0:	f7ff fed8 	bl	80074a4 <_Balloc>
 80076f4:	b930      	cbnz	r0, 8007704 <__multiply+0x44>
 80076f6:	4602      	mov	r2, r0
 80076f8:	4b44      	ldr	r3, [pc, #272]	; (800780c <__multiply+0x14c>)
 80076fa:	4845      	ldr	r0, [pc, #276]	; (8007810 <__multiply+0x150>)
 80076fc:	f240 115d 	movw	r1, #349	; 0x15d
 8007700:	f000 fc1a 	bl	8007f38 <__assert_func>
 8007704:	f100 0514 	add.w	r5, r0, #20
 8007708:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800770c:	462b      	mov	r3, r5
 800770e:	2200      	movs	r2, #0
 8007710:	4543      	cmp	r3, r8
 8007712:	d321      	bcc.n	8007758 <__multiply+0x98>
 8007714:	f104 0314 	add.w	r3, r4, #20
 8007718:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800771c:	f109 0314 	add.w	r3, r9, #20
 8007720:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007724:	9202      	str	r2, [sp, #8]
 8007726:	1b3a      	subs	r2, r7, r4
 8007728:	3a15      	subs	r2, #21
 800772a:	f022 0203 	bic.w	r2, r2, #3
 800772e:	3204      	adds	r2, #4
 8007730:	f104 0115 	add.w	r1, r4, #21
 8007734:	428f      	cmp	r7, r1
 8007736:	bf38      	it	cc
 8007738:	2204      	movcc	r2, #4
 800773a:	9201      	str	r2, [sp, #4]
 800773c:	9a02      	ldr	r2, [sp, #8]
 800773e:	9303      	str	r3, [sp, #12]
 8007740:	429a      	cmp	r2, r3
 8007742:	d80c      	bhi.n	800775e <__multiply+0x9e>
 8007744:	2e00      	cmp	r6, #0
 8007746:	dd03      	ble.n	8007750 <__multiply+0x90>
 8007748:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800774c:	2b00      	cmp	r3, #0
 800774e:	d05a      	beq.n	8007806 <__multiply+0x146>
 8007750:	6106      	str	r6, [r0, #16]
 8007752:	b005      	add	sp, #20
 8007754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007758:	f843 2b04 	str.w	r2, [r3], #4
 800775c:	e7d8      	b.n	8007710 <__multiply+0x50>
 800775e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007762:	f1ba 0f00 	cmp.w	sl, #0
 8007766:	d024      	beq.n	80077b2 <__multiply+0xf2>
 8007768:	f104 0e14 	add.w	lr, r4, #20
 800776c:	46a9      	mov	r9, r5
 800776e:	f04f 0c00 	mov.w	ip, #0
 8007772:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007776:	f8d9 1000 	ldr.w	r1, [r9]
 800777a:	fa1f fb82 	uxth.w	fp, r2
 800777e:	b289      	uxth	r1, r1
 8007780:	fb0a 110b 	mla	r1, sl, fp, r1
 8007784:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007788:	f8d9 2000 	ldr.w	r2, [r9]
 800778c:	4461      	add	r1, ip
 800778e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007792:	fb0a c20b 	mla	r2, sl, fp, ip
 8007796:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800779a:	b289      	uxth	r1, r1
 800779c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077a0:	4577      	cmp	r7, lr
 80077a2:	f849 1b04 	str.w	r1, [r9], #4
 80077a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077aa:	d8e2      	bhi.n	8007772 <__multiply+0xb2>
 80077ac:	9a01      	ldr	r2, [sp, #4]
 80077ae:	f845 c002 	str.w	ip, [r5, r2]
 80077b2:	9a03      	ldr	r2, [sp, #12]
 80077b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077b8:	3304      	adds	r3, #4
 80077ba:	f1b9 0f00 	cmp.w	r9, #0
 80077be:	d020      	beq.n	8007802 <__multiply+0x142>
 80077c0:	6829      	ldr	r1, [r5, #0]
 80077c2:	f104 0c14 	add.w	ip, r4, #20
 80077c6:	46ae      	mov	lr, r5
 80077c8:	f04f 0a00 	mov.w	sl, #0
 80077cc:	f8bc b000 	ldrh.w	fp, [ip]
 80077d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077d4:	fb09 220b 	mla	r2, r9, fp, r2
 80077d8:	4492      	add	sl, r2
 80077da:	b289      	uxth	r1, r1
 80077dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077e0:	f84e 1b04 	str.w	r1, [lr], #4
 80077e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077e8:	f8be 1000 	ldrh.w	r1, [lr]
 80077ec:	0c12      	lsrs	r2, r2, #16
 80077ee:	fb09 1102 	mla	r1, r9, r2, r1
 80077f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077f6:	4567      	cmp	r7, ip
 80077f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077fc:	d8e6      	bhi.n	80077cc <__multiply+0x10c>
 80077fe:	9a01      	ldr	r2, [sp, #4]
 8007800:	50a9      	str	r1, [r5, r2]
 8007802:	3504      	adds	r5, #4
 8007804:	e79a      	b.n	800773c <__multiply+0x7c>
 8007806:	3e01      	subs	r6, #1
 8007808:	e79c      	b.n	8007744 <__multiply+0x84>
 800780a:	bf00      	nop
 800780c:	0801253f 	.word	0x0801253f
 8007810:	080125b0 	.word	0x080125b0

08007814 <__pow5mult>:
 8007814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007818:	4615      	mov	r5, r2
 800781a:	f012 0203 	ands.w	r2, r2, #3
 800781e:	4606      	mov	r6, r0
 8007820:	460f      	mov	r7, r1
 8007822:	d007      	beq.n	8007834 <__pow5mult+0x20>
 8007824:	4c25      	ldr	r4, [pc, #148]	; (80078bc <__pow5mult+0xa8>)
 8007826:	3a01      	subs	r2, #1
 8007828:	2300      	movs	r3, #0
 800782a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800782e:	f7ff fe9b 	bl	8007568 <__multadd>
 8007832:	4607      	mov	r7, r0
 8007834:	10ad      	asrs	r5, r5, #2
 8007836:	d03d      	beq.n	80078b4 <__pow5mult+0xa0>
 8007838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800783a:	b97c      	cbnz	r4, 800785c <__pow5mult+0x48>
 800783c:	2010      	movs	r0, #16
 800783e:	f7fd feb9 	bl	80055b4 <malloc>
 8007842:	4602      	mov	r2, r0
 8007844:	6270      	str	r0, [r6, #36]	; 0x24
 8007846:	b928      	cbnz	r0, 8007854 <__pow5mult+0x40>
 8007848:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <__pow5mult+0xac>)
 800784a:	481e      	ldr	r0, [pc, #120]	; (80078c4 <__pow5mult+0xb0>)
 800784c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007850:	f000 fb72 	bl	8007f38 <__assert_func>
 8007854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007858:	6004      	str	r4, [r0, #0]
 800785a:	60c4      	str	r4, [r0, #12]
 800785c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007864:	b94c      	cbnz	r4, 800787a <__pow5mult+0x66>
 8007866:	f240 2171 	movw	r1, #625	; 0x271
 800786a:	4630      	mov	r0, r6
 800786c:	f7ff ff12 	bl	8007694 <__i2b>
 8007870:	2300      	movs	r3, #0
 8007872:	f8c8 0008 	str.w	r0, [r8, #8]
 8007876:	4604      	mov	r4, r0
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	f04f 0900 	mov.w	r9, #0
 800787e:	07eb      	lsls	r3, r5, #31
 8007880:	d50a      	bpl.n	8007898 <__pow5mult+0x84>
 8007882:	4639      	mov	r1, r7
 8007884:	4622      	mov	r2, r4
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ff1a 	bl	80076c0 <__multiply>
 800788c:	4639      	mov	r1, r7
 800788e:	4680      	mov	r8, r0
 8007890:	4630      	mov	r0, r6
 8007892:	f7ff fe47 	bl	8007524 <_Bfree>
 8007896:	4647      	mov	r7, r8
 8007898:	106d      	asrs	r5, r5, #1
 800789a:	d00b      	beq.n	80078b4 <__pow5mult+0xa0>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	b938      	cbnz	r0, 80078b0 <__pow5mult+0x9c>
 80078a0:	4622      	mov	r2, r4
 80078a2:	4621      	mov	r1, r4
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff ff0b 	bl	80076c0 <__multiply>
 80078aa:	6020      	str	r0, [r4, #0]
 80078ac:	f8c0 9000 	str.w	r9, [r0]
 80078b0:	4604      	mov	r4, r0
 80078b2:	e7e4      	b.n	800787e <__pow5mult+0x6a>
 80078b4:	4638      	mov	r0, r7
 80078b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ba:	bf00      	nop
 80078bc:	08012700 	.word	0x08012700
 80078c0:	080124cd 	.word	0x080124cd
 80078c4:	080125b0 	.word	0x080125b0

080078c8 <__lshift>:
 80078c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	6849      	ldr	r1, [r1, #4]
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	4607      	mov	r7, r0
 80078da:	4691      	mov	r9, r2
 80078dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078e0:	f108 0601 	add.w	r6, r8, #1
 80078e4:	42b3      	cmp	r3, r6
 80078e6:	db0b      	blt.n	8007900 <__lshift+0x38>
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff fddb 	bl	80074a4 <_Balloc>
 80078ee:	4605      	mov	r5, r0
 80078f0:	b948      	cbnz	r0, 8007906 <__lshift+0x3e>
 80078f2:	4602      	mov	r2, r0
 80078f4:	4b2a      	ldr	r3, [pc, #168]	; (80079a0 <__lshift+0xd8>)
 80078f6:	482b      	ldr	r0, [pc, #172]	; (80079a4 <__lshift+0xdc>)
 80078f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078fc:	f000 fb1c 	bl	8007f38 <__assert_func>
 8007900:	3101      	adds	r1, #1
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	e7ee      	b.n	80078e4 <__lshift+0x1c>
 8007906:	2300      	movs	r3, #0
 8007908:	f100 0114 	add.w	r1, r0, #20
 800790c:	f100 0210 	add.w	r2, r0, #16
 8007910:	4618      	mov	r0, r3
 8007912:	4553      	cmp	r3, sl
 8007914:	db37      	blt.n	8007986 <__lshift+0xbe>
 8007916:	6920      	ldr	r0, [r4, #16]
 8007918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800791c:	f104 0314 	add.w	r3, r4, #20
 8007920:	f019 091f 	ands.w	r9, r9, #31
 8007924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800792c:	d02f      	beq.n	800798e <__lshift+0xc6>
 800792e:	f1c9 0e20 	rsb	lr, r9, #32
 8007932:	468a      	mov	sl, r1
 8007934:	f04f 0c00 	mov.w	ip, #0
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	fa02 f209 	lsl.w	r2, r2, r9
 800793e:	ea42 020c 	orr.w	r2, r2, ip
 8007942:	f84a 2b04 	str.w	r2, [sl], #4
 8007946:	f853 2b04 	ldr.w	r2, [r3], #4
 800794a:	4298      	cmp	r0, r3
 800794c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007950:	d8f2      	bhi.n	8007938 <__lshift+0x70>
 8007952:	1b03      	subs	r3, r0, r4
 8007954:	3b15      	subs	r3, #21
 8007956:	f023 0303 	bic.w	r3, r3, #3
 800795a:	3304      	adds	r3, #4
 800795c:	f104 0215 	add.w	r2, r4, #21
 8007960:	4290      	cmp	r0, r2
 8007962:	bf38      	it	cc
 8007964:	2304      	movcc	r3, #4
 8007966:	f841 c003 	str.w	ip, [r1, r3]
 800796a:	f1bc 0f00 	cmp.w	ip, #0
 800796e:	d001      	beq.n	8007974 <__lshift+0xac>
 8007970:	f108 0602 	add.w	r6, r8, #2
 8007974:	3e01      	subs	r6, #1
 8007976:	4638      	mov	r0, r7
 8007978:	612e      	str	r6, [r5, #16]
 800797a:	4621      	mov	r1, r4
 800797c:	f7ff fdd2 	bl	8007524 <_Bfree>
 8007980:	4628      	mov	r0, r5
 8007982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007986:	f842 0f04 	str.w	r0, [r2, #4]!
 800798a:	3301      	adds	r3, #1
 800798c:	e7c1      	b.n	8007912 <__lshift+0x4a>
 800798e:	3904      	subs	r1, #4
 8007990:	f853 2b04 	ldr.w	r2, [r3], #4
 8007994:	f841 2f04 	str.w	r2, [r1, #4]!
 8007998:	4298      	cmp	r0, r3
 800799a:	d8f9      	bhi.n	8007990 <__lshift+0xc8>
 800799c:	e7ea      	b.n	8007974 <__lshift+0xac>
 800799e:	bf00      	nop
 80079a0:	0801253f 	.word	0x0801253f
 80079a4:	080125b0 	.word	0x080125b0

080079a8 <__mcmp>:
 80079a8:	b530      	push	{r4, r5, lr}
 80079aa:	6902      	ldr	r2, [r0, #16]
 80079ac:	690c      	ldr	r4, [r1, #16]
 80079ae:	1b12      	subs	r2, r2, r4
 80079b0:	d10e      	bne.n	80079d0 <__mcmp+0x28>
 80079b2:	f100 0314 	add.w	r3, r0, #20
 80079b6:	3114      	adds	r1, #20
 80079b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079c8:	42a5      	cmp	r5, r4
 80079ca:	d003      	beq.n	80079d4 <__mcmp+0x2c>
 80079cc:	d305      	bcc.n	80079da <__mcmp+0x32>
 80079ce:	2201      	movs	r2, #1
 80079d0:	4610      	mov	r0, r2
 80079d2:	bd30      	pop	{r4, r5, pc}
 80079d4:	4283      	cmp	r3, r0
 80079d6:	d3f3      	bcc.n	80079c0 <__mcmp+0x18>
 80079d8:	e7fa      	b.n	80079d0 <__mcmp+0x28>
 80079da:	f04f 32ff 	mov.w	r2, #4294967295
 80079de:	e7f7      	b.n	80079d0 <__mcmp+0x28>

080079e0 <__mdiff>:
 80079e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	4606      	mov	r6, r0
 80079e8:	4611      	mov	r1, r2
 80079ea:	4620      	mov	r0, r4
 80079ec:	4690      	mov	r8, r2
 80079ee:	f7ff ffdb 	bl	80079a8 <__mcmp>
 80079f2:	1e05      	subs	r5, r0, #0
 80079f4:	d110      	bne.n	8007a18 <__mdiff+0x38>
 80079f6:	4629      	mov	r1, r5
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7ff fd53 	bl	80074a4 <_Balloc>
 80079fe:	b930      	cbnz	r0, 8007a0e <__mdiff+0x2e>
 8007a00:	4b3a      	ldr	r3, [pc, #232]	; (8007aec <__mdiff+0x10c>)
 8007a02:	4602      	mov	r2, r0
 8007a04:	f240 2132 	movw	r1, #562	; 0x232
 8007a08:	4839      	ldr	r0, [pc, #228]	; (8007af0 <__mdiff+0x110>)
 8007a0a:	f000 fa95 	bl	8007f38 <__assert_func>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a18:	bfa4      	itt	ge
 8007a1a:	4643      	movge	r3, r8
 8007a1c:	46a0      	movge	r8, r4
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a24:	bfa6      	itte	ge
 8007a26:	461c      	movge	r4, r3
 8007a28:	2500      	movge	r5, #0
 8007a2a:	2501      	movlt	r5, #1
 8007a2c:	f7ff fd3a 	bl	80074a4 <_Balloc>
 8007a30:	b920      	cbnz	r0, 8007a3c <__mdiff+0x5c>
 8007a32:	4b2e      	ldr	r3, [pc, #184]	; (8007aec <__mdiff+0x10c>)
 8007a34:	4602      	mov	r2, r0
 8007a36:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a3a:	e7e5      	b.n	8007a08 <__mdiff+0x28>
 8007a3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a40:	6926      	ldr	r6, [r4, #16]
 8007a42:	60c5      	str	r5, [r0, #12]
 8007a44:	f104 0914 	add.w	r9, r4, #20
 8007a48:	f108 0514 	add.w	r5, r8, #20
 8007a4c:	f100 0e14 	add.w	lr, r0, #20
 8007a50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a58:	f108 0210 	add.w	r2, r8, #16
 8007a5c:	46f2      	mov	sl, lr
 8007a5e:	2100      	movs	r1, #0
 8007a60:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a68:	fa1f f883 	uxth.w	r8, r3
 8007a6c:	fa11 f18b 	uxtah	r1, r1, fp
 8007a70:	0c1b      	lsrs	r3, r3, #16
 8007a72:	eba1 0808 	sub.w	r8, r1, r8
 8007a76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a7e:	fa1f f888 	uxth.w	r8, r8
 8007a82:	1419      	asrs	r1, r3, #16
 8007a84:	454e      	cmp	r6, r9
 8007a86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a8a:	f84a 3b04 	str.w	r3, [sl], #4
 8007a8e:	d8e7      	bhi.n	8007a60 <__mdiff+0x80>
 8007a90:	1b33      	subs	r3, r6, r4
 8007a92:	3b15      	subs	r3, #21
 8007a94:	f023 0303 	bic.w	r3, r3, #3
 8007a98:	3304      	adds	r3, #4
 8007a9a:	3415      	adds	r4, #21
 8007a9c:	42a6      	cmp	r6, r4
 8007a9e:	bf38      	it	cc
 8007aa0:	2304      	movcc	r3, #4
 8007aa2:	441d      	add	r5, r3
 8007aa4:	4473      	add	r3, lr
 8007aa6:	469e      	mov	lr, r3
 8007aa8:	462e      	mov	r6, r5
 8007aaa:	4566      	cmp	r6, ip
 8007aac:	d30e      	bcc.n	8007acc <__mdiff+0xec>
 8007aae:	f10c 0203 	add.w	r2, ip, #3
 8007ab2:	1b52      	subs	r2, r2, r5
 8007ab4:	f022 0203 	bic.w	r2, r2, #3
 8007ab8:	3d03      	subs	r5, #3
 8007aba:	45ac      	cmp	ip, r5
 8007abc:	bf38      	it	cc
 8007abe:	2200      	movcc	r2, #0
 8007ac0:	441a      	add	r2, r3
 8007ac2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ac6:	b17b      	cbz	r3, 8007ae8 <__mdiff+0x108>
 8007ac8:	6107      	str	r7, [r0, #16]
 8007aca:	e7a3      	b.n	8007a14 <__mdiff+0x34>
 8007acc:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ad0:	fa11 f288 	uxtah	r2, r1, r8
 8007ad4:	1414      	asrs	r4, r2, #16
 8007ad6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ada:	b292      	uxth	r2, r2
 8007adc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ae0:	f84e 2b04 	str.w	r2, [lr], #4
 8007ae4:	1421      	asrs	r1, r4, #16
 8007ae6:	e7e0      	b.n	8007aaa <__mdiff+0xca>
 8007ae8:	3f01      	subs	r7, #1
 8007aea:	e7ea      	b.n	8007ac2 <__mdiff+0xe2>
 8007aec:	0801253f 	.word	0x0801253f
 8007af0:	080125b0 	.word	0x080125b0

08007af4 <__d2b>:
 8007af4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007af8:	4689      	mov	r9, r1
 8007afa:	2101      	movs	r1, #1
 8007afc:	ec57 6b10 	vmov	r6, r7, d0
 8007b00:	4690      	mov	r8, r2
 8007b02:	f7ff fccf 	bl	80074a4 <_Balloc>
 8007b06:	4604      	mov	r4, r0
 8007b08:	b930      	cbnz	r0, 8007b18 <__d2b+0x24>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	4b25      	ldr	r3, [pc, #148]	; (8007ba4 <__d2b+0xb0>)
 8007b0e:	4826      	ldr	r0, [pc, #152]	; (8007ba8 <__d2b+0xb4>)
 8007b10:	f240 310a 	movw	r1, #778	; 0x30a
 8007b14:	f000 fa10 	bl	8007f38 <__assert_func>
 8007b18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b20:	bb35      	cbnz	r5, 8007b70 <__d2b+0x7c>
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	d028      	beq.n	8007b7a <__d2b+0x86>
 8007b28:	4668      	mov	r0, sp
 8007b2a:	9600      	str	r6, [sp, #0]
 8007b2c:	f7ff fd82 	bl	8007634 <__lo0bits>
 8007b30:	9900      	ldr	r1, [sp, #0]
 8007b32:	b300      	cbz	r0, 8007b76 <__d2b+0x82>
 8007b34:	9a01      	ldr	r2, [sp, #4]
 8007b36:	f1c0 0320 	rsb	r3, r0, #32
 8007b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	40c2      	lsrs	r2, r0
 8007b42:	6163      	str	r3, [r4, #20]
 8007b44:	9201      	str	r2, [sp, #4]
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	61a3      	str	r3, [r4, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf14      	ite	ne
 8007b4e:	2202      	movne	r2, #2
 8007b50:	2201      	moveq	r2, #1
 8007b52:	6122      	str	r2, [r4, #16]
 8007b54:	b1d5      	cbz	r5, 8007b8c <__d2b+0x98>
 8007b56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b5a:	4405      	add	r5, r0
 8007b5c:	f8c9 5000 	str.w	r5, [r9]
 8007b60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b64:	f8c8 0000 	str.w	r0, [r8]
 8007b68:	4620      	mov	r0, r4
 8007b6a:	b003      	add	sp, #12
 8007b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b74:	e7d5      	b.n	8007b22 <__d2b+0x2e>
 8007b76:	6161      	str	r1, [r4, #20]
 8007b78:	e7e5      	b.n	8007b46 <__d2b+0x52>
 8007b7a:	a801      	add	r0, sp, #4
 8007b7c:	f7ff fd5a 	bl	8007634 <__lo0bits>
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	6163      	str	r3, [r4, #20]
 8007b84:	2201      	movs	r2, #1
 8007b86:	6122      	str	r2, [r4, #16]
 8007b88:	3020      	adds	r0, #32
 8007b8a:	e7e3      	b.n	8007b54 <__d2b+0x60>
 8007b8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b94:	f8c9 0000 	str.w	r0, [r9]
 8007b98:	6918      	ldr	r0, [r3, #16]
 8007b9a:	f7ff fd2b 	bl	80075f4 <__hi0bits>
 8007b9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ba2:	e7df      	b.n	8007b64 <__d2b+0x70>
 8007ba4:	0801253f 	.word	0x0801253f
 8007ba8:	080125b0 	.word	0x080125b0

08007bac <_calloc_r>:
 8007bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bae:	fba1 2402 	umull	r2, r4, r1, r2
 8007bb2:	b94c      	cbnz	r4, 8007bc8 <_calloc_r+0x1c>
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	9201      	str	r2, [sp, #4]
 8007bb8:	f7fd fd86 	bl	80056c8 <_malloc_r>
 8007bbc:	9a01      	ldr	r2, [sp, #4]
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	b930      	cbnz	r0, 8007bd0 <_calloc_r+0x24>
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	b003      	add	sp, #12
 8007bc6:	bd30      	pop	{r4, r5, pc}
 8007bc8:	220c      	movs	r2, #12
 8007bca:	6002      	str	r2, [r0, #0]
 8007bcc:	2500      	movs	r5, #0
 8007bce:	e7f8      	b.n	8007bc2 <_calloc_r+0x16>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f7fd fd05 	bl	80055e0 <memset>
 8007bd6:	e7f4      	b.n	8007bc2 <_calloc_r+0x16>

08007bd8 <__sfputc_r>:
 8007bd8:	6893      	ldr	r3, [r2, #8]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	b410      	push	{r4}
 8007be0:	6093      	str	r3, [r2, #8]
 8007be2:	da08      	bge.n	8007bf6 <__sfputc_r+0x1e>
 8007be4:	6994      	ldr	r4, [r2, #24]
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	db01      	blt.n	8007bee <__sfputc_r+0x16>
 8007bea:	290a      	cmp	r1, #10
 8007bec:	d103      	bne.n	8007bf6 <__sfputc_r+0x1e>
 8007bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf2:	f7fe baed 	b.w	80061d0 <__swbuf_r>
 8007bf6:	6813      	ldr	r3, [r2, #0]
 8007bf8:	1c58      	adds	r0, r3, #1
 8007bfa:	6010      	str	r0, [r2, #0]
 8007bfc:	7019      	strb	r1, [r3, #0]
 8007bfe:	4608      	mov	r0, r1
 8007c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <__sfputs_r>:
 8007c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c08:	4606      	mov	r6, r0
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	18d5      	adds	r5, r2, r3
 8007c10:	42ac      	cmp	r4, r5
 8007c12:	d101      	bne.n	8007c18 <__sfputs_r+0x12>
 8007c14:	2000      	movs	r0, #0
 8007c16:	e007      	b.n	8007c28 <__sfputs_r+0x22>
 8007c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1c:	463a      	mov	r2, r7
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff ffda 	bl	8007bd8 <__sfputc_r>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	d1f3      	bne.n	8007c10 <__sfputs_r+0xa>
 8007c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c2c <_vfiprintf_r>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	460d      	mov	r5, r1
 8007c32:	b09d      	sub	sp, #116	; 0x74
 8007c34:	4614      	mov	r4, r2
 8007c36:	4698      	mov	r8, r3
 8007c38:	4606      	mov	r6, r0
 8007c3a:	b118      	cbz	r0, 8007c44 <_vfiprintf_r+0x18>
 8007c3c:	6983      	ldr	r3, [r0, #24]
 8007c3e:	b90b      	cbnz	r3, 8007c44 <_vfiprintf_r+0x18>
 8007c40:	f7ff fb1a 	bl	8007278 <__sinit>
 8007c44:	4b89      	ldr	r3, [pc, #548]	; (8007e6c <_vfiprintf_r+0x240>)
 8007c46:	429d      	cmp	r5, r3
 8007c48:	d11b      	bne.n	8007c82 <_vfiprintf_r+0x56>
 8007c4a:	6875      	ldr	r5, [r6, #4]
 8007c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c4e:	07d9      	lsls	r1, r3, #31
 8007c50:	d405      	bmi.n	8007c5e <_vfiprintf_r+0x32>
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	059a      	lsls	r2, r3, #22
 8007c56:	d402      	bmi.n	8007c5e <_vfiprintf_r+0x32>
 8007c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c5a:	f7ff fbb0 	bl	80073be <__retarget_lock_acquire_recursive>
 8007c5e:	89ab      	ldrh	r3, [r5, #12]
 8007c60:	071b      	lsls	r3, r3, #28
 8007c62:	d501      	bpl.n	8007c68 <_vfiprintf_r+0x3c>
 8007c64:	692b      	ldr	r3, [r5, #16]
 8007c66:	b9eb      	cbnz	r3, 8007ca4 <_vfiprintf_r+0x78>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7fe fb02 	bl	8006274 <__swsetup_r>
 8007c70:	b1c0      	cbz	r0, 8007ca4 <_vfiprintf_r+0x78>
 8007c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c74:	07dc      	lsls	r4, r3, #31
 8007c76:	d50e      	bpl.n	8007c96 <_vfiprintf_r+0x6a>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	b01d      	add	sp, #116	; 0x74
 8007c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	4b7b      	ldr	r3, [pc, #492]	; (8007e70 <_vfiprintf_r+0x244>)
 8007c84:	429d      	cmp	r5, r3
 8007c86:	d101      	bne.n	8007c8c <_vfiprintf_r+0x60>
 8007c88:	68b5      	ldr	r5, [r6, #8]
 8007c8a:	e7df      	b.n	8007c4c <_vfiprintf_r+0x20>
 8007c8c:	4b79      	ldr	r3, [pc, #484]	; (8007e74 <_vfiprintf_r+0x248>)
 8007c8e:	429d      	cmp	r5, r3
 8007c90:	bf08      	it	eq
 8007c92:	68f5      	ldreq	r5, [r6, #12]
 8007c94:	e7da      	b.n	8007c4c <_vfiprintf_r+0x20>
 8007c96:	89ab      	ldrh	r3, [r5, #12]
 8007c98:	0598      	lsls	r0, r3, #22
 8007c9a:	d4ed      	bmi.n	8007c78 <_vfiprintf_r+0x4c>
 8007c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c9e:	f7ff fb8f 	bl	80073c0 <__retarget_lock_release_recursive>
 8007ca2:	e7e9      	b.n	8007c78 <_vfiprintf_r+0x4c>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cb2:	2330      	movs	r3, #48	; 0x30
 8007cb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e78 <_vfiprintf_r+0x24c>
 8007cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cbc:	f04f 0901 	mov.w	r9, #1
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	469a      	mov	sl, r3
 8007cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cc8:	b10a      	cbz	r2, 8007cce <_vfiprintf_r+0xa2>
 8007cca:	2a25      	cmp	r2, #37	; 0x25
 8007ccc:	d1f9      	bne.n	8007cc2 <_vfiprintf_r+0x96>
 8007cce:	ebba 0b04 	subs.w	fp, sl, r4
 8007cd2:	d00b      	beq.n	8007cec <_vfiprintf_r+0xc0>
 8007cd4:	465b      	mov	r3, fp
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7ff ff93 	bl	8007c06 <__sfputs_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	f000 80aa 	beq.w	8007e3a <_vfiprintf_r+0x20e>
 8007ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ce8:	445a      	add	r2, fp
 8007cea:	9209      	str	r2, [sp, #36]	; 0x24
 8007cec:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80a2 	beq.w	8007e3a <_vfiprintf_r+0x20e>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d00:	f10a 0a01 	add.w	sl, sl, #1
 8007d04:	9304      	str	r3, [sp, #16]
 8007d06:	9307      	str	r3, [sp, #28]
 8007d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d0e:	4654      	mov	r4, sl
 8007d10:	2205      	movs	r2, #5
 8007d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d16:	4858      	ldr	r0, [pc, #352]	; (8007e78 <_vfiprintf_r+0x24c>)
 8007d18:	f7f8 fa62 	bl	80001e0 <memchr>
 8007d1c:	9a04      	ldr	r2, [sp, #16]
 8007d1e:	b9d8      	cbnz	r0, 8007d58 <_vfiprintf_r+0x12c>
 8007d20:	06d1      	lsls	r1, r2, #27
 8007d22:	bf44      	itt	mi
 8007d24:	2320      	movmi	r3, #32
 8007d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d2a:	0713      	lsls	r3, r2, #28
 8007d2c:	bf44      	itt	mi
 8007d2e:	232b      	movmi	r3, #43	; 0x2b
 8007d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d34:	f89a 3000 	ldrb.w	r3, [sl]
 8007d38:	2b2a      	cmp	r3, #42	; 0x2a
 8007d3a:	d015      	beq.n	8007d68 <_vfiprintf_r+0x13c>
 8007d3c:	9a07      	ldr	r2, [sp, #28]
 8007d3e:	4654      	mov	r4, sl
 8007d40:	2000      	movs	r0, #0
 8007d42:	f04f 0c0a 	mov.w	ip, #10
 8007d46:	4621      	mov	r1, r4
 8007d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d4c:	3b30      	subs	r3, #48	; 0x30
 8007d4e:	2b09      	cmp	r3, #9
 8007d50:	d94e      	bls.n	8007df0 <_vfiprintf_r+0x1c4>
 8007d52:	b1b0      	cbz	r0, 8007d82 <_vfiprintf_r+0x156>
 8007d54:	9207      	str	r2, [sp, #28]
 8007d56:	e014      	b.n	8007d82 <_vfiprintf_r+0x156>
 8007d58:	eba0 0308 	sub.w	r3, r0, r8
 8007d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d60:	4313      	orrs	r3, r2
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	46a2      	mov	sl, r4
 8007d66:	e7d2      	b.n	8007d0e <_vfiprintf_r+0xe2>
 8007d68:	9b03      	ldr	r3, [sp, #12]
 8007d6a:	1d19      	adds	r1, r3, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	9103      	str	r1, [sp, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bfbb      	ittet	lt
 8007d74:	425b      	neglt	r3, r3
 8007d76:	f042 0202 	orrlt.w	r2, r2, #2
 8007d7a:	9307      	strge	r3, [sp, #28]
 8007d7c:	9307      	strlt	r3, [sp, #28]
 8007d7e:	bfb8      	it	lt
 8007d80:	9204      	strlt	r2, [sp, #16]
 8007d82:	7823      	ldrb	r3, [r4, #0]
 8007d84:	2b2e      	cmp	r3, #46	; 0x2e
 8007d86:	d10c      	bne.n	8007da2 <_vfiprintf_r+0x176>
 8007d88:	7863      	ldrb	r3, [r4, #1]
 8007d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d8c:	d135      	bne.n	8007dfa <_vfiprintf_r+0x1ce>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	1d1a      	adds	r2, r3, #4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	9203      	str	r2, [sp, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfb8      	it	lt
 8007d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d9e:	3402      	adds	r4, #2
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e88 <_vfiprintf_r+0x25c>
 8007da6:	7821      	ldrb	r1, [r4, #0]
 8007da8:	2203      	movs	r2, #3
 8007daa:	4650      	mov	r0, sl
 8007dac:	f7f8 fa18 	bl	80001e0 <memchr>
 8007db0:	b140      	cbz	r0, 8007dc4 <_vfiprintf_r+0x198>
 8007db2:	2340      	movs	r3, #64	; 0x40
 8007db4:	eba0 000a 	sub.w	r0, r0, sl
 8007db8:	fa03 f000 	lsl.w	r0, r3, r0
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	4303      	orrs	r3, r0
 8007dc0:	3401      	adds	r4, #1
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	482c      	ldr	r0, [pc, #176]	; (8007e7c <_vfiprintf_r+0x250>)
 8007dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dce:	2206      	movs	r2, #6
 8007dd0:	f7f8 fa06 	bl	80001e0 <memchr>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d03f      	beq.n	8007e58 <_vfiprintf_r+0x22c>
 8007dd8:	4b29      	ldr	r3, [pc, #164]	; (8007e80 <_vfiprintf_r+0x254>)
 8007dda:	bb1b      	cbnz	r3, 8007e24 <_vfiprintf_r+0x1f8>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	3307      	adds	r3, #7
 8007de0:	f023 0307 	bic.w	r3, r3, #7
 8007de4:	3308      	adds	r3, #8
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dea:	443b      	add	r3, r7
 8007dec:	9309      	str	r3, [sp, #36]	; 0x24
 8007dee:	e767      	b.n	8007cc0 <_vfiprintf_r+0x94>
 8007df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007df4:	460c      	mov	r4, r1
 8007df6:	2001      	movs	r0, #1
 8007df8:	e7a5      	b.n	8007d46 <_vfiprintf_r+0x11a>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	3401      	adds	r4, #1
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	4619      	mov	r1, r3
 8007e02:	f04f 0c0a 	mov.w	ip, #10
 8007e06:	4620      	mov	r0, r4
 8007e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e0c:	3a30      	subs	r2, #48	; 0x30
 8007e0e:	2a09      	cmp	r2, #9
 8007e10:	d903      	bls.n	8007e1a <_vfiprintf_r+0x1ee>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0c5      	beq.n	8007da2 <_vfiprintf_r+0x176>
 8007e16:	9105      	str	r1, [sp, #20]
 8007e18:	e7c3      	b.n	8007da2 <_vfiprintf_r+0x176>
 8007e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e1e:	4604      	mov	r4, r0
 8007e20:	2301      	movs	r3, #1
 8007e22:	e7f0      	b.n	8007e06 <_vfiprintf_r+0x1da>
 8007e24:	ab03      	add	r3, sp, #12
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <_vfiprintf_r+0x258>)
 8007e2c:	a904      	add	r1, sp, #16
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f7fd fd5e 	bl	80058f0 <_printf_float>
 8007e34:	4607      	mov	r7, r0
 8007e36:	1c78      	adds	r0, r7, #1
 8007e38:	d1d6      	bne.n	8007de8 <_vfiprintf_r+0x1bc>
 8007e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e3c:	07d9      	lsls	r1, r3, #31
 8007e3e:	d405      	bmi.n	8007e4c <_vfiprintf_r+0x220>
 8007e40:	89ab      	ldrh	r3, [r5, #12]
 8007e42:	059a      	lsls	r2, r3, #22
 8007e44:	d402      	bmi.n	8007e4c <_vfiprintf_r+0x220>
 8007e46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e48:	f7ff faba 	bl	80073c0 <__retarget_lock_release_recursive>
 8007e4c:	89ab      	ldrh	r3, [r5, #12]
 8007e4e:	065b      	lsls	r3, r3, #25
 8007e50:	f53f af12 	bmi.w	8007c78 <_vfiprintf_r+0x4c>
 8007e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e56:	e711      	b.n	8007c7c <_vfiprintf_r+0x50>
 8007e58:	ab03      	add	r3, sp, #12
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	462a      	mov	r2, r5
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <_vfiprintf_r+0x258>)
 8007e60:	a904      	add	r1, sp, #16
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7fd ffe8 	bl	8005e38 <_printf_i>
 8007e68:	e7e4      	b.n	8007e34 <_vfiprintf_r+0x208>
 8007e6a:	bf00      	nop
 8007e6c:	08012570 	.word	0x08012570
 8007e70:	08012590 	.word	0x08012590
 8007e74:	08012550 	.word	0x08012550
 8007e78:	0801270c 	.word	0x0801270c
 8007e7c:	08012716 	.word	0x08012716
 8007e80:	080058f1 	.word	0x080058f1
 8007e84:	08007c07 	.word	0x08007c07
 8007e88:	08012712 	.word	0x08012712

08007e8c <__sread>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	460c      	mov	r4, r1
 8007e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e94:	f000 f8d6 	bl	8008044 <_read_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	bfab      	itete	ge
 8007e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea0:	181b      	addge	r3, r3, r0
 8007ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ea6:	bfac      	ite	ge
 8007ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eaa:	81a3      	strhlt	r3, [r4, #12]
 8007eac:	bd10      	pop	{r4, pc}

08007eae <__swrite>:
 8007eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	461f      	mov	r7, r3
 8007eb4:	898b      	ldrh	r3, [r1, #12]
 8007eb6:	05db      	lsls	r3, r3, #23
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	d505      	bpl.n	8007ecc <__swrite+0x1e>
 8007ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f000 f898 	bl	8007ffc <_lseek_r>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	4632      	mov	r2, r6
 8007eda:	463b      	mov	r3, r7
 8007edc:	4628      	mov	r0, r5
 8007ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee2:	f000 b817 	b.w	8007f14 <_write_r>

08007ee6 <__sseek>:
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	460c      	mov	r4, r1
 8007eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eee:	f000 f885 	bl	8007ffc <_lseek_r>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	bf15      	itete	ne
 8007ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f02:	81a3      	strheq	r3, [r4, #12]
 8007f04:	bf18      	it	ne
 8007f06:	81a3      	strhne	r3, [r4, #12]
 8007f08:	bd10      	pop	{r4, pc}

08007f0a <__sclose>:
 8007f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0e:	f000 b831 	b.w	8007f74 <_close_r>
	...

08007f14 <_write_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	; (8007f34 <_write_r+0x20>)
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	2200      	movs	r2, #0
 8007f20:	602a      	str	r2, [r5, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f000 fa64 	bl	80083f0 <_write>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_write_r+0x1e>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_write_r+0x1e>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	20001518 	.word	0x20001518

08007f38 <__assert_func>:
 8007f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <__assert_func+0x2c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4605      	mov	r5, r0
 8007f44:	68d8      	ldr	r0, [r3, #12]
 8007f46:	b14c      	cbz	r4, 8007f5c <__assert_func+0x24>
 8007f48:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <__assert_func+0x30>)
 8007f4a:	9100      	str	r1, [sp, #0]
 8007f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f50:	4906      	ldr	r1, [pc, #24]	; (8007f6c <__assert_func+0x34>)
 8007f52:	462b      	mov	r3, r5
 8007f54:	f000 f81e 	bl	8007f94 <fiprintf>
 8007f58:	f000 f893 	bl	8008082 <abort>
 8007f5c:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <__assert_func+0x38>)
 8007f5e:	461c      	mov	r4, r3
 8007f60:	e7f3      	b.n	8007f4a <__assert_func+0x12>
 8007f62:	bf00      	nop
 8007f64:	20000740 	.word	0x20000740
 8007f68:	0801271d 	.word	0x0801271d
 8007f6c:	0801272a 	.word	0x0801272a
 8007f70:	080084f5 	.word	0x080084f5

08007f74 <_close_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d06      	ldr	r5, [pc, #24]	; (8007f90 <_close_r+0x1c>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	f000 f9fe 	bl	8008380 <_close>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_close_r+0x1a>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_close_r+0x1a>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	20001518 	.word	0x20001518

08007f94 <fiprintf>:
 8007f94:	b40e      	push	{r1, r2, r3}
 8007f96:	b503      	push	{r0, r1, lr}
 8007f98:	4601      	mov	r1, r0
 8007f9a:	ab03      	add	r3, sp, #12
 8007f9c:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <fiprintf+0x20>)
 8007f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa2:	6800      	ldr	r0, [r0, #0]
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	f7ff fe41 	bl	8007c2c <_vfiprintf_r>
 8007faa:	b002      	add	sp, #8
 8007fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb0:	b003      	add	sp, #12
 8007fb2:	4770      	bx	lr
 8007fb4:	20000740 	.word	0x20000740

08007fb8 <_fstat_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d07      	ldr	r5, [pc, #28]	; (8007fd8 <_fstat_r+0x20>)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	f000 f9e3 	bl	8008390 <_fstat>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d102      	bne.n	8007fd4 <_fstat_r+0x1c>
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	b103      	cbz	r3, 8007fd4 <_fstat_r+0x1c>
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	bd38      	pop	{r3, r4, r5, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20001518 	.word	0x20001518

08007fdc <_isatty_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d06      	ldr	r5, [pc, #24]	; (8007ff8 <_isatty_r+0x1c>)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	602b      	str	r3, [r5, #0]
 8007fe8:	f000 f9e2 	bl	80083b0 <_isatty>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_isatty_r+0x1a>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_isatty_r+0x1a>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	20001518 	.word	0x20001518

08007ffc <_lseek_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	; (800801c <_lseek_r+0x20>)
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	2200      	movs	r2, #0
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f000 f9e0 	bl	80083d0 <_lseek>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_lseek_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_lseek_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20001518 	.word	0x20001518

08008020 <__ascii_mbtowc>:
 8008020:	b082      	sub	sp, #8
 8008022:	b901      	cbnz	r1, 8008026 <__ascii_mbtowc+0x6>
 8008024:	a901      	add	r1, sp, #4
 8008026:	b142      	cbz	r2, 800803a <__ascii_mbtowc+0x1a>
 8008028:	b14b      	cbz	r3, 800803e <__ascii_mbtowc+0x1e>
 800802a:	7813      	ldrb	r3, [r2, #0]
 800802c:	600b      	str	r3, [r1, #0]
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	1e10      	subs	r0, r2, #0
 8008032:	bf18      	it	ne
 8008034:	2001      	movne	r0, #1
 8008036:	b002      	add	sp, #8
 8008038:	4770      	bx	lr
 800803a:	4610      	mov	r0, r2
 800803c:	e7fb      	b.n	8008036 <__ascii_mbtowc+0x16>
 800803e:	f06f 0001 	mvn.w	r0, #1
 8008042:	e7f8      	b.n	8008036 <__ascii_mbtowc+0x16>

08008044 <_read_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4d07      	ldr	r5, [pc, #28]	; (8008064 <_read_r+0x20>)
 8008048:	4604      	mov	r4, r0
 800804a:	4608      	mov	r0, r1
 800804c:	4611      	mov	r1, r2
 800804e:	2200      	movs	r2, #0
 8008050:	602a      	str	r2, [r5, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	f000 f9c4 	bl	80083e0 <_read>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_read_r+0x1e>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_read_r+0x1e>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	20001518 	.word	0x20001518

08008068 <__ascii_wctomb>:
 8008068:	b149      	cbz	r1, 800807e <__ascii_wctomb+0x16>
 800806a:	2aff      	cmp	r2, #255	; 0xff
 800806c:	bf85      	ittet	hi
 800806e:	238a      	movhi	r3, #138	; 0x8a
 8008070:	6003      	strhi	r3, [r0, #0]
 8008072:	700a      	strbls	r2, [r1, #0]
 8008074:	f04f 30ff 	movhi.w	r0, #4294967295
 8008078:	bf98      	it	ls
 800807a:	2001      	movls	r0, #1
 800807c:	4770      	bx	lr
 800807e:	4608      	mov	r0, r1
 8008080:	4770      	bx	lr

08008082 <abort>:
 8008082:	b508      	push	{r3, lr}
 8008084:	2006      	movs	r0, #6
 8008086:	f000 f82b 	bl	80080e0 <raise>
 800808a:	2001      	movs	r0, #1
 800808c:	f000 f9b8 	bl	8008400 <_exit>

08008090 <_raise_r>:
 8008090:	291f      	cmp	r1, #31
 8008092:	b538      	push	{r3, r4, r5, lr}
 8008094:	4604      	mov	r4, r0
 8008096:	460d      	mov	r5, r1
 8008098:	d904      	bls.n	80080a4 <_raise_r+0x14>
 800809a:	2316      	movs	r3, #22
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	f04f 30ff 	mov.w	r0, #4294967295
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080a6:	b112      	cbz	r2, 80080ae <_raise_r+0x1e>
 80080a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080ac:	b94b      	cbnz	r3, 80080c2 <_raise_r+0x32>
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f830 	bl	8008114 <_getpid_r>
 80080b4:	462a      	mov	r2, r5
 80080b6:	4601      	mov	r1, r0
 80080b8:	4620      	mov	r0, r4
 80080ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080be:	f000 b817 	b.w	80080f0 <_kill_r>
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d00a      	beq.n	80080dc <_raise_r+0x4c>
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	d103      	bne.n	80080d2 <_raise_r+0x42>
 80080ca:	2316      	movs	r3, #22
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	2001      	movs	r0, #1
 80080d0:	e7e7      	b.n	80080a2 <_raise_r+0x12>
 80080d2:	2400      	movs	r4, #0
 80080d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080d8:	4628      	mov	r0, r5
 80080da:	4798      	blx	r3
 80080dc:	2000      	movs	r0, #0
 80080de:	e7e0      	b.n	80080a2 <_raise_r+0x12>

080080e0 <raise>:
 80080e0:	4b02      	ldr	r3, [pc, #8]	; (80080ec <raise+0xc>)
 80080e2:	4601      	mov	r1, r0
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f7ff bfd3 	b.w	8008090 <_raise_r>
 80080ea:	bf00      	nop
 80080ec:	20000740 	.word	0x20000740

080080f0 <_kill_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	; (8008110 <_kill_r+0x20>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f000 f95f 	bl	80083c0 <_kill>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d102      	bne.n	800810c <_kill_r+0x1c>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	b103      	cbz	r3, 800810c <_kill_r+0x1c>
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	bd38      	pop	{r3, r4, r5, pc}
 800810e:	bf00      	nop
 8008110:	20001518 	.word	0x20001518

08008114 <_getpid_r>:
 8008114:	f000 b944 	b.w	80083a0 <_getpid>

08008118 <expf>:
 8008118:	b508      	push	{r3, lr}
 800811a:	ed2d 8b02 	vpush	{d8}
 800811e:	eef0 8a40 	vmov.f32	s17, s0
 8008122:	f000 f82f 	bl	8008184 <__ieee754_expf>
 8008126:	eeb0 8a40 	vmov.f32	s16, s0
 800812a:	eeb0 0a68 	vmov.f32	s0, s17
 800812e:	f000 f919 	bl	8008364 <finitef>
 8008132:	b160      	cbz	r0, 800814e <expf+0x36>
 8008134:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008174 <expf+0x5c>
 8008138:	eef4 8ae7 	vcmpe.f32	s17, s15
 800813c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008140:	dd0a      	ble.n	8008158 <expf+0x40>
 8008142:	f7fd fa0d 	bl	8005560 <__errno>
 8008146:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008178 <expf+0x60>
 800814a:	2322      	movs	r3, #34	; 0x22
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	eeb0 0a48 	vmov.f32	s0, s16
 8008152:	ecbd 8b02 	vpop	{d8}
 8008156:	bd08      	pop	{r3, pc}
 8008158:	eddf 7a08 	vldr	s15, [pc, #32]	; 800817c <expf+0x64>
 800815c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008164:	d5f3      	bpl.n	800814e <expf+0x36>
 8008166:	f7fd f9fb 	bl	8005560 <__errno>
 800816a:	2322      	movs	r3, #34	; 0x22
 800816c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008180 <expf+0x68>
 8008170:	6003      	str	r3, [r0, #0]
 8008172:	e7ec      	b.n	800814e <expf+0x36>
 8008174:	42b17180 	.word	0x42b17180
 8008178:	7f800000 	.word	0x7f800000
 800817c:	c2cff1b5 	.word	0xc2cff1b5
 8008180:	00000000 	.word	0x00000000

08008184 <__ieee754_expf>:
 8008184:	ee10 2a10 	vmov	r2, s0
 8008188:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800818c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008190:	d902      	bls.n	8008198 <__ieee754_expf+0x14>
 8008192:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008196:	4770      	bx	lr
 8008198:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800819c:	d106      	bne.n	80081ac <__ieee754_expf+0x28>
 800819e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80082d8 <__ieee754_expf+0x154>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bf18      	it	ne
 80081a6:	eeb0 0a67 	vmovne.f32	s0, s15
 80081aa:	4770      	bx	lr
 80081ac:	484b      	ldr	r0, [pc, #300]	; (80082dc <__ieee754_expf+0x158>)
 80081ae:	4282      	cmp	r2, r0
 80081b0:	dd02      	ble.n	80081b8 <__ieee754_expf+0x34>
 80081b2:	2000      	movs	r0, #0
 80081b4:	f000 b8d0 	b.w	8008358 <__math_oflowf>
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	da05      	bge.n	80081c8 <__ieee754_expf+0x44>
 80081bc:	4a48      	ldr	r2, [pc, #288]	; (80082e0 <__ieee754_expf+0x15c>)
 80081be:	4291      	cmp	r1, r2
 80081c0:	d902      	bls.n	80081c8 <__ieee754_expf+0x44>
 80081c2:	2000      	movs	r0, #0
 80081c4:	f000 b8c2 	b.w	800834c <__math_uflowf>
 80081c8:	4a46      	ldr	r2, [pc, #280]	; (80082e4 <__ieee754_expf+0x160>)
 80081ca:	4291      	cmp	r1, r2
 80081cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80081d0:	d952      	bls.n	8008278 <__ieee754_expf+0xf4>
 80081d2:	4a45      	ldr	r2, [pc, #276]	; (80082e8 <__ieee754_expf+0x164>)
 80081d4:	4291      	cmp	r1, r2
 80081d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80081da:	d834      	bhi.n	8008246 <__ieee754_expf+0xc2>
 80081dc:	4943      	ldr	r1, [pc, #268]	; (80082ec <__ieee754_expf+0x168>)
 80081de:	4411      	add	r1, r2
 80081e0:	ed91 7a00 	vldr	s14, [r1]
 80081e4:	4942      	ldr	r1, [pc, #264]	; (80082f0 <__ieee754_expf+0x16c>)
 80081e6:	440a      	add	r2, r1
 80081e8:	edd2 7a00 	vldr	s15, [r2]
 80081ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 80081f0:	f1c3 0201 	rsb	r2, r3, #1
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80081fa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80081fe:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80082f4 <__ieee754_expf+0x170>
 8008202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082f8 <__ieee754_expf+0x174>
 8008206:	eee6 6a05 	vfma.f32	s13, s12, s10
 800820a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80082fc <__ieee754_expf+0x178>
 800820e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008212:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008300 <__ieee754_expf+0x17c>
 8008216:	eee5 6a06 	vfma.f32	s13, s10, s12
 800821a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008304 <__ieee754_expf+0x180>
 800821e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008222:	eef0 6a40 	vmov.f32	s13, s0
 8008226:	eee5 6a46 	vfms.f32	s13, s10, s12
 800822a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800822e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008232:	bb92      	cbnz	r2, 800829a <__ieee754_expf+0x116>
 8008234:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008238:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800823c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008240:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8008244:	4770      	bx	lr
 8008246:	4b30      	ldr	r3, [pc, #192]	; (8008308 <__ieee754_expf+0x184>)
 8008248:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800830c <__ieee754_expf+0x188>
 800824c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008310 <__ieee754_expf+0x18c>
 8008250:	4413      	add	r3, r2
 8008252:	edd3 7a00 	vldr	s15, [r3]
 8008256:	eee0 7a07 	vfma.f32	s15, s0, s14
 800825a:	eeb0 7a40 	vmov.f32	s14, s0
 800825e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008262:	ee17 2a90 	vmov	r2, s15
 8008266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800826a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800826e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008314 <__ieee754_expf+0x190>
 8008272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008276:	e7be      	b.n	80081f6 <__ieee754_expf+0x72>
 8008278:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800827c:	d20b      	bcs.n	8008296 <__ieee754_expf+0x112>
 800827e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008318 <__ieee754_expf+0x194>
 8008282:	ee70 6a26 	vadd.f32	s13, s0, s13
 8008286:	eef4 6ae5 	vcmpe.f32	s13, s11
 800828a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828e:	dd02      	ble.n	8008296 <__ieee754_expf+0x112>
 8008290:	ee30 0a25 	vadd.f32	s0, s0, s11
 8008294:	4770      	bx	lr
 8008296:	2200      	movs	r2, #0
 8008298:	e7af      	b.n	80081fa <__ieee754_expf+0x76>
 800829a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800829e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80082a2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80082a6:	bfb8      	it	lt
 80082a8:	3264      	addlt	r2, #100	; 0x64
 80082aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80082ae:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80082b2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80082b6:	ee17 3a90 	vmov	r3, s15
 80082ba:	bfab      	itete	ge
 80082bc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80082c0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80082c4:	ee00 3a10 	vmovge	s0, r3
 80082c8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800831c <__ieee754_expf+0x198>
 80082cc:	bfbc      	itt	lt
 80082ce:	ee00 3a10 	vmovlt	s0, r3
 80082d2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80082d6:	4770      	bx	lr
 80082d8:	00000000 	.word	0x00000000
 80082dc:	42b17217 	.word	0x42b17217
 80082e0:	42cff1b5 	.word	0x42cff1b5
 80082e4:	3eb17218 	.word	0x3eb17218
 80082e8:	3f851591 	.word	0x3f851591
 80082ec:	0801286c 	.word	0x0801286c
 80082f0:	08012874 	.word	0x08012874
 80082f4:	3331bb4c 	.word	0x3331bb4c
 80082f8:	b5ddea0e 	.word	0xb5ddea0e
 80082fc:	388ab355 	.word	0x388ab355
 8008300:	bb360b61 	.word	0xbb360b61
 8008304:	3e2aaaab 	.word	0x3e2aaaab
 8008308:	08012864 	.word	0x08012864
 800830c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008310:	3f317180 	.word	0x3f317180
 8008314:	3717f7d1 	.word	0x3717f7d1
 8008318:	7149f2ca 	.word	0x7149f2ca
 800831c:	0d800000 	.word	0x0d800000

08008320 <with_errnof>:
 8008320:	b513      	push	{r0, r1, r4, lr}
 8008322:	4604      	mov	r4, r0
 8008324:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008328:	f7fd f91a 	bl	8005560 <__errno>
 800832c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008330:	6004      	str	r4, [r0, #0]
 8008332:	b002      	add	sp, #8
 8008334:	bd10      	pop	{r4, pc}

08008336 <xflowf>:
 8008336:	b130      	cbz	r0, 8008346 <xflowf+0x10>
 8008338:	eef1 7a40 	vneg.f32	s15, s0
 800833c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008340:	2022      	movs	r0, #34	; 0x22
 8008342:	f7ff bfed 	b.w	8008320 <with_errnof>
 8008346:	eef0 7a40 	vmov.f32	s15, s0
 800834a:	e7f7      	b.n	800833c <xflowf+0x6>

0800834c <__math_uflowf>:
 800834c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008354 <__math_uflowf+0x8>
 8008350:	f7ff bff1 	b.w	8008336 <xflowf>
 8008354:	10000000 	.word	0x10000000

08008358 <__math_oflowf>:
 8008358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008360 <__math_oflowf+0x8>
 800835c:	f7ff bfeb 	b.w	8008336 <xflowf>
 8008360:	70000000 	.word	0x70000000

08008364 <finitef>:
 8008364:	b082      	sub	sp, #8
 8008366:	ed8d 0a01 	vstr	s0, [sp, #4]
 800836a:	9801      	ldr	r0, [sp, #4]
 800836c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008370:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008374:	bfac      	ite	ge
 8008376:	2000      	movge	r0, #0
 8008378:	2001      	movlt	r0, #1
 800837a:	b002      	add	sp, #8
 800837c:	4770      	bx	lr
	...

08008380 <_close>:
 8008380:	4b02      	ldr	r3, [pc, #8]	; (800838c <_close+0xc>)
 8008382:	2258      	movs	r2, #88	; 0x58
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	f04f 30ff 	mov.w	r0, #4294967295
 800838a:	4770      	bx	lr
 800838c:	20001518 	.word	0x20001518

08008390 <_fstat>:
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <_fstat+0xc>)
 8008392:	2258      	movs	r2, #88	; 0x58
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f04f 30ff 	mov.w	r0, #4294967295
 800839a:	4770      	bx	lr
 800839c:	20001518 	.word	0x20001518

080083a0 <_getpid>:
 80083a0:	4b02      	ldr	r3, [pc, #8]	; (80083ac <_getpid+0xc>)
 80083a2:	2258      	movs	r2, #88	; 0x58
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295
 80083aa:	4770      	bx	lr
 80083ac:	20001518 	.word	0x20001518

080083b0 <_isatty>:
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <_isatty+0xc>)
 80083b2:	2258      	movs	r2, #88	; 0x58
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	2000      	movs	r0, #0
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	20001518 	.word	0x20001518

080083c0 <_kill>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <_kill+0xc>)
 80083c2:	2258      	movs	r2, #88	; 0x58
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ca:	4770      	bx	lr
 80083cc:	20001518 	.word	0x20001518

080083d0 <_lseek>:
 80083d0:	4b02      	ldr	r3, [pc, #8]	; (80083dc <_lseek+0xc>)
 80083d2:	2258      	movs	r2, #88	; 0x58
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295
 80083da:	4770      	bx	lr
 80083dc:	20001518 	.word	0x20001518

080083e0 <_read>:
 80083e0:	4b02      	ldr	r3, [pc, #8]	; (80083ec <_read+0xc>)
 80083e2:	2258      	movs	r2, #88	; 0x58
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ea:	4770      	bx	lr
 80083ec:	20001518 	.word	0x20001518

080083f0 <_write>:
 80083f0:	4b02      	ldr	r3, [pc, #8]	; (80083fc <_write+0xc>)
 80083f2:	2258      	movs	r2, #88	; 0x58
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	f04f 30ff 	mov.w	r0, #4294967295
 80083fa:	4770      	bx	lr
 80083fc:	20001518 	.word	0x20001518

08008400 <_exit>:
 8008400:	e7fe      	b.n	8008400 <_exit>
	...

08008404 <_init>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr

08008410 <_fini>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	bf00      	nop
 8008414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008416:	bc08      	pop	{r3}
 8008418:	469e      	mov	lr, r3
 800841a:	4770      	bx	lr
